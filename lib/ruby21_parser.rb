#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-605,580,220,-101,-103,-103,-517,-605,-605,-605,748,270,661,-605,-605',
'661,-605,661,995,-99,739,-84,-512,-100,740,-605,661,270,-100,-512,580',
'580,625,112,622,-70,-605,-605,221,-605,-605,-605,-605,-605,580,83,660',
'221,209,660,999,660,-94,84,-92,580,217,218,-102,-507,660,539,-99,210',
'541,700,-507,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,728,-106,-605,-605,-605,-101,645,211,217,218,-605,217',
'218,-605,624,270,621,269,-605,216,-605,-98,-605,-605,-605,-605,-605',
'-605,-605,-94,-605,-605,-605,269,116,747,-101,-103,-94,115,-92,-101',
'-103,-90,-288,-605,-605,-91,-93,-105,-605,-288,-288,-288,116,-601,-288',
'-288,-288,115,-288,-100,-102,116,116,221,-100,929,115,115,-288,-288',
'-288,-94,-102,-92,-94,116,-92,270,-288,-288,115,-288,-288,-288,-288',
'-288,116,699,-94,-102,-92,115,728,728,-102,-104,221,116,116,221,269',
'260,115,115,-97,317,783,-598,-92,-288,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,768,-89,-288,-288,-288,-516,785,-288',
'845,816,-288,606,527,-288,-288,-601,-288,318,-288,-416,-288,606,-288',
'-288,-288,-288,-288,-288,-288,-96,-288,221,-288,782,94,95,606,-502,-602',
'-103,606,269,-91,357,-502,-288,-288,-288,-288,-598,-288,-288,-288,-502',
'-93,565,-100,381,-288,-288,-288,-98,-104,384,-288,-288,568,-288,-105',
'116,116,-598,608,607,115,115,816,-95,586,-599,387,760,608,607,619,456',
'390,-288,-288,-101,-288,-288,-288,-288,-288,-517,406,608,607,576,575',
'608,607,604,-508,-516,758,94,95,263,-605,-508,-425,96,97,877,264,411',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288',
'-505,569,-288,-288,-288,-90,644,-505,-605,-106,-288,455,-599,-288,-502',
'-89,-505,457,-288,-99,-288,-502,-288,-288,-288,-288,-288,-288,-288,-98',
'-288,-605,-288,-425,-599,606,408,527,-605,-100,-425,410,409,-601,-605',
'-288,-288,-605,-95,-425,-288,-605,-605,-605,96,97,-605,-605,-605,263',
'-605,-605,-104,458,565,-605,264,-425,-605,-605,-605,-605,-605,-601,220',
'568,489,-605,272,-96,-605,-605,-509,-605,-605,-605,-605,-605,560,-509',
'557,556,555,-105,558,-605,608,607,626,499,560,502,557,556,555,504,558',
'606,576,575,611,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605',
'-605,-605,-605,215,-511,-605,-605,-605,-69,784,-605,-511,221,-605,606',
'639,-605,-605,513,-605,569,-605,514,-605,521,-605,-605,-605,-605,-605',
'-605,-605,275,-605,-605,-605,560,606,557,556,555,565,558,221,975,-97',
'608,607,-605,-605,-605,-605,568,-605,-505,-605,841,-94,272,-106,638',
'-505,-505,-505,116,-102,-505,-505,-505,115,-505,-103,-280,524,563,608',
'607,614,-505,-280,-505,-505,-505,573,572,576,575,116,-280,528,-505,-505',
'115,-505,-505,-505,-505,-505,608,607,609,539,-92,-513,541,560,-510,557',
'556,555,-513,558,116,-510,241,116,-101,115,536,569,115,-505,-505,-505',
'-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,-505,217,218,-505',
'-505,-505,-289,-505,-505,714,542,-505,543,-289,-505,-505,504,-505,717',
'-505,586,-505,-289,-505,-505,-505,-505,-505,-505,-505,400,-505,590,-505',
'560,-505,557,556,555,565,558,539,-505,591,541,613,-505,-505,-505,-505',
'568,-505,-502,-505,539,-288,617,538,620,-502,-502,-502,-288,-505,-502',
'-502,-502,-602,-502,116,-514,-288,563,546,115,623,-502,-514,-502,-502',
'-502,573,572,576,575,116,-514,630,-502,-502,115,-502,-502,-502,-502',
'-502,560,-262,557,556,555,632,558,560,221,557,556,555,636,558,560,637',
'557,556,555,272,558,569,648,-502,-502,-502,-502,-502,-502,-502,-502',
'-502,-502,-502,-502,-502,-502,241,714,-502,-502,-502,-515,-502,-502',
'714,241,-502,241,-515,-502,-502,714,-502,921,-502,241,-502,-515,-502',
'-502,-502,-502,-502,-502,-502,241,-502,560,-502,557,556,555,953,558',
'557,556,555,221,558,221,519,-502,-502,-502,-502,221,-502,520,-502,-84',
'293,72,73,74,12,60,518,238,-502,66,67,240,239,678,70,714,68,69,71,33',
'34,75,76,221,717,845,816,532,32,31,30,104,103,105,106,868,869,22,689',
'870,110,111,649,11,48,694,13,108,107,109,98,59,100,99,101,695,102,110',
'111,221,94,95,702,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
'705,234,235,-289,706,255,256,708,43,710,-289,36,576,575,61,62,241,712',
'63,-289,38,238,720,244,47,240,239,236,237,248,246,242,23,243,217,218',
'721,91,83,85,86,87,89,217,218,722,84,92,238,259,724,-239,240,239,65',
'217,218,81,88,90,586,731,96,97,293,72,73,74,12,60,761,762,452,66,67',
'763,-263,769,70,453,68,69,71,33,34,75,76,489,454,489,221,787,32,31,30',
'104,103,105,106,260,502,22,504,689,221,272,649,11,48,272,13,108,107',
'109,98,59,100,99,101,689,102,110,111,241,94,95,816,45,46,44,241,245',
'250,251,252,247,249,257,258,253,254,-288,234,235,-280,221,255,256,-288',
'43,839,-280,36,-602,221,61,62,-288,816,63,-280,38,238,849,244,47,240',
'239,236,237,248,246,242,23,243,221,-264,743,91,83,85,86,87,89,956,213',
'876,84,92,879,259,705,214,744,882,65,885,887,81,88,90,212,889,96,97',
'293,72,73,74,12,60,221,891,529,66,67,892,689,900,70,530,68,69,71,33',
'34,75,76,-262,454,904,906,907,32,31,30,104,103,105,106,221,705,22,910',
'912,914,916,633,11,48,916,13,108,107,109,98,59,100,99,101,221,102,110',
'111,922,94,95,924,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
'743,234,235,-514,926,255,256,956,43,221,-514,36,936,937,61,62,744,221',
'63,-514,38,238,940,244,47,240,239,236,237,248,246,242,23,243,-265,950',
'-515,91,83,85,86,87,89,-515,1005,957,84,92,958,259,960,1006,-515,961',
'65,977,979,81,88,90,1004,980,96,97,293,72,73,74,12,60,984,705,-335,66',
'67,989,991,993,70,-335,68,69,71,33,34,75,76,995,-335,995,1002,1007,32',
'31,30,104,103,105,106,1008,953,22,557,556,555,916,558,11,48,916,13,108',
'107,109,98,59,100,99,101,916,102,110,111,1013,94,95,977,45,46,44,241',
'245,250,251,252,247,249,257,258,253,254,743,234,235,-289,-602,255,256',
'742,43,-601,-289,36,694,977,61,62,744,1036,63,-289,38,238,1037,244,47',
'240,239,236,237,248,246,242,23,243,1038,1039,-288,91,83,85,86,87,89',
'-288,588,995,84,92,-602,259,995,589,-288,995,65,221,916,81,88,90,587',
'977,96,97,293,72,73,74,12,60,3,,,66,67,,,,70,,68,69,71,33,34,75,76,119',
'120,121,122,123,32,31,30,104,103,105,106,,,22,119,120,121,122,123,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
'245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36',
',,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91',
'83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31',
'30,104,103,105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247',
'249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238',
',244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84',
'92,221,259,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
'10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
'245,250,251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36',
',,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91',
'83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,',
'255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246',
'242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96',
'97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253',
'254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65',
',,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247',
'249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238',
',244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84',
'92,,259,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250',
'251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62',
',,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85',
'86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255',
'256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242',
'23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97',
'293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
',234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81',
'88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249',
'257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250',
'251,252,247,249,257,258,253,254,,234,235,,,255,256,,43,,,36,,,61,62',
',,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85',
'86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,241,245,250,251,252,247,249,257,258,253,254,,234,235,,,255',
'256,,43,,,295,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242',
'23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81,88,90,,,96,97',
'293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,257,258,253,254',
',234,235,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,259,,,,,65,,,81',
'88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,241,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,238,,,,240,239,236,237',
'560,,557,556,555,,558,255,256,,43,,,36,241,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,,,242,23,243,,,714,91,83,85,86,87,89,,238,,84,92',
'240,239,236,237,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,560,22,557',
'556,555,,558,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,241,245,250,251,252,247,249,257,714,253,254,,,,,,255,256',
',43,,,295,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23',
'243,,,,91,83,85,86,87,89,,,,84,92,,560,,557,556,555,65,558,,81,88,90',
',,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,714',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247,249,,,253',
'254,,,,,,255,256,,43,,,295,,,61,62,,,63,,38,238,,244,47,240,239,236',
'237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624,247,249',
',,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47,240,239',
'236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624',
'247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624',
'-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38',
'238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241',
'-624,-624,-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62',
',,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,241,-624,-624,-624,-624,247,249,,,-624,-624,,,,,,255,256,,43,',
',36,,,61,62,,,63,,38,238,,244,47,240,239,236,237,248,246,242,23,243',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,36,,241,61,62,,,63',
',38,238,,244,47,240,239,236,237,255,256,242,23,243,,,,91,83,85,86,87',
'89,,,238,84,92,,240,239,236,237,,65,,,81,88,90,,,96,97,293,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,241,,,,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238',
',244,47,240,239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251',
'252,247,249,257,258,253,254,,-624,-624,,,255,256,,43,,,36,,,61,62,,',
'63,,38,238,,244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,293,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,241,,,,,,,,,,,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244,47',
'240,239,236,237,,,242,23,243,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,293,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,-624,-624,-624,-624',
'247,249,,,-624,-624,,,,,,255,256,,43,,,36,,,61,62,,,63,,38,238,,244',
'47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,241,245,250,251,252,247',
'249,257,258,253,254,,-624,-624,,,255,256,,226,,,232,,,61,62,,,63,,,238',
',244,47,240,239,236,237,248,246,242,23,243,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,241,,,,,,,,,,,,,,,,255',
'256,,226,,,232,,,61,62,,,63,,,238,,244,47,240,239,236,237,,,,23,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,241,,,,,,,,,,,,,,,,255,256,,226,,,232,,,61,62,,,63,,284,238',
'282,244,47,240,239,236,237,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,314,,,,,,,,,,,,,,,,,,,,894,,,232,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,221,,,,,,65,,287,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
'284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63',
',299,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,232,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,316,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,232,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,516,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
'286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62',
',,63,,,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
'287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,894',
',,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,967,',
',232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304',
',,300,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,673,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,532,,61,62,,,63,,,,,,47,,,,,,,,231,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,221,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
'284,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109',
'592,59,100,99,593,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,594',
',,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107,109',
'592,59,100,99,593,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,594',
',,232,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,',
'115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,351',
',,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,,,,,,,231,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,',
'233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38',
',,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,400,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
'286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62',
',,63,,673,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,400,65,,,81,88,90,,,96,97,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,308,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,416,,,,47',
',,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,',
'63,,284,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',226,,,232,,,61,62,,,63,,673,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,',
',48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,416,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,221,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,286,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,284,,282,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
'766,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,',
'306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61',
'62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76',
',,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59',
'100,99,101,286,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,673,,282,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,286,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,282,,47,,,,,,,,231,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,287,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,233',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,',
',,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,308,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,314,,,,,,,,,,,,,,,,,,,,304',
',,300,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311',
'75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226',
',,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,308,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,314,,,,,,,,,,,,,,,,,,,,304,,,300,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106',
',,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105',
'106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313,104,103',
'105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,416,,,,47',
',,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307,313',
'104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,',
'47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306,307',
'313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,',
',,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,,,,,306',
'307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,,61,62,',
',63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75,76,,',
',,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,,,232,,',
'61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310,311,75',
'76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,226,',
',232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,310',
'311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,226,,,232,,,61,62,,,63,,284,,,,47,,,,,,,,231,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,310,311,75,76,,,,,,306,307,313,104,103,105,106,,,233,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,226,,,232,,,61,62,,,63,,,,,,47,,,,,,,,231,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-607,,96,97,,,,-607,-607,-607',
',,-607,-607,-607,560,-607,557,556,555,565,558,,,,-607,-607,-607,-607',
',,568,,,,,-607,-607,,-607,-607,-607,-607,-607,,,,,,,,,,563,,,,,,,,,573',
'572,576,575,,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,,,-607,-607,-607,,,-607,,,-607,,,-607,-607,,-607,569',
'-607,,-607,,-607,-607,-607,-607,-607,-607,-607,,-607,-607,-607,,,,,',
',,,,,,,-607,-607,-607,-607,-281,-607,,-607,,,,-281,-281,-281,,,-281',
'-281,-281,560,-281,557,556,555,565,558,,,,,-281,-281,-281,,,568,,,,',
'-281,-281,,-281,-281,-281,-281,-281,,,,,,,,,,563,,,,,,,,,,,576,575,',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
',,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,569,-281,,-281,,-281',
'-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281',
'-281,-606,-281,,-281,,,,-606,-606,-606,,,-606,-606,-606,560,-606,557',
'556,555,565,558,,,,-606,-606,-606,-606,,,568,,,,,-606,-606,,-606,-606',
'-606,-606,-606,,,,,,,,,,563,,,,,,,,,,,576,575,,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606',
',,-606,,,-606,-606,,-606,569,-606,,-606,,-606,-606,-606,-606,-606,-606',
'-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,,-606,,-606,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,366,365,367,364,172,191,190,',
',,,,171,178,169,170,361,362,363,359,129,100,99,360,,102,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,373,',
',,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,',
',,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183',
'182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179',
',,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166',
'167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,397,396,128,,398',
',,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
'-623,,165,,,,,-623,-623,-623,,,-623,-623,-623,560,-623,557,556,555,565',
'558,158,,,-623,-623,-623,,,,568,,,,,-623,-623,,-623,-623,-623,-623,-623',
',,,,,,,,,563,,,,,,,,,,,576,575,,-623,-623,-623,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,,,-623,-623,-623,,,-623,,272,-623,,,-623',
'-623,,-623,569,-623,,-623,,-623,-623,-623,-623,-623,-623,-623,,-623',
'-623,-623,,,,,,,,,,,,-623,-623,-623,,-623,,-623,-623,-623,-623,,,-623',
'-623,-623,560,-623,557,556,555,565,558,,,,-623,-623,,,,,568,,,,,-623',
'-623,,-623,-623,-623,-623,-623,,,560,,557,556,555,565,558,563,,,,,,',
',,568,,576,575,,-295,,,,,,,-295,-295,-295,,-623,-295,-295,-295,,-295',
'563,-623,,,,,272,-623,,-295,-295,576,575,,569,,,,,-295,-295,,-295,-295',
'-295,-295,-295,,-623,-623,,,,,,,,,,,,,-623,,,569,,-623,,,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,,,-295,-295,-295',
',,-295,,275,-295,,,-295,-295,,-295,,-295,,-295,,-295,-295,-295,-295',
'-295,-295,-295,,-295,,-295,,,,,,,,,,,,-424,-295,-295,,-295,,-295,-424',
'-424,-424,,,-424,-424,-424,560,-424,557,556,555,565,558,,,,-424,-424',
'-424,,,,568,,,,,-424,-424,,-424,-424,-424,-424,-424,,,,,,,,,,563,752',
',,,,,,,573,572,576,575,,-424,-424,-424,-424,-424,-424,-424,-424,-424',
'-424,-424,-424,-424,-424,,,-424,-424,-424,,,-424,,272,-424,,,-424,-424',
',-424,569,-424,,-424,,-424,-424,-424,-424,-424,-424,-424,,-424,-424',
'-424,,,,,,736,437,,,737,,,-424,-424,,-424,,-424,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,487,430,,,488',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,1001,437,,,1000,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,560,165,557,556,555,565,558,,,',
',,,,,,568,,,,,158,,,,,,,,,560,,557,556,555,565,558,,563,682,430,,,683',
',,568,573,572,576,575,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,563,163,164,149,150,,,,,,272,576,575,,,569,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,651,430,,,652,,569,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,653,437,,,654,,,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,1031,437,,,1032,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165',
'557,556,555,565,558,,,,,,,,,,568,,,,,158,,,,,,,,,560,,557,556,555,565',
'558,,563,433,437,,,432,,,568,573,572,576,575,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,563,163,164,149,150,,,221,,,272,576,575,,,569',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165,557',
'556,555,565,558,,,,,,569,,,,568,,,,560,158,557,556,555,565,558,,,,,',
',,,,568,,563,,,,,,,,,573,572,576,575,,,,,,,,563,752,426,430,,,427,,',
'573,572,576,575,,,161,162,,157,139,140,141,148,145,147,569,,142,143',
',,,163,164,149,150,,,,,,272,,,,569,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,560,165,557,556,555,565,558,,,,,,,,,,568,,,,,158',
',,,,,,,,560,,557,556,555,565,558,,563,853,437,,,854,,,568,573,572,576',
'575,,161,162,,157,139,140,141,148,145,147,,,142,143,,,563,163,164,149',
'150,,,,,,272,576,575,,,569,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,487,430,,,488,,569,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,653,437,,,654',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,651,430,,,652,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,560,165,557,556,555,565,558',
',,,,,,,,,568,,,,,158,,,,560,,557,556,555,565,558,,,,,,,563,685,437,568',
',686,,,,573,572,576,575,,161,162,,157,139,140,141,148,145,147,,563,142',
'143,,,,163,164,149,150,,576,575,,,272,,,,,569,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,560,165,557,556,555,565,558,569,560',
',557,556,555,565,558,,568,,,,,158,,560,568,557,556,555,565,558,,,,,',
',,,563,568,,,,,,,563,573,572,576,575,,,,,573,572,576,575,,,563,,,,,',
',,,,,576,575,,,,,,,,,,569,,,,,,,,569,,,734,430,,,735,,,,,,,,569,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,272',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,1029,430,,,1030,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,272,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26183, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'433,342,22,1029,1030,735,225,433,433,433,598,309,494,433,433,485,433',
'665,1046,349,594,677,361,851,594,433,493,64,1044,361,341,850,391,3,388',
'677,433,433,22,433,433,433,433,433,903,80,494,951,13,485,951,665,683',
'80,682,925,692,692,1031,365,493,697,225,15,697,545,365,433,433,433,433',
'433,433,433,433,433,433,433,433,433,433,583,352,433,433,433,734,433',
'16,755,755,433,450,450,433,391,664,388,309,433,19,433,348,433,433,433',
'433,433,433,433,735,433,433,433,64,342,598,1029,1030,683,342,682,1029',
'1030,349,654,433,433,851,433,590,433,654,654,654,598,1031,654,654,654',
'598,654,1044,433,341,850,692,1044,850,341,850,654,654,654,683,736,682',
'683,903,682,29,654,654,903,654,654,654,654,654,925,545,683,1031,682',
'925,582,852,1031,737,755,748,583,450,664,25,748,583,352,40,652,592,734',
'654,654,654,654,654,654,654,654,654,654,654,654,654,654,634,348,654',
'654,654,224,654,654,1015,1015,654,618,455,654,654,736,654,43,654,29',
'654,385,654,654,654,654,654,654,654,590,654,48,654,651,314,314,615,592',
'737,652,375,29,634,72,592,654,654,654,654,592,654,432,654,592,736,702',
'634,87,432,432,432,224,654,88,432,432,702,432,455,582,852,592,618,618',
'582,852,982,737,982,593,89,618,385,385,385,227,90,432,432,651,432,432',
'432,432,432,42,124,615,615,702,702,375,375,375,366,41,615,44,44,27,853',
'366,811,314,314,786,27,207,432,432,432,432,432,432,432,432,432,432,432',
'432,432,432,593,702,432,432,432,42,432,593,685,227,432,226,593,432,359',
'41,593,228,432,42,432,359,432,432,432,432,432,432,432,41,432,853,432',
'811,593,393,126,318,853,786,811,126,126,853,653,432,432,853,432,811',
'432,653,653,653,44,44,653,653,653,369,653,685,432,229,879,853,369,811',
'685,653,653,653,653,685,233,879,265,685,268,318,653,653,367,653,653',
'653,653,653,921,367,921,921,921,318,921,685,393,393,393,279,717,280',
'717,717,717,283,717,379,879,879,379,653,653,653,653,653,653,653,653',
'653,653,653,653,653,653,18,362,653,653,653,294,653,653,362,296,653,382',
'427,653,653,297,653,879,653,298,653,304,653,653,653,653,653,653,653',
'307,653,653,653,752,377,752,752,752,752,752,308,921,18,379,379,653,653',
'653,653,752,653,101,653,717,427,313,18,426,101,101,101,5,653,101,101',
'101,5,101,427,968,315,752,382,382,382,101,968,101,101,101,752,752,752',
'752,345,968,319,101,101,345,101,101,101,101,101,377,377,377,335,426',
'363,335,563,364,563,563,563,363,563,290,364,322,860,426,290,328,752',
'860,101,101,101,101,101,101,101,101,101,101,101,101,101,101,326,326',
'101,101,101,521,101,101,563,332,101,333,521,101,101,336,101,563,101',
'346,101,521,101,101,101,101,101,101,101,347,101,351,101,339,360,339',
'339,339,339,339,331,360,353,331,381,101,101,101,101,339,101,98,101,330',
'686,384,330,387,98,98,98,686,101,98,98,98,686,98,753,301,686,339,339',
'753,390,98,301,98,98,98,339,339,339,339,934,301,412,98,98,934,98,98',
'98,98,98,1013,415,1013,1013,1013,417,1013,839,421,839,839,839,424,839',
'977,425,977,977,977,434,977,339,442,98,98,98,98,98,98,98,98,98,98,98',
'98,98,98,463,1013,98,98,98,302,98,98,839,464,98,465,302,98,98,977,98',
'839,98,466,98,302,98,98,98,98,98,98,98,461,98,714,98,714,714,714,891',
'714,891,891,891,495,891,496,303,98,98,98,98,511,98,303,98,512,699,699',
'699,699,699,699,303,461,98,699,699,461,461,515,699,714,699,699,699,699',
'699,699,699,517,714,723,723,522,699,699,699,699,699,699,699,756,756',
'699,525,756,756,756,445,699,699,533,699,699,699,699,699,699,699,699',
'699,534,699,699,699,535,699,699,548,699,699,699,445,445,445,445,445',
'445,445,445,445,445,445,549,445,445,740,551,445,445,552,699,553,740',
'699,705,705,699,699,462,561,699,740,699,445,570,445,699,445,445,445',
'445,445,445,445,699,445,749,749,574,699,699,699,699,699,699,340,340',
'577,699,699,462,445,579,445,462,462,699,20,20,699,699,699,584,585,699',
'699,802,802,802,802,802,802,622,625,223,802,802,627,631,635,802,223',
'802,802,802,802,802,802,802,640,223,646,655,657,802,802,802,802,802',
'802,802,663,670,802,672,679,681,684,656,802,802,687,802,802,802,802',
'802,802,802,802,802,688,802,802,802,691,802,802,693,802,802,802,656',
'656,656,656,656,656,656,656,656,656,656,854,656,656,305,701,656,656',
'854,802,716,305,802,854,718,802,802,854,725,802,305,802,656,730,656',
'802,656,656,656,656,656,656,656,802,656,733,765,893,802,802,802,802',
'802,802,893,17,770,802,802,788,656,789,17,893,791,802,792,793,802,802',
'802,17,795,802,802,806,806,806,806,806,806,796,797,320,806,806,798,810',
'814,806,320,806,806,806,806,806,806,806,817,320,818,822,823,806,806',
'806,806,806,806,806,824,825,806,829,830,832,833,420,806,806,835,806',
'806,806,806,806,806,806,806,806,838,806,806,806,840,806,806,843,806',
'806,806,420,420,420,420,420,420,420,420,420,420,420,955,420,420,964',
'846,420,420,955,806,856,964,806,861,862,806,806,955,863,806,964,806',
'420,872,420,806,420,420,420,420,420,420,420,806,420,873,890,965,806',
'806,806,806,806,806,965,966,894,806,806,895,420,897,966,965,898,806',
'923,927,806,806,806,966,928,806,806,807,807,807,807,807,807,933,941',
'49,807,807,944,945,946,807,49,807,807,807,807,807,807,807,947,49,949',
'959,967,807,807,807,807,807,807,807,970,999,807,999,999,999,971,999',
'807,807,972,807,807,807,807,807,807,807,807,807,973,807,807,807,974',
'807,807,976,807,807,807,531,531,531,531,531,531,531,531,531,531,531',
'596,531,531,1007,1000,531,531,596,807,1001,1007,807,1003,1014,807,807',
'596,1019,807,1007,807,531,1020,531,807,531,531,531,531,531,531,531,807',
'531,1021,1022,1032,807,807,807,807,807,807,1032,350,1023,807,807,1032',
'531,1024,350,1032,1025,807,1028,1033,807,807,807,350,1034,807,807,578',
'578,578,578,578,578,1,,,578,578,,,,578,,578,578,578,578,578,578,578',
'510,510,510,510,510,578,578,578,578,578,578,578,,,578,292,292,292,292',
'292,578,578,,578,578,578,578,578,578,578,578,578,,578,578,578,,578,578',
',578,578,578,767,767,767,767,767,767,767,767,767,767,767,,767,767,,',
'767,767,,578,,,578,,,578,578,,,578,,578,767,,767,578,767,767,767,767',
'767,767,767,578,767,,,,578,578,578,578,578,578,,,,578,578,,767,,,,,578',
',,578,578,578,,,578,578,896,896,896,896,896,896,,,,896,896,,,,896,,896',
'896,896,896,896,896,896,9,9,9,9,9,896,896,896,896,896,896,896,,,896',
'676,676,676,676,676,896,896,,896,896,896,896,896,896,896,896,896,,896',
'896,896,,896,896,,896,896,896,484,484,484,484,484,484,484,484,484,484',
'484,,484,484,,,484,484,,896,,,896,,,896,896,,,896,,896,484,,484,896',
'484,484,484,484,484,484,484,896,484,,,,896,896,896,896,896,896,,,,896',
'896,484,484,,,,,896,,,896,896,896,,,896,896,2,2,2,2,2,2,,,,2,2,,,,2',
',2,2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,',
'2,2,2,,2,2,,2,2,2,772,772,772,772,772,772,772,772,772,772,772,,772,772',
',,772,772,,2,,,2,,,2,2,,,2,,2,772,,772,2,772,772,772,772,772,772,772',
'2,772,,,,2,2,2,2,2,2,,,,2,2,,772,,,,,2,,,2,2,2,,,2,2,816,816,816,816',
'816,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,,816,816',
'816,816,816,816,816,,,816,,,,,,816,816,,816,816,816,816,816,816,816',
'816,816,,816,816,816,,816,816,,816,816,816,779,779,779,779,779,779,779',
'779,779,779,779,,779,779,,,779,779,,816,,,816,,,816,816,,,816,,816,779',
',779,816,779,779,779,779,779,779,779,816,779,,,,816,816,816,816,816',
'816,,,,816,816,,779,,,,,816,,,816,816,816,,,816,816,209,209,209,209',
'209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209',
'209,209,209,209,209,,,209,,,,,,209,209,,209,209,209,209,209,209,209',
'209,209,,209,209,209,,209,209,,209,209,209,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,209,,,209,,,209,209,,,209,,209,24,,24,209,24,24',
'24,24,24,24,24,209,24,,,,209,209,209,209,209,209,,,,209,209,,24,,,,',
'209,,,209,209,209,,,209,209,700,700,700,700,700,700,,,,700,700,,,,700',
',700,700,700,700,700,700,700,,,,,,700,700,700,700,700,700,700,,,700',
',,,,,700,700,,700,700,700,700,700,700,700,700,700,,700,700,700,,700',
'700,,700,700,700,781,781,781,781,781,781,781,781,781,781,781,,781,781',
',,781,781,,700,,,700,,,700,700,,,700,,700,781,,781,700,781,781,781,781',
'781,781,781,700,781,,,,700,700,700,700,700,700,,,,700,700,,781,,,,,700',
',,700,700,700,,,700,700,406,406,406,406,406,406,,,,406,406,,,,406,,406',
'406,406,406,406,406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,',
'406,406,406,406,406,406,406,406,406,406,406,406,,406,406,406,,406,406',
',406,406,406,440,440,440,440,440,440,440,440,440,440,440,,440,440,,',
'440,440,,406,,,406,,,406,406,,,406,,406,440,,440,406,440,440,440,440',
'440,440,440,406,440,,,,406,406,406,406,406,406,,,,406,406,,440,,,,,406',
',,406,406,406,,,406,406,987,987,987,987,987,987,,,,987,987,,,,987,,987',
'987,987,987,987,987,987,,,,,,987,987,987,987,987,987,987,,,987,,,,,',
'987,987,,987,987,987,987,987,987,987,987,987,,987,987,987,,987,987,',
'987,987,987,690,690,690,690,690,690,690,690,690,690,690,,690,690,,,690',
'690,,987,,,987,,,987,987,,,987,,987,690,,690,987,690,690,690,690,690',
'690,690,987,690,,,,987,987,987,987,987,987,,,,987,987,,690,,,,,987,',
',987,987,987,,,987,987,986,986,986,986,986,986,,,,986,986,,,,986,,986',
'986,986,986,986,986,986,,,,,,986,986,986,986,986,986,986,,,986,,,,,',
'986,986,,986,986,986,986,986,986,986,986,986,,986,986,986,,986,986,',
'986,986,986,875,875,875,875,875,875,875,875,875,875,875,,875,875,,,875',
'875,,986,,,986,,,986,986,,,986,,986,875,,875,986,875,875,875,875,875',
'875,875,986,875,,,,986,986,986,986,986,986,,,,986,986,,875,,,,,986,',
',986,986,986,,,986,986,983,983,983,983,983,983,,,,983,983,,,,983,,983',
'983,983,983,983,983,983,,,,,,983,983,983,983,983,983,983,,,983,,,,,',
'983,983,,983,983,983,983,983,983,983,983,983,,983,983,983,,983,983,',
'983,983,983,774,774,774,774,774,774,774,774,774,774,774,,774,774,,,774',
'774,,983,,,983,,,983,983,,,983,,983,774,,774,983,774,774,774,774,774',
'774,774,983,774,,,,983,983,983,983,983,983,,,,983,983,,774,,,,,983,',
',983,983,983,,,983,983,978,978,978,978,978,978,,,,978,978,,,,978,,978',
'978,978,978,978,978,978,,,,,,978,978,978,978,978,978,978,,,978,,,,,',
'978,978,,978,978,978,978,978,978,978,978,978,,978,978,978,,978,978,',
'978,978,978,878,878,878,878,878,878,878,878,878,878,878,,878,878,,,878',
'878,,978,,,978,,,978,978,,,978,,978,878,,878,978,878,878,878,878,878',
'878,878,978,878,,,,978,978,978,978,978,978,,,,978,978,,878,,,,,978,',
',978,978,978,,,978,978,300,300,300,300,300,300,,,,300,300,,,,300,,300',
'300,300,300,300,300,300,,,,,,300,300,300,300,300,300,300,,,300,,,,,',
'300,300,,300,300,300,300,300,300,300,300,300,,300,300,300,,300,300,',
'300,300,300,777,777,777,777,777,777,777,777,777,777,777,,777,777,,,777',
'777,,300,,,300,,,300,300,,,300,,300,777,,777,300,777,777,777,777,777',
'777,777,300,777,,,,300,300,300,300,300,300,,,,300,300,,777,,,,,300,',
',300,300,300,,,300,300,857,857,857,857,857,857,,,,857,857,,,,857,,857',
'857,857,857,857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,',
'857,857,,857,857,857,857,857,857,857,857,857,,857,857,857,,857,857,',
'857,857,857,277,277,277,277,277,277,277,277,277,277,277,,277,277,,,277',
'277,,857,,,857,,,857,857,,,857,,857,277,,277,857,277,277,277,277,277',
'277,277,857,277,,,,857,857,857,857,857,857,,,,857,857,,277,,,,,857,',
',857,857,857,,,857,857,232,232,232,232,232,232,,,,232,232,,,,232,,232',
'232,232,232,232,232,232,,,,,,232,232,232,232,232,232,232,481,,232,,',
',,,232,232,,232,232,232,232,232,232,232,232,232,,232,232,232,,232,232',
',232,232,232,472,481,,,,481,481,481,481,841,,841,841,841,,841,472,472',
',232,,,232,480,,232,232,,,232,,232,472,,472,232,472,472,472,472,,,472',
'232,472,,,841,232,232,232,232,232,232,,480,,232,232,480,480,480,480',
',,232,,,232,232,232,,,232,232,36,36,36,36,36,36,,,,36,36,,,,36,,36,36',
'36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,922,36,922,922,922,,922,36',
'36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,483,483,483',
'483,483,483,483,483,922,483,483,,,,,,483,483,,36,,,36,,,36,36,,,36,',
'36,483,,483,36,483,483,483,483,483,483,483,36,483,,,,36,36,36,36,36',
'36,,,,36,36,,975,,975,975,975,36,975,,36,36,36,,,36,36,295,295,295,295',
'295,295,,,,295,295,,,,295,,295,295,295,295,295,295,295,975,,,,,295,295',
'295,295,295,295,295,,,295,,,,,,295,295,,295,295,295,295,295,295,295',
'295,295,,295,295,295,,295,295,,295,295,295,482,482,482,482,482,482,482',
',,482,482,,,,,,482,482,,295,,,295,,,295,295,,,295,,295,482,,482,295',
'482,482,482,482,482,482,482,295,482,,,,295,295,295,295,295,295,,,,295',
'295,,,,,,,295,,,295,295,295,,,295,295,848,848,848,848,848,848,,,,848',
'848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848,848,848,848',
'848,,,848,,,,,,848,848,,848,848,848,848,848,848,848,848,848,,848,848',
'848,,848,848,,848,848,848,479,479,479,479,479,479,479,,,479,479,,,,',
',479,479,,848,,,848,,,848,848,,,848,,848,479,,479,848,479,479,479,479',
'479,479,479,848,479,,,,848,848,848,848,848,848,,,,848,848,,,,,,,848',
',,848,848,848,,,848,848,581,581,581,581,581,581,,,,581,581,,,,581,,581',
'581,581,581,581,581,581,,,,,,581,581,581,581,581,581,581,,,581,,,,,',
'581,581,,581,581,581,581,581,581,581,581,581,,581,581,581,,581,581,',
'581,581,581,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,581',
',,581,,,581,581,,,581,,581,478,,478,581,478,478,478,478,478,478,478',
'581,478,,,,581,581,581,581,581,581,,,,581,581,,,,,,,581,,,581,581,581',
',,581,581,847,847,847,847,847,847,,,,847,847,,,,847,,847,847,847,847',
'847,847,847,,,,,,847,847,847,847,847,847,847,,,847,,,,,,847,847,,847',
'847,847,847,847,847,847,847,847,,847,847,847,,847,847,,847,847,847,477',
'477,477,477,477,477,477,,,477,477,,,,,,477,477,,847,,,847,,,847,847',
',,847,,847,477,,477,847,477,477,477,477,477,477,477,847,477,,,,847,847',
'847,847,847,847,,,,847,847,,,,,,,847,,,847,847,847,,,847,847,750,750',
'750,750,750,750,,,,750,750,,,,750,,750,750,750,750,750,750,750,,,,,',
'750,750,750,750,750,750,750,,,750,,,,,,750,750,,750,750,750,750,750',
'750,750,750,750,,750,750,750,,750,750,,750,750,750,476,476,476,476,476',
'476,476,,,476,476,,,,,,476,476,,750,,,750,,,750,750,,,750,,750,476,',
'476,750,476,476,476,476,476,476,476,750,476,,,,750,750,750,750,750,750',
',,,750,750,,,,,,,750,,,750,750,750,,,750,750,751,751,751,751,751,751',
',,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751',
'751,751,751,,,751,,,,,,751,751,,751,751,751,751,751,751,751,751,751',
',751,751,751,,751,751,,751,751,751,475,475,475,475,475,475,475,,,475',
'475,,,,,,475,475,,751,,,751,,,751,751,,,751,,751,475,,475,751,475,475',
'475,475,475,475,475,751,475,,,,751,751,751,751,751,751,,,,751,751,,',
',,,,751,,,751,751,751,,,751,751,325,325,325,325,325,325,,,,325,325,',
',,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325,325,325',
',,325,,,,,,325,325,,325,325,325,325,325,325,325,325,325,,325,325,325',
',325,325,,325,325,325,474,,,,,,,,,,,,,,,,474,474,,325,,,325,,469,325',
'325,,,325,,325,474,,474,325,474,474,474,474,469,469,474,325,474,,,,325',
'325,325,325,325,325,,,469,325,325,,469,469,469,469,,325,,,325,325,325',
',,325,325,930,930,930,930,930,930,,,,930,930,,,,930,,930,930,930,930',
'930,930,930,,,,,,930,930,930,930,930,930,930,,,930,,,,,,930,930,,930',
'930,930,930,930,930,930,930,930,,930,930,930,,930,930,,930,930,930,473',
',,,,,,,,,,,,,,,473,473,,930,,,930,,,930,930,,,930,,930,473,,473,930',
'473,473,473,473,,,473,930,473,,,,930,930,930,930,930,930,,,,930,930',
',,,,,,930,,,930,930,930,,,930,930,757,757,757,757,757,757,,,,757,757',
',,,757,,757,757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757',
',,757,,,,,,757,757,,757,757,757,757,757,757,757,757,757,,757,757,757',
',757,757,,757,757,757,459,459,459,459,459,459,459,459,459,459,459,,459',
'459,,,459,459,,757,,,757,,,757,757,,,757,,757,459,,459,757,459,459,459',
'459,459,459,459,757,459,,,,757,757,757,757,757,757,,,,757,757,,,,,,',
'757,,,757,757,757,,,757,757,900,900,900,900,900,900,,,,900,900,,,,900',
',900,900,900,900,900,900,900,,,,,,900,900,900,900,900,900,900,,,900',
',,,,,900,900,,900,900,900,900,900,900,900,900,900,,900,900,900,,900',
'900,,900,900,900,471,,,,,,,,,,,,,,,,471,471,,900,,,900,,,900,900,,,900',
',900,471,,471,900,471,471,471,471,,,471,900,471,,,,900,900,900,900,900',
'900,,,,900,900,,,,,,,900,,,900,900,900,,,900,900,963,963,963,963,963',
'963,,,,963,963,,,,963,,963,963,963,963,963,963,963,,,,,,963,963,963',
'963,963,963,963,,,963,,,,,,963,963,,963,963,963,963,963,963,963,963',
'963,,963,963,963,,963,963,,963,963,963,470,470,470,470,470,470,470,',
',470,470,,,,,,470,470,,963,,,963,,,963,963,,,963,,963,470,,470,963,470',
'470,470,470,470,470,470,963,470,,,,963,963,963,963,963,963,,,,963,963',
',,,,,,963,,,963,963,963,,,963,963,219,219,219,,219,,,,219,219,,,,219',
',219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219',
',,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,,219',
'219,219,460,460,460,460,460,460,460,460,460,460,460,,460,460,,,460,460',
',219,,,219,,,219,219,,,219,,,460,,460,219,460,460,460,460,460,460,460',
'219,460,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219,219,219',
',,219,219,738,738,738,,738,,,,738,738,,,,738,,738,738,738,738,738,738',
'738,,,,,,738,738,738,738,738,738,738,,,738,,,,,,,738,,,738,738,738,738',
'738,738,738,738,,738,738,738,,738,738,,738,738,738,467,,,,,,,,,,,,,',
',,467,467,,738,,,738,,,738,738,,,738,,,467,,467,738,467,467,467,467',
',,,738,,,,,738,738,738,738,738,738,,,,738,738,,,,,,,738,,,738,738,738',
',,738,738,744,744,744,,744,,,,744,744,,,,744,,744,744,744,744,744,744',
'744,,,,,,744,744,744,744,744,744,744,,,744,,,,,,,744,,,744,744,744,744',
'744,744,744,744,744,744,744,744,,744,744,,744,744,744,468,,,,,,,,,,',
',,,,,468,468,,744,,,744,,,744,744,,,744,,744,468,744,468,744,468,468',
'468,468,,,,744,,,,,744,744,744,744,744,744,,,,744,744,,,,,,,744,,744',
'744,744,744,,,744,744,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,766',
'766,766,,766,,,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766',
'766,766,766,766,766,766,,,766,,,,,,,766,,,766,766,766,766,766,766,766',
'766,,766,766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766',
',,766,766,,,766,,,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766',
'766,,,,,,,766,,,766,766,766,,,766,766,768,768,768,,768,,,,768,768,,',
',768,,768,768,768,768,768,768,768,,,,,,768,768,768,768,768,768,768,',
',768,,,,,,,768,,,768,768,768,768,768,768,768,768,,768,768,768,,768,768',
',768,768,768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,',
',,,,,,768,,,,,768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768',
'768,,,768,768,255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255',
'255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255',
'255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,',
',,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255',
'255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,782,782,782',
',782,,,,782,782,,,,782,,782,782,782,782,782,782,782,,,,,,782,782,782',
'782,782,782,782,,,782,,,,,,,782,,,782,782,782,782,782,782,782,782,,782',
'782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782',
',,782,,,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,,,',
',,,782,,,782,782,782,,,782,782,783,783,783,,783,,,,783,783,,,,783,,783',
'783,783,783,783,783,783,,,,,,783,783,783,783,783,783,783,,,783,,,,,',
',783,,,783,783,783,783,783,783,783,783,,783,783,783,,783,783,,783,783',
'783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,,783,,,,,,783,,,,,,,,783',
',,,,783,783,783,783,783,783,,,,783,783,,,,,,,783,,,783,783,783,,,783',
'783,784,784,784,,784,,,,784,784,,,,784,,784,784,784,784,784,784,784',
',,,,,784,784,784,784,784,784,784,,,784,,,,,,,784,,,784,784,784,784,784',
'784,784,784,,784,784,784,,784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784',
',,784,,,784,784,,,784,,,,,,784,,,,,,,,784,,,,,784,784,784,784,784,784',
',,,784,784,,,,,,,784,,,784,784,784,,,784,784,785,785,785,,785,,,,785',
'785,,,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785',
'785,,,785,,,,,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,',
'785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,',
',,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785,',
',785,785,785,,,785,785,787,787,787,,787,,,,787,787,,,,787,,787,787,787',
'787,787,787,787,,,,,,787,787,787,787,787,787,787,,,787,,,,,,,787,,,787',
'787,787,787,787,787,787,787,,787,787,787,,787,787,,787,787,787,,,,,',
',,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,,,787,,,,,,,,787,,,,,787',
'787,787,787,787,787,,,,787,787,,,,,,,787,,,787,787,787,,,787,787,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,',
',266,,,266,266,266,266,266,266,266,266,266,266,266,266,,266,266,,266',
'266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,,266,,266,,266,,266',
',,,,,,,266,,,,,266,266,266,266,266,266,,,,266,266,,,,,,,266,,266,266',
'266,266,,,266,266,272,272,272,,272,,,,272,272,,,,272,,272,272,272,272',
'272,272,272,,,,,,272,272,272,272,272,272,272,,,272,,,,,,,272,,,272,272',
'272,272,272,272,272,272,272,272,272,272,,272,272,,272,272,272,,,,,,',
',,,,,,,,,,,,,272,,,272,,,272,272,,,272,,272,,272,,272,,,,,,,,272,,,',
',272,272,272,272,272,272,,,,272,272,,,,,,,272,,272,272,272,272,,,272',
'272,799,799,799,,799,,,,799,799,,,,799,,799,799,799,799,799,799,799',
',,,,,799,799,799,799,799,799,799,,,799,,,,,,,799,,,799,799,799,799,799',
'799,799,799,,799,799,799,,799,799,,,,799,,,,,,,,,,,,,,,,,,,,799,,,799',
',,799,799,,,799,,,,,,,,,,,,,,,,,,,799,799,799,799,799,799,,,,799,799',
',,,,,,799,,,799,799,799,,,799,799,275,275,275,,275,,,,275,275,,,,275',
',275,275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275',
',,,,,,275,,,275,275,275,275,275,275,275,275,275,275,275,275,,275,275',
',275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,275,,275',
',275,,,,,,,,275,,,,,275,275,275,275,275,275,,,,275,275,275,,,,,,275',
',275,275,275,275,,,275,275,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32',
'32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32',
',,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,',
'32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33',
',,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33',
'33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33',
',33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33',
'33,,,33,33,282,282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282',
'282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,,282,,,282,282,282,282',
'282,282,282,282,,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,',
',,282,,,282,,,282,282,,,282,,,,,,282,,,,,,,,282,,,,,282,282,282,282',
'282,282,,,,282,282,,,,,,,282,,,282,282,282,,,282,282,34,34,34,,34,,',
',34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,',
',,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,',
',,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34',
'34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,284,284,284,,284,,,',
'284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284,284,284,284',
'284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284,284,,284,284,284',
',284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,,284,',
',,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284,284,,,,,,,284',
',,284,284,284,,,284,284,286,286,286,,286,,,,286,286,,,,286,,286,286',
'286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,,,286',
',,286,286,286,286,286,286,286,286,,286,286,286,,286,286,,286,286,286',
',,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,286,,,',
',286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286,286,,,286,286',
'287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287,287,287,,,,',
',287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287',
'287,287,,287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,',
'287,,,287,287,,,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287',
',,,287,287,,,,,,,287,,,287,287,287,,,287,287,293,293,293,293,293,,,',
'293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293,293,293,293,293',
'293,293,,,293,,,,,,293,293,,293,293,293,293,293,293,293,293,293,,293',
'293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293',
',,293,,293,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293',
',,,,,,293,,,293,293,293,,,293,293,37,37,37,,37,,,,37,37,,,,37,,37,37',
'37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37,37,37',
'37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37,,,37,37',
',,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37,,,37,37',
'37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,845,845',
'845,,845,,,,845,845,,,,845,,845,845,845,845,845,845,845,,,,,,845,845',
'845,845,845,845,845,,,845,,,,,,,845,,,845,845,845,845,845,845,845,845',
',845,845,845,,845,845,,845,845,845,,,,,,,,,,,,,,,,,,,,845,,,845,,,845',
'845,,,845,,,,,,845,,,,,,,,845,,,,,845,845,845,845,845,845,,,,845,845',
',,,,,,845,,,845,845,845,,,845,845,299,299,299,,299,,,,299,299,,,,299',
',299,299,299,299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299',
',,,,,,299,,,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,',
',299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,,299,,,,,,,,,,,,,,,,,,',
'299,299,299,299,299,299,,,,299,299,,,,299,,,299,,,299,299,299,,,299',
'299,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858,858,858',
',,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858,858,858',
'858,858,858,,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858',
',,858,,,858,858,,,858,,,,,,858,,,,,,,,858,,,,,858,858,858,858,858,858',
',,,858,858,,,,,,,858,,,858,858,858,,,858,858,876,876,876,,876,,,,876',
'876,,,,876,,876,876,876,876,876,876,876,,,,,,876,876,876,876,876,876',
'876,,,876,,,,,,,876,,,876,876,876,876,876,876,876,876,876,876,876,876',
',876,876,,876,876,876,,,,,,,,,,,,,,,,,,,,876,,,876,,,876,876,,,876,',
',,876,,876,,,,,,,,876,,,,,876,876,876,876,876,876,,,,876,876,,,,,,,876',
',876,876,876,876,,,876,876,877,877,877,,877,,,,877,877,,,,877,,877,877',
'877,877,877,877,877,,,,,,877,877,877,877,877,877,877,,,877,,,,,,,877',
',,877,877,877,877,877,877,877,877,,877,877,877,,877,877,,877,877,877',
',,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877,,,,,,877,,,,,,,,877,,,',
',877,877,877,877,877,877,,,,877,877,,,,,,,877,,,877,877,877,,,877,877',
'892,892,892,,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,',
',892,892,892,892,892,892,892,,,892,,,,,,,892,,,892,892,892,892,892,892',
'892,892,,892,892,892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,,892,,,892,,',
'892,892,,,892,,,,,,,,,,,,,,,,,,,892,892,892,892,892,892,,,,892,892,',
',,,,,892,,,892,892,892,,,892,892,904,904,904,,904,,,,904,904,,,,904',
',904,904,904,904,904,904,904,,,,,,904,904,904,904,904,904,904,,,904',
',,,,,,904,,,904,904,904,904,904,904,904,904,,904,904,904,,904,904,,',
',904,,,,,,,,,,,,,,,,,,,,904,,,904,,,904,904,,,904,,,,,,,,,,,,,,,,,,',
'904,904,904,904,904,904,,,,904,904,,,,,,,904,,,904,904,904,,,904,904',
'45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45',
'45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45',
'45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45',
'45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,316,316,316,,316',
',,,316,316,,,,316,,316,316,316,316,316,316,316,,,,,,316,316,316,316',
'316,316,316,,,316,,,,,,,316,,,316,316,316,316,316,316,316,316,,316,316',
'316,,316,316,,,,316,,,,,,,,,,,,,,,,,,,,316,,,316,,,316,316,,,316,,,',
',,,,,,,,,,,,,,,316,316,316,316,316,316,,,,316,316,,,,,,,316,,,316,316',
'316,,,316,316,929,929,929,,929,,,,929,929,,,,929,,929,929,929,929,929',
'929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,,,929,,,929,929,929',
'929,929,929,929,929,,929,929,929,,929,929,,929,929,929,,,,,,,,,,,,,',
',,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,,929,,,,,929,929,929',
'929,929,929,,,,929,929,,,,,,,929,,,929,929,929,,,929,929,46,46,46,,46',
',,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46',
',,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,',
',,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46',
'46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,',
'47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47',
'47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47',
',,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,',
',,,,,47,,,47,47,47,,,47,47,324,324,324,,324,,,,324,324,,,,324,,324,324',
'324,324,324,324,324,,,,,,324,324,324,324,324,324,324,,,324,,,,,,,324',
',,324,324,324,324,324,324,324,324,,324,324,324,,324,324,,324,324,324',
',,,,,,,,,,,,,,,,,,,324,,,324,324,,324,324,,,324,,,,,,324,,,,,,,,324',
',,,,324,324,324,324,324,324,,,,324,324,,,,,,,324,,,324,324,324,,,324',
'324,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61,61,61',
'61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61,,61,61',
',61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,,,,,,61',
',,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,,,61,61,1004,1004',
'1004,,1004,,,,1004,1004,,,,1004,,1004,1004,1004,1004,1004,1004,1004',
',,,,,1004,1004,1004,1004,1004,1004,1004,,,1004,,,,,,,1004,,,1004,1004',
'1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,,1004,1004,,1004,1004',
'1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004,,1004,,1004,',
'1004,,,,,,,,1004,,,,,1004,1004,1004,1004,1004,1004,,,,1004,1004,,,,',
',,1004,,1004,1004,1004,1004,,,1004,1004,343,343,343,,343,,,,343,343',
',,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343',
',,343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343',
'343,,343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343',
',,,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343,,,343,343',
'343,,,343,343,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344',
'344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344,344,344',
'344,344,344,344,344,,344,344,344,,344,344,,344,344,344,,,,,,,,,,,,,',
',,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344,344,344',
'344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344,62,62,62,,62',
',,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62',
',,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,',
',,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62',
'62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62,63,63,63,,63,,,,63,63',
',,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63',
',,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,',
',,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,',
',,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66,,,,66,66,,,,66,,66',
'66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66',
'66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66',
',,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,',
'66,,,66,66,66,,,66,66,356,356,356,,356,,,,356,356,,,,356,,356,356,356',
'356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356,,,356',
'356,356,356,356,356,356,356,,356,356,356,,356,356,,,,356,,,,,,,,,,,',
',,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356,356',
'356,356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356,358,358,358,,358',
',,,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358,358,358',
'358,358,358,,,358,,,,,,,358,,,358,358,358,358,358,358,358,358,,358,358',
'358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358,,,',
',,,,,,,,,,,,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358,358',
'358,,,358,358,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,',
',67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67',
'67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67',
'70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70',
'70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70',
'70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70',
'70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71',
',,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71',
',,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,',
',,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71',
',,,71,71,,,,,,,71,,,71,71,71,,,71,71,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8',
'8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8',
'8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,416,416,416,,416,,,,416,416,,,',
'416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416,,',
'416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416,,416,416',
',416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,',
',,,,,,416,,,,,416,416,416,416,416,416,,,,416,416,,,,,,,416,,,416,416',
'416,,,416,416,454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454',
'454,454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454',
'454,454,454,454,454,454,454,454,454,,454,454,,454,454,454,,,,,,,,,,',
',,,,,,,,,454,,,454,,,454,454,,,454,,454,,454,,454,,,,,,,,454,,,,,454',
'454,454,454,454,454,,,,454,454,,,,,,,454,,454,454,454,454,,,454,454',
'456,456,456,,456,,,,456,456,,,,456,,456,456,456,456,456,456,456,,,,',
',456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456,456,456,456,456',
'456,456,,456,456,456,,456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456,,',
'456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456,456,456,456,456,456',
',,,456,456,,,,,,,456,,,456,456,456,,,456,456,457,457,457,,457,,,,457',
'457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457',
'457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,',
'457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,',
',,,457,,,,,,,,457,,,,,457,457,457,457,457,457,,,,457,457,,,,,,,457,',
',457,457,457,,,457,457,458,458,458,,458,,,,458,458,,,,458,,458,458,458',
'458,458,458,458,,,,,,458,458,458,458,458,458,458,,,458,,,,,,,458,,,458',
'458,458,458,458,458,458,458,,458,458,458,,458,458,,458,458,458,,,,,',
',,,,,,,,,,,,,,458,,,458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458',
'458,458,458,458,458,,,,458,458,,,,,,,458,,,458,458,458,,,458,458,114',
'114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,',
'114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,',
',,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114',
'114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119',
'119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119',
',,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,',
',,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120',
'120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,',
',120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120',
',,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120',
'120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121',
',,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121',
'121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121',
',,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,',
',122,122,122,,,122,122,499,499,499,,499,,,,499,499,,,,499,,499,499,499',
'499,499,499,499,,,,,,499,499,499,499,499,499,499,,,499,,,,,,,499,,,499',
'499,499,499,499,499,499,499,499,499,499,499,,499,499,,499,499,499,,',
',,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,,499,,499,,499,,,,,,,,499',
',,,,499,499,499,499,499,499,,,,499,499,,,,,,,499,,499,499,499,499,,',
'499,499,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502',
'502,,,,,,502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502',
'502,502,502,502,502,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,',
',,,,,502,,,502,,,502,502,,,502,,,,502,,502,,,,,,,,502,,,,,502,502,502',
'502,502,502,,,,502,502,,,,,,,502,,502,502,502,502,,,502,502,504,504',
'504,,504,,,,504,504,,,,504,,504,504,504,504,504,504,504,,,,,,504,504',
'504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504,504,504,504,504',
',504,504,504,,504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504',
'504,,,504,,,,,,504,,,,,,,,504,,,,,504,504,504,504,504,504,,,,504,504',
',,,,,,504,,,504,504,504,,,504,504,509,509,509,509,509,,,,509,509,,,',
'509,,509,509,509,509,509,509,509,,,,,,509,509,509,509,509,509,509,,',
'509,,,,,,509,509,,509,509,509,509,509,509,509,509,509,,509,509,509,',
'509,509,,509,509,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509,,,509,,509',
',,,509,,,,,,,,509,,,,,509,509,509,509,509,509,,,,509,509,,,,,,509,509',
',,509,509,509,,,509,509,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,516,516,516,,516,,,,516,516,,,,516,,516,516,516,516,516,516',
'516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516,,,516,516,516,516',
'516,516,516,516,,516,516,516,,516,516,,,,516,,,,,,,,,,,,,,,,,,,,516',
',,516,,,516,516,,,516,,,,,,,,,,,,,,,,,,,516,516,516,516,516,516,,,,516',
'516,,,,,,,516,,,516,516,516,,,516,516,23,23,23,,23,,,,23,23,,,,23,,23',
'23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23',
'23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23',
',,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,',
'23,,,23,23,23,,,23,23,518,518,518,,518,,,,518,518,,,,518,,518,518,518',
'518,518,518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518',
'518,518,518,518,518,518,518,518,518,518,518,,518,518,,518,518,518,,',
',,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,518,,518,,518,,,,,,,,518',
',,,,518,518,518,518,518,518,,,,518,518,,,,,,,518,,518,518,518,518,,',
'518,518,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524,524,524',
'524,,,,,,524,524,524,524,524,524,524,,,524,,,,,,,524,,,524,524,524,524',
'524,524,524,524,,524,524,524,,524,524,,,,524,,,,,,,,,,,,,,,,,,,,524',
',,524,,,524,524,,,524,,,,,,,,,,,,,,,,,,,524,524,524,524,524,524,,,,524',
'524,,,,,,,524,,,524,524,524,,,524,524,210,210,210,,210,,,,210,210,,',
',210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,',
',210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210',
',210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210',
',,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210',
'210,,,210,210,527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527',
'527,527,527,527,527,,527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,',
',,,,,,527,,,527,,,527,527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527',
'527,527,527,,,,527,527,,,,,,,527,,,527,527,527,,,527,527,528,528,528',
',528,,,,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528,528',
'528,528,528,528,,,528,,,,,,,528,,,528,528,528,528,528,528,528,528,,528',
'528,528,,528,528,,528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528',
',,528,,,,,,528,,,,,,,,528,,,,,528,528,528,528,528,528,,,,528,528,,,',
',,,528,,,528,528,528,,,528,528,532,532,532,,532,,,,532,532,,,,532,,532',
'532,532,532,532,532,532,,,,,,532,532,532,532,532,532,532,,,532,,,,,',
',532,,,532,532,532,532,532,532,532,532,,532,532,532,,532,532,,532,532',
'532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532,532,,,532,,,,,,532,,,,,,,,532',
',,,,532,532,532,532,532,532,,,,532,532,,,,,,,532,,,532,532,532,,,532',
'532,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211,211',
',,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211,211',
'211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211',
',,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211',
',,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212,,212,,,,212',
'212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212,212,212',
'212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212,212,212',
',212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,',
'212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,',
',,212,,212,212,212,212,,,212,212,538,538,538,,538,,,,538,538,,,,538',
',538,538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538',
',,,,,,538,,,538,538,538,538,538,538,538,538,538,538,538,538,,538,538',
',538,538,538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,538,,,,538',
',,,,,,,538,,,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,538,538',
'538,538,,,538,538,541,541,541,,541,,,,541,541,,,,541,,541,541,541,541',
'541,541,541,,,,,,541,541,541,541,541,541,541,,,541,,,,,,,541,,,541,541',
'541,541,541,541,541,541,541,541,541,541,,541,541,,541,541,541,,,,,,',
',,,,,,,,,,,,,541,,,541,,,541,541,,,541,,,,,,541,,,,,,,,541,,,,,541,541',
'541,541,541,541,,,,541,541,,,,,,,541,,541,541,541,541,,,541,541,215',
'215,215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215',
'215,215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215',
'215,,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215',
',,215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,,,,,,,215,,,215,215,215,,,215,215,216,216,216,,216,,,,216,216,,',
',216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,',
',216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216',
',216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,216,,,,216',
',,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216',
'216,,,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,',
',,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217',
'217,217,217,,,,217,217,,,,,,,217,,,217,217,217,,,217,217,218,218,218',
',218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218',
'218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218',
'218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218',
',,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,',
',,,218,,,218,218,218,,,218,218,566,566,566,,566,,,,566,566,,,,566,,566',
'566,566,566,566,566,566,,,,,,566,566,566,566,566,566,566,,,566,,,,,',
',566,,,566,566,566,566,566,566,566,566,,566,566,566,,566,566,,566,566',
'566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,,566,,,,,,566,,,,,,,,566',
',,,,566,566,566,566,566,566,,,,566,566,,,,,,,566,,,566,566,566,,,566',
'566,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220',
',,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220',
'220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220',
',,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220',
',,,220,220,220,,,,,,220,,,220,220,220,,,220,220,587,587,587,,587,,,',
'587,587,,,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587',
'587,587,,,587,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,587',
'587,,587,587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587',
',587,,587,,587,,,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,,,',
',,,587,,587,587,587,587,,,587,587,599,599,599,,599,,,,599,599,,,,599',
',599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,599',
',,,,,,599,,,599,599,599,599,599,599,599,599,,599,599,599,,599,599,,599',
'599,599,,,,,,,,,,,,,,,,,,,,599,,,599,,,599,599,,,599,,,,,,599,,,,,,',
',599,,,,,599,599,599,599,599,599,,,,599,599,,,,,,,599,,,599,599,599',
',,599,599,603,603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603',
'603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603',
'603,603,603,603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,',
',,603,,,603,,,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603',
'603,603,,,,603,603,,,,,,,603,,,603,603,603,,,603,603,231,231,231,,231',
',,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231,231,231',
'231,231,231,,,231,,,,,,,231,,,231,231,231,231,231,231,231,231,,231,231',
'231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231',
',,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231,,,,,,,231',
',,231,231,231,,,231,231,632,632,632,,632,,,,632,632,,,,632,,632,632',
'632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632',
',,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632,632,632',
',,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,632,,,,632,,,,,,,,632',
',,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632,,,632',
'632,633,633,633,,633,,,,633,633,,,,633,,633,633,633,633,633,633,633',
',,,,,633,633,633,633,633,633,633,,,633,,,,,,,633,,,633,633,633,633,633',
'633,633,633,,633,633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633',
',,633,,,633,633,,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,633,633',
',,,633,633,,,,,,,633,,,633,633,633,,,633,633,636,636,636,,636,,,,636',
'636,,,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636',
'636,,,636,,,,,,,636,,,636,636,636,636,636,636,636,636,636,636,636,636',
',636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,',
'636,,636,,636,,,,,,,,636,,,,,636,636,636,636,636,636,,,,636,636,,,,',
',,636,,636,636,636,636,,,636,636,637,637,637,,637,,,,637,637,,,,637',
',637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637',
',,,,,,637,,,637,637,637,637,637,637,637,637,637,637,637,637,,637,637',
',637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,637,,637',
',,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,637,637',
'637,637,,,637,637,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638',
'638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638',
'638,638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,',
',,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638',
'638,638,638,638,,,,638,638,,,,,,,638,,,638,638,638,,,638,638,639,639',
'639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639',
'639,639,639,639,639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639',
',639,639,639,,639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639',
'639,,,639,,,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639',
',,,,,,639,,,639,639,639,,,639,639,234,234,234,,234,,,,234,234,,,,234',
',234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234',
',,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234',
'234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,',
',234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234',
',,234,234,644,644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644',
'644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644',
'644,644,644,644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,',
',,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644',
'644,644,,,,644,644,,,,,,,644,,,644,644,644,,,644,644,645,645,645,,645',
',,,645,645,,,,645,,645,645,645,645,645,645,645,,,,,,645,645,645,645',
'645,645,645,,,645,,,,,,,645,,,645,645,645,645,645,645,645,645,,645,645',
'645,,645,645,,645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645',
',,,,,645,,,,,,,,645,,,,,645,645,645,645,645,645,,,,645,645,,,,,,,645',
',,645,645,645,,,645,645,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235',
'648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,',
',648,648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648',
'648,648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,',
'648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648',
',,,648,648,,,,,,,648,,,648,648,648,,,648,648,649,649,649,,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,',
',649,649,649,,,649,649,236,236,236,,236,,,,236,236,,,,236,,236,236,236',
'236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236',
'236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,',
',,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236',
'236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236,237',
'237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238,238,,',
',238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,',
',238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238',
',238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,',
',,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238',
'238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240,240,240',
',240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240',
'240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240',
'240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240',
',,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,',
',,,240,,,240,240,240,,,240,240,673,673,673,,673,,,,673,673,,,,673,,673',
'673,673,673,673,673,673,,,,,,673,673,673,673,673,673,673,,,673,,,,,',
',673,,,673,673,673,673,673,673,673,673,,673,673,673,,673,673,,673,673',
'673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,,673,,,,,,673,,,,,,,,673',
',,,,673,673,673,673,673,673,,,,673,673,,,,,,,673,,,673,673,673,,,673',
'673,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678',
',,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,,678,678,678,,678,678,,,,678,,,,,,,,,,,,,,,,,,,,678,,,678',
',,678,678,,,678,,,,,,,,,,,,,,,,,,,678,678,678,678,678,678,,,,678,678',
',,,,,,678,,,678,678,678,,,678,678,241,241,241,,241,,,,241,241,,,,241',
',241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241',
',,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241',
'241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,',
',241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241',
',,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242',
'242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242',
'242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,',
',,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242',
'242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243,,243',
',,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243',
'243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243',
'243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243',
',,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243',
',,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244,244',
'244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244',
',,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244,244',
',,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,',
',244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244,244',
'245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,',
',245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245',
'245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,',
'245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,689,689,689,,689,,,,689',
'689,,,,689,,689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689',
'689,,,689,,,,,,,689,,,689,689,689,689,689,689,689,689,,689,689,689,',
'689,689,,,,689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,,689,,,,,,,,',
',,,,,,,,,,689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,689,689',
',,689,689,246,246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246',
'246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246',
'246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,',
',,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246',
'246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247,247,247,,247',
',,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247',
'247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247',
'247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247',
',,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247',
',,247,247,247,,,247,247,694,694,694,,694,,,,694,694,,,,694,,694,694',
'694,694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694',
',,694,694,694,694,694,694,694,694,,694,694,694,,694,694,,694,694,694',
',,,,,,,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,694,,,,694,,,,,,,,694',
',,,,694,694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694,,,694',
'694,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,,,248,248,712,712,712,,712,,,,712',
'712,,,,712,,712,712,712,712,712,712,712,,,,,,712,712,712,712,712,712',
'712,,,712,,,,,,,712,,,712,712,712,712,712,712,712,712,,712,712,712,',
'712,712,,712,712,712,,,,,,,,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,',
',,,712,,,,,,,,712,,,,,712,712,712,712,712,712,,,,712,712,,,,,,,712,',
',712,712,712,,,712,712,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250',
'250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250',
'250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250',
'250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250',
',,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250',
'250,,,,,,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,',
',251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,',
',251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251',
',251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,',
',,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251',
'251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,',
',,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252',
'252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252,252,732,732,732',
',732,,,,732,732,,,,732,,732,732,732,732,732,732,732,,,,,,732,732,732',
'732,732,732,732,,,732,,,,,,,732,,,732,732,732,732,732,732,732,732,,732',
'732,732,,732,732,,732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732',
',,732,,732,,,,732,,,,,,,,732,,,,,732,732,732,732,732,732,,,,732,732',
',,,,,,732,,,732,732,732,,,732,732,253,253,253,,253,,,,253,253,,,,253',
',253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253',
',,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253',
'253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,',
',253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253',
'438,,253,253,,,,438,438,438,,,438,438,438,989,438,989,989,989,989,989',
',,,438,438,438,438,,,989,,,,,438,438,,438,438,438,438,438,,,,,,,,,,989',
',,,,,,,,989,989,989,989,,438,438,438,438,438,438,438,438,438,438,438',
'438,438,438,,,438,438,438,,,438,,,438,,,438,438,,438,989,438,,438,,438',
'438,438,438,438,438,438,,438,438,438,,,,,,,,,,,,,438,438,438,438,59',
'438,,438,,,,59,59,59,,,59,59,59,991,59,991,991,991,991,991,,,,,59,59',
'59,,,991,,,,,59,59,,59,59,59,59,59,,,,,,,,,,991,,,,,,,,,,,991,991,,59',
'59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59',
',59,991,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59,59',
'437,59,,59,,,,437,437,437,,,437,437,437,916,437,916,916,916,916,916',
',,,437,437,437,437,,,916,,,,,437,437,,437,437,437,437,437,,,,,,,,,,916',
',,,,,,,,,,916,916,,437,437,437,437,437,437,437,437,437,437,437,437,437',
'437,,,437,437,437,,,437,,,437,,,437,437,,437,916,437,,437,,437,437,437',
'437,437,437,437,,437,437,437,,,,,,,,,,,,,437,437,437,437,,437,,437,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
',,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74',
'74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,',
',,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,',
',,,,,,,,,,74,629,629,629,629,629,629,629,629,629,629,629,629,629,629',
'629,629,629,629,629,629,629,629,629,629,,,,629,629,629,629,629,629,629',
'629,629,629,,,,,,629,629,629,629,629,629,629,629,629,,,629,,,,,,,,,629',
'629,,629,629,629,629,629,629,629,,,629,629,,,,629,629,629,629,,,,,,',
',,,,,,,629,629,,629,629,629,629,629,629,629,629,629,629,629,,,629,629',
',,,,,,,,,629,,,,,,,,,629,754,754,754,754,754,754,754,754,754,754,754',
'754,754,754,754,754,754,754,754,754,754,754,754,754,,,,754,754,754,754',
'754,754,754,754,754,754,,,,,,754,754,754,754,754,754,754,754,754,,,754',
',,,,,,,,754,754,,754,754,754,754,754,754,754,,,754,754,,,,754,754,754',
'754,,,,,,,,,,,,,,754,754,,754,754,754,754,754,754,754,754,754,754,754',
',,754,,,,,,,,,,,,,,,,,,,,754,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,',
',,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
',,,407,407,407,407,407,407,407,407,407,407,,,,,,407,407,407,407,407',
'407,407,407,407,,,407,,,,,,,,,407,407,,407,407,407,407,407,407,407,',
',407,407,,,,407,407,407,407,,,,,,,,,,,,,,407,407,,407,407,407,407,407',
'407,407,407,407,407,407,,,407,407,,,,,,,,,,407,,,,,,,,,407,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11',
'11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,',
',,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,',
',,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,,11,,,,,,',
',,11,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91',
'91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91',
'91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,428,,91,',
',,,428,428,428,,,428,428,428,914,428,914,914,914,914,914,91,,,428,428',
'428,,,,914,,,,,428,428,,428,428,428,428,428,,,,,,,,,,914,,,,,,,,,,,914',
'914,,428,428,428,428,428,428,428,428,428,428,428,428,428,428,,,428,428',
'428,,,428,,428,428,,,428,428,,428,914,428,,428,,428,428,428,428,428',
'428,428,,428,428,428,,,,,,,,,,,,486,428,428,,428,,428,486,486,486,,',
'486,486,486,912,486,912,912,912,912,912,,,,486,486,,,,,912,,,,,486,486',
',486,486,486,486,486,,,710,,710,710,710,710,710,912,,,,,,,,,710,,912',
'912,,31,,,,,,,31,31,31,,486,31,31,31,,31,710,486,,,,,486,486,,31,31',
'710,710,,912,,,,,31,31,,31,31,31,31,31,,486,486,,,,,,,,,,,,,486,,,710',
',486,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31',
'31,,,31,31,,31,,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,30,31',
'31,,31,,31,30,30,30,,,30,30,30,601,30,601,601,601,601,601,,,,30,30,30',
',,,601,,,,,30,30,,30,30,30,30,30,,,,,,,,,,601,601,,,,,,,,601,601,601',
'601,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30',
',,30,30,,30,601,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,589,589',
',,589,,,30,30,,30,,30,589,589,,589,589,589,589,589,589,589,,,589,589',
',,,589,589,589,589,,,,,,589,,,,,,,,589,589,,589,589,589,589,589,589',
'589,589,589,589,589,,,589,,,,,262,262,,,262,,,,,,,,,262,262,589,262',
'262,262,262,262,262,262,,,262,262,,,,262,262,262,262,,,,,,,,,,,,,,262',
'262,,262,262,262,262,262,262,262,262,262,262,262,,,262,,,,,956,956,',
',956,,,,,,,,,956,956,262,956,956,956,956,956,956,956,,,956,956,,,,956',
'956,956,956,,,,,,956,,,,,,,,956,956,,956,956,956,956,956,956,956,956',
'956,956,956,,910,956,910,910,910,910,910,,,,,,,,,,910,,,,,956,,,,,,',
',,1039,,1039,1039,1039,1039,1039,,910,519,519,,,519,,,1039,910,910,910',
'910,,519,519,,519,519,519,519,519,519,519,,,519,519,,,1039,519,519,519',
'519,,,,,,519,1039,1039,,,910,,,519,519,,519,519,519,519,519,519,519',
'519,519,519,519,,,519,,,,,452,452,,,452,,1039,,,,,,,452,452,519,452',
'452,452,452,452,452,452,,,452,452,,,,452,452,452,452,,,,,,452,,,,,,',
',452,452,,452,452,452,452,452,452,452,452,452,452,452,,,452,,,,,453',
'453,,,453,,,,,,,,,453,453,452,453,453,453,453,453,453,453,,,453,453',
',,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453,453',
'453,453,453,453,453,,,453,,,,,1006,1006,,,1006,,,,,,,,,1006,1006,453',
'1006,1006,1006,1006,1006,1006,1006,,,1006,1006,,,,1006,1006,1006,1006',
',,,,,1006,,,,,,,,1006,1006,,1006,1006,1006,1006,1006,1006,1006,1006',
'1006,1006,1006,,660,1006,660,660,660,660,660,,,,,,,,,,660,,,,,1006,',
',,,,,,,1008,,1008,1008,1008,1008,1008,,660,214,214,,,214,,,1008,660',
'660,660,660,,214,214,,214,214,214,214,214,214,214,,,214,214,,,1008,214',
'214,214,214,,,660,,,214,1008,1008,,,660,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,546,214,546,546,546,546,546,,,,,,1008,,,,546',
',,,939,214,939,939,939,939,939,,,,,,,,,,939,,546,,,,,,,,,546,546,546',
'546,,,,,,,,939,939,213,213,,,213,,,939,939,939,939,,,213,213,,213,213',
'213,213,213,213,213,546,,213,213,,,,213,213,213,213,,,,,,213,,,,939',
',,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,708,213,708',
'708,708,708,708,,,,,,,,,,708,,,,,213,,,,,,,,,993,,993,993,993,993,993',
',708,742,742,,,742,,,993,708,708,708,708,,742,742,,742,742,742,742,742',
'742,742,,,742,742,,,993,742,742,742,742,,,,,,742,993,993,,,708,,,742',
'742,,742,742,742,742,742,742,742,742,742,742,742,,,742,,,,,743,743,',
',743,,993,,,,,,,743,743,742,743,743,743,743,743,743,743,,,743,743,,',
',743,743,743,743,,,,,,743,,,,,,,,743,743,,743,743,743,743,743,743,743',
'743,743,743,743,,,743,,,,,530,530,,,530,,,,,,,,,530,530,743,530,530',
'530,530,530,530,530,,,530,530,,,,530,530,530,530,,,,,,530,,,,,,,,530',
'530,,530,530,530,530,530,530,530,530,530,530,530,,,530,,,,,529,529,',
',529,,,,,,,,,529,529,530,529,529,529,529,529,529,529,,,529,529,,,,529',
'529,529,529,,,,,,529,,,,,,,,529,529,,529,529,529,529,529,529,529,529',
'529,529,529,,706,529,706,706,706,706,706,,,,,,,,,,706,,,,,529,,,,887',
',887,887,887,887,887,,,,,,,706,520,520,887,,520,,,,706,706,706,706,',
'520,520,,520,520,520,520,520,520,520,,887,520,520,,,,520,520,520,520',
',887,887,,,520,,,,,706,,,520,520,,520,520,520,520,520,520,520,520,520',
'520,520,,885,520,885,885,885,885,885,887,882,,882,882,882,882,882,,885',
',,,,520,,995,882,995,995,995,995,995,,,,,,,,,885,995,,,,,,,882,885,885',
'885,885,,,,,882,882,882,882,,,995,,,,,,,,,,,995,995,,,,,,,,,,885,,,',
',,,,882,,,588,588,,,588,,,,,,,,995,588,588,,588,588,588,588,588,588',
'588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,,,588,588,,588,588,588',
'588,588,588,588,588,588,588,588,,,588,,,,,1005,1005,,,1005,,,,,,,,,1005',
'1005,588,1005,1005,1005,1005,1005,1005,1005,,,1005,1005,,,,1005,1005',
'1005,1005,,,,,,1005,,,,,,,,1005,1005,,1005,1005,1005,1005,1005,1005',
'1005,1005,1005,1005,1005,,,1005,,,,,,,,,,,,,,,,,,,,1005' ]
        racc_action_check = arr = ::Array.new(26183, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1351,  1626,    33,   nil,   398,   nil,   nil, 12709,  1470,
   nil, 24124, 23858,   -64,   nil,   -80,     1,   965,   376,   -43,
   877,   nil,   -88, 15089,  1908,   157,   nil,   237,   nil,   135,
 24686, 24561,  7809,  7949,  8229,   nil,  3318,  8929,  9069,   nil,
    59,   224,   214,   168,   252, 10189, 10609, 10749,   111,  1134,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23197,
   nil, 11029, 11589, 11729,     2,   nil, 11869, 12289,   nil,   nil,
 12429, 12569,   166,   nil, 23459,   nil,   nil,   nil,   nil,   nil,
   -71,   nil,   nil,   nil,   nil,   nil,   nil,   133,   139,   156,
   162, 24257,   nil,   nil,   nil,   nil,   nil,   nil,   646,   nil,
   nil,   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 13549,   nil,   nil,   nil,   nil, 13689,
 13829, 13969, 14109, 14809,   190,   nil,   321,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   nil,  1908,
 15509, 16069, 16209, 25418, 25296, 16629, 16769, 16909, 17049,  5009,
 17329,   nil,   nil,   852,   124,   -81,   294,   204,   212,   314,
   nil, 17889,  3177,   322, 18869, 19289, 19709, 19849, 19989, 20129,
 20269, 20689, 20829, 20969, 21109, 21249, 21529, 21669, 21949, 22229,
 22369, 22509, 22649, 22929,  5429,  5849,  6689,  6829,  6969,  7109,
   nil,   nil, 24822,   nil,   nil,   317,  7249,   nil,   326,   nil,
   nil,   nil,  7389,   nil,   nil,  7669,   nil,  3036,   nil,   308,
   310,   nil,  8089,   355,  8369,   nil,  8509,  8649,   nil,   nil,
   446,   nil,  1344,  8789,   325,  3459,   346,   387,   353,  9349,
  2895,   586,   654,   693,   429,   924,   nil,   402,   377,   -14,
   nil,   nil,   nil,   428,   179,   404, 10329,   nil,   288,   482,
   993,   nil,   507,   nil, 10889,  4305,   559,   nil,   487,   nil,
   522,   509,   509,   493,   nil,   435,   522,   nil,   nil,   577,
   865,    18,   -11, 11309, 11449,   421,   598,   493,    78,    -5,
  1247,   571,    58,   613,   nil,   nil, 12009,   nil, 12149,   274,
   551,   -56,   386,   485,   488,   -19,   232,   342,   nil,   319,
   nil,   nil,   nil,   nil,   nil,   186,   nil,   437,   nil,   385,
   nil,   516,   414,   nil,   527,   167,   nil,   529,   -26,   nil,
   546,   -28,   nil,   313,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2190, 23991,   nil,   nil,
   nil,   nil,   568,   nil,   nil,   562, 12849,   566,   nil,   nil,
  1062,   572,   nil,   nil,   573,   576,   433,   388, 24369,   nil,
   nil,   nil,   257,     0,   619,   nil,   nil, 23327, 23067,   nil,
  2190,   nil,   569,   nil,   nil,   780,   nil,   nil,   nil,   nil,
    56,   nil, 25059, 25127, 12989,   131, 13129, 13269, 13409,  4587,
  5009,   689,   807,   660,   669,   671,   679,  5149,  5289,  4329,
  4869,  4728,  3177,  4446,  4305,  4164,  4023,  3882,  3741,  3600,
  3200,  3146,  3459,  3318,  1485,   -60, 24494,   nil,   nil,   nil,
   nil,   nil,   nil,   -49,   -63,   642,   644,   nil,   nil, 14249,
   nil,   nil, 14389,   nil, 14529,   nil,   nil,   nil,   nil, 14669,
  1329,   650,   651,   nil,   nil,   665, 14949,   678, 15229, 24991,
 25824,   522,   718,   nil, 15369,   690,   nil, 15649, 15789, 25723,
 25655,  1203, 15929,   819,   827,   714,   nil,   nil, 16349,   nil,
   nil, 16489,   nil,   nil,   nil,    37, 25358,   nil,   714,   729,
   nil,   733,   736,   738,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   732,   nil,   514,   nil,   nil, 17189,   nil,   nil,   nil,
   829,   nil,   nil,   nil,   843,   nil,   nil,   852,  1344,   896,
   nil,  3741,   149,    55,   902,   910,   nil, 17469, 25980, 24754,
   106,   nil,   165,   260,   -31,   nil,  1203,   nil,     9, 17609,
   nil, 24650,   nil, 17749,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,   157,   nil,
   nil,   nil,   798,   nil,   nil,   799,   nil,   820,   nil, 23592,
   nil,   805, 18029, 18169,   119,   840, 18309, 18449, 18589, 18729,
   848,   nil,   nil,   nil, 19009, 19149,   850,   nil, 19429, 19569,
   nil,   152,   102,   382,   125,   822,   921,   821,   nil,   nil,
 25257,   nil,   nil,   930,    71,   -58,   nil,   nil,   nil,   nil,
   829,   nil,   872, 20409,   nil,   nil,  1485,  -108, 20549,   832,
   nil,   836,    30,    28,   873,   321,   571,   877,   848, 21389,
  2331,   914,    20,   970, 21809,   nil,   nil,   -65,   nil,   780,
  2049,   877,   205,   nil,   nil,   770, 25785,   nil, 25480,   nil,
 24489,   nil, 22089,   nil,   707,   nil,   879,   387,   886,   nil,
   nil,   nil,   nil,   793,   nil,  1002,   nil,   nil,   nil,   nil,
  1012,   nil, 22789,   907,    62,   -19,   131,   154,  5149,   nil,
   783,   nil, 25519, 25587,  5289,   nil,   nil,   nil,    54,   856,
  4023,  4164,   445,   537, 23725,    53,   763,  4587,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   905,  5569,  1344,  5709,   nil,
   915,   nil,  1626,   nil,  2613,   nil,   nil,  2895,   nil,  1767,
   nil,  2049,  5989,  6129,  6269,  6409,   234,  6549,   918,   920,
   nil,   923,   925,   926,   nil,   951,   943,   939,   931,  7529,
   nil,   nil,   921,   nil,   nil,   nil,  1062,  1203,   nil,   nil,
   946,   293,   nil,   nil,  1068,   nil,  1767,   957,  1000,   nil,
   nil,   nil,   976,  1081,   972,   970,   nil,   nil,   nil,   972,
   973,   nil,   974,   975,   nil,   979,   nil,   nil,   992,   646,
   993,  3202,   nil,  1116,   nil,  9209,  1135,  3882,  3600,   nil,
    19,    -1,   150,   291,   921,   nil,  1023,  3036,  9489,   nil,
   449,  1143,  1144,  1031,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1049,  1045,   nil,  2472,  9629,  9769,  2754,   346,
   nil,   nil, 25894,   nil,   nil, 25886,   nil, 25810,   nil,   nil,
  1066,   712,  9909,   957,  1130,  1179,  1485,  1077,  1184,   nil,
  4728,   nil,   nil,    32, 10049,   nil,   nil,   nil,   nil,   nil,
 24952,   nil, 24458,   nil, 24333,   nil, 23291,   nil,   nil,   nil,
   nil,   375,  3304,  1066,   nil,    43,   nil,  1187,  1192, 10469,
  4446,   nil,   nil,  1201,   553,   nil,   nil,   nil,   nil, 25378,
   nil,  1082,   nil,   nil,  1086,  1087,  1088,  1098,   nil,  1100,
   nil,   -79,   nil,   nil,   nil,  1062, 24890,   nil,   nil,  1117,
   nil,   nil,   nil,  4869,  1065,  1098,  1106,  1176,   454,   nil,
  1110,  1116,  1120,  1130,  1134,  3394,  1137,   653,  2754,   nil,
   nil,   nil,   268,  2613,   nil,   nil,  2472,  2331,   nil, 23031,
   nil, 23161,   nil, 25510,   nil, 25909,   nil,   nil,   nil,  1189,
  1195,  1200,   nil,  1286, 11169, 26048, 25195,  1206, 25287,   nil,
   nil,   nil,   nil,   639,  1165,   201,   nil,   nil,   nil,  1289,
  1294,  1306,  1187,  1197,  1202,  1205,   nil,   nil,  1210,    -9,
    -8,    46,  1239,  1208,  1213,   nil,   nil,   nil,   nil, 24982,
   nil,   nil,   nil,   nil,    16,   nil,  -111,   nil ]

racc_action_default = [
    -1,  -624,  -623,  -624,    -2,  -610,    -4,    -5,  -624,    -8,
    -9,  -624,  -624,  -624,   -29,  -624,  -624,  -624,  -280,  -624,
   -40,   -43,  -612,  -624,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -623,   -73,   -81,   -83,
  -624,  -514,  -515,  -624,  -624,  -624,  -624,  -624,  -612,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -600,
  -282,  -612,  -623,  -623,  -300,  -403,  -624,  -624,  -305,  -308,
  -610,  -624,  -316,  -323,  -624,  -333,  -334,  -445,  -446,  -447,
  -448,  -449,  -450,  -623,  -453,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -490,  -496,  -498,  -499,  -500,  -501,  -598,  -503,
  -504,  -599,  -506,  -507,  -508,  -509,  -510,  -511,  -512,  -513,
  -518,  -519,  1048,    -3,  -611,  -619,  -620,  -621,    -7,  -624,
  -624,  -624,  -624,  -624,  -624,   -17,  -624,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -623,
  -624,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -612,  -613,   -47,  -624,  -514,  -515,  -624,  -280,  -624,  -624,
  -230,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -409,  -412,  -624,  -608,  -609,   -58,  -624,  -299,  -624,  -426,
  -429,   -64,  -623,  -423,   -65,  -612,   -66,  -239,  -252,  -623,
  -623,  -256,  -624,  -262,  -624,  -593,  -624,  -624,   -67,   -68,
  -610,   -13,   -14,  -624,   -71,  -623,  -612,  -624,   -74,   -77,
  -623,   -89,   -90,  -624,  -624,   -97,  -292,  -295,  -612,  -416,
  -331,  -332,  -335,  -424,  -624,   -79,  -624,   -85,  -289,  -497,
  -624,  -215,  -216,  -231,  -624,  -623,  -285,  -284,  -624,  -240,
  -616,  -616,  -624,  -624,  -591,  -616,  -624,  -301,  -302,  -546,
   -49,  -624,  -624,  -624,  -624,  -610,  -624,  -611,  -514,  -515,
  -624,  -624,  -280,  -624,  -356,  -357,  -624,  -319,  -624,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -326,  -624,
  -514,  -515,  -588,  -589,  -451,  -624,  -474,  -624,  -476,  -624,
  -478,  -624,  -624,  -458,  -624,  -624,  -464,  -624,  -624,  -470,
  -624,  -624,  -472,  -624,  -489,  -491,  -492,  -493,  -494,    -6,
  -622,   -23,   -24,   -25,   -26,   -27,  -623,  -624,   -19,   -20,
   -21,  -122,  -624,   -30,   -39,  -267,  -624,  -624,  -266,   -31,
  -197,  -612,  -247,  -248,  -623,  -623,  -601,  -602,  -257,  -421,
  -603,  -604,  -602,  -601,  -257,  -420,  -422,  -603,  -604,   -37,
  -205,   -38,  -624,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -612,  -298,  -624,  -624,  -623,  -289,  -624,  -624,  -624,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -612,  -623,  -257,  -601,  -602,   -54,
   -59,  -258,  -417,  -623,  -623,  -612,  -612,  -294,  -253,  -624,
  -261,  -254,  -624,  -259,  -624,  -263,  -596,  -597,   -12,  -611,
   -16,  -612,   -70,  -287,   -86,   -75,  -624,  -612,  -623,  -624,
  -624,   -96,  -624,  -497,  -624,   -82,   -87,  -624,  -624,  -624,
  -624,  -236,  -624,  -437,  -624,  -612,  -614,  -241,  -618,  -617,
  -243,  -618,  -290,  -291,  -592,  -624,  -546,  -406,  -587,  -587,
  -529,  -531,  -531,  -531,  -545,  -547,  -548,  -549,  -550,  -551,
  -552,  -553,  -554,  -624,  -558,  -560,  -562,  -567,  -569,  -570,
  -572,  -577,  -579,  -580,  -582,  -583,  -584,  -624,  -623,  -347,
  -348,  -623,  -624,  -624,  -624,  -624,  -432,  -623,  -624,  -624,
  -289,  -313,  -107,  -108,  -624,  -110,  -624,  -280,  -624,  -624,
  -324,  -546,  -328,  -624,  -452,  -475,  -480,  -481,  -483,  -454,
  -477,  -455,  -479,  -456,  -457,  -624,  -460,  -462,  -624,  -463,
  -466,  -467,  -624,  -468,  -469,  -624,  -495,  -624,   -18,  -624,
   -28,  -270,  -624,  -624,  -425,  -624,  -249,  -251,  -624,  -624,
   -60,  -245,  -246,  -418,  -624,  -624,   -62,  -419,  -624,  -624,
  -297,  -601,  -602,  -601,  -602,  -612,  -195,  -624,  -392,  -393,
  -612,  -395,  -410,   -53,  -413,  -623,  -427,  -430,  -244,  -293,
  -623,  -260,  -264,  -624,  -594,  -595,   -15,   -72,  -624,   -78,
   -84,  -612,  -601,  -602,  -623,   -93,   -95,  -624,   -80,  -624,
  -204,  -214,  -612,  -623,  -623,  -283,  -286,  -616,  -404,  -623,
  -623,  -612,  -624,  -527,  -528,  -624,  -624,  -538,  -624,  -541,
  -624,  -543,  -624,  -358,  -624,  -360,  -362,  -369,  -612,  -561,
  -571,  -581,  -585,  -623,  -349,  -623,  -306,  -350,  -351,  -309,
  -624,  -312,  -624,  -612,  -601,  -602,  -605,  -288,  -624,  -107,
  -108,  -109,  -624,  -624,  -623,  -317,  -520,  -521,  -624,  -320,
  -623,  -623,  -546,  -624,  -624,  -612,  -624,  -623,  -459,  -461,
  -465,  -471,  -473,   -10,  -123,  -268,  -624,  -198,  -624,  -615,
  -623,   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,
   -63,  -196,  -624,  -624,  -624,  -624,  -425,  -624,  -587,  -587,
  -374,  -623,  -623,  -623,  -391,  -624,  -612,  -397,  -553,  -564,
  -565,  -575,  -623,  -415,  -414,   -55,  -623,  -623,  -255,  -265,
   -76,   -91,   -88,  -296,  -623,  -354,  -623,  -438,  -623,  -439,
  -440,  -242,  -624,  -624,  -612,  -587,  -568,  -586,  -530,  -531,
  -531,  -559,  -531,  -531,  -578,  -531,  -553,  -573,  -612,  -624,
  -367,  -624,  -555,  -624,  -352,  -624,  -624,  -623,  -623,  -311,
  -624,  -425,  -624,  -107,  -108,  -111,  -612,  -623,  -624,  -523,
  -624,  -624,  -624,  -612,  -525,  -329,  -590,  -482,  -485,  -486,
  -487,  -488,  -624,  -269,   -32,  -199,  -250,  -624,  -237,  -624,
  -372,  -373,  -382,  -376,  -384,  -624,  -387,  -624,  -389,  -394,
  -624,  -624,  -624,  -563,  -624,  -624,  -623,  -624,  -624,   -11,
  -623,  -444,  -355,  -624,  -624,  -442,  -407,  -408,  -405,  -526,
  -624,  -534,  -624,  -536,  -624,  -539,  -624,  -542,  -544,  -359,
  -361,  -365,  -624,  -370,  -303,  -624,  -304,  -624,  -624,  -624,
  -623,  -314,  -425,  -624,  -624,  -321,  -325,  -327,  -524,  -546,
  -484,  -587,  -566,  -375,  -623,  -623,  -623,  -623,  -576,  -623,
  -396,  -612,  -399,  -401,  -402,  -574,  -624,  -289,  -411,  -624,
  -428,  -431,  -443,  -623,   -98,   -99,  -624,  -624,  -106,  -441,
  -531,  -531,  -531,  -531,  -363,  -624,  -368,  -624,  -623,  -307,
  -310,  -264,  -623,  -623,  -318,  -522,  -623,  -623,  -371,  -624,
  -379,  -624,  -381,  -624,  -385,  -624,  -388,  -390,  -398,  -624,
  -288,  -605,   -56,  -437,  -623,  -624,  -624,  -105,  -624,  -532,
  -535,  -537,  -540,  -624,  -366,  -623,  -433,  -434,  -435,  -624,
  -624,  -624,  -623,  -623,  -623,  -623,  -400,  -436,  -612,  -601,
  -602,  -605,  -104,  -531,  -364,  -353,  -315,  -322,  -330,  -624,
  -377,  -380,  -383,  -386,  -425,  -533,  -623,  -378 ]

clist = [
'6,219,278,278,278,117,261,428,434,368,17,490,273,337,585,418,17,133',
'133,130,130,441,534,312,312,693,395,324,444,501,336,223,554,135,135',
'4,298,421,537,540,223,223,223,544,17,303,303,262,341,342,751,674,345',
'125,208,843,486,312,578,581,329,334,327,671,726,729,671,792,113,223',
'117,315,831,814,223,223,319,547,223,350,114,376,130,378,380,383,386',
'389,392,378,674,834,525,718,280,280,280,495,952,130,923,401,402,403',
'404,846,954,741,265,271,274,662,294,793,296,634,860,377,920,666,667',
'986,17,393,331,335,118,223,223,223,223,17,358,346,279,279,279,948,615',
'795,598,618,600,750,601,754,939,276,288,289,124,794,9,796,896,703,704',
'665,9,830,951,832,545,605,330,698,339,612,899,485,616,802,493,616,501',
'806,494,415,807,1016,824,976,278,446,732,818,674,903,374,375,379,382',
'385,388,391,429,707,709,711,326,671,671,867,756,340,340,1026,757,340',
'394,422,858,207,407,954,829,414,17,223,223,223,451,438,223,223,223,223',
'223,223,16,355,799,399,826,1014,16,278,942,603,554,17,948,278,664,838',
'278,428,434,831,503,492,505,730,506,507,855,920,340,340,340,340,1,372',
'16,9,333,2,338,332,629,422,353,1034,405,223,890,497,500,500,655,223',
'745,831,223,701,312,369,522,325,944,117,805,679,834,554,273,535,512',
'343,847,688,17,312,17,344,848,738,303,17,983,356,857,417,684,599,526',
',,417,,,,,684,303,582,583,,280,,,,515,17,931,945,,280,946,,,16,312,681',
'312,117,523,1035,,786,16,223,223,508,222,447,448,449,450,,,831,1017',
'970,596,509,596,,279,,,294,297,511,,811,294,279,517,,,491,684,631,,',
'775,,987,602,496,,780,,,880,881,,,,635,,,759,6,821,759,,584,,642,,733',
'133,17,130,647,,,808,,,500,500,278,674,641,851,,135,,,909,,429,,16,',
',627,671,,1022,510,,554,,861,862,628,799,650,422,799,810,,799,,799,16',
'444,438,223,657,,,672,,642,336,,675,,,911,913,,915,917,,918,340,340',
'658,641,,,,278,,863,658,658,,,1027,668,669,,819,,429,312,,,672,,640',
'336,,312,429,677,646,,526,422,17,680,808,16,,16,526,303,,223,16,438',
',,,303,719,,,696,684,438,,223,413,419,,,412,439,443,988,,932,,16,,933',
',9,278,,,799,670,799,,799,663,799,930,297,856,429,,,,,,,,,,,,727,727',
',422,17,,19,17,,,,,19,223,,438,746,765,697,,,672,336,,,223,,,799,223',
',804,,1009,1010,1011,1012,,963,,19,,,,,,,,,297,554,16,635,133,297,130',
',797,809,,978,,803,,223,223,,,1018,135,223,223,,,223,354,,676,635,817',
',658,312,,642,,500,647,692,764,,,,312,,526,1045,837,797,,641,1020,1021',
',303,,812,865,,815,820,813,,,,303,770,446,19,,,,,,,17,17,19,,,635,,278',
',,,,842,852,815,1044,815,,429,,,,,,,,873,,,16,749,,,,755,422,,,,223',
',859,,438,,223,864,,,866,,17,17,,,130,,,17,,,500,,,,,,,797,223,,,,,789',
',,,312,,,,883,883,883,,,,19,417,,,684,,,442,,,16,,893,16,,17,,901,,17',
'17,905,,19,,,,,825,17,908,,925,,1028,,,,,850,635,,791,29,919,934,,,336',
'29,,,,,,,,727,223,,17,17,,,29,935,,,,938,17,223,,29,29,29,,29,,,,340',
',312,19,,19,,,,833,19,835,,,312,,,,,,981,29,,,955,,29,29,17,,29,,17',
',,19,966,,723,,,725,,,,,,,,561,16,16,,,998,,,,985,,,,17,,,,883,883,883',
'883,,883,,,29,,,,,29,29,29,29,29,,,,,438,,,,,771,773,17,,790,278,776',
'778,16,16,443,815,,,340,16,,17,429,,,,17,19,,17,17,340,,,,941,,422,789',
',,789,635,789,,,,223,815,438,827,,,827,,883,883,883,883,,,,,,16,,,,16',
'16,822,823,,,,,,,16,883,29,29,29,29,,,29,29,29,29,29,29,,,,,,947,,949',
',,,29,,,,,,16,16,,,,,,,,,16,,,971,,972,,973,,872,,19,,,,874,,,29,,,',
',,29,,789,29,789,,789,,789,884,886,888,,,,16,,,,16,,29,,29,561,,,,29',
',895,42,,,897,898,,42,,,,713,,,902,,,,,16,,,789,29,,,19,,1023,19,1024',
',1025,,,42,302,302,,,,29,29,,,927,928,1033,,561,,,16,,827,,,790,,,790',
',790,,,,,16,,,349,,16,371,,16,16,,1046,,,,,,,,,,,,,,,,959,,442,,962',
',,,,,29,,,,798,,,,,42,,,,,,,,,42,,,,,,982,,,,990,992,994,996,,997,,',
',,,,,,,19,19,,,,29,41,561,,561,,,41,,1003,713,,790,840,790,,790,,790',
',,,,,1015,,,,,1019,,,,,,41,301,301,,,,,,,,,19,19,561,,,,,19,,29,42,',
'1040,1041,1042,1043,790,,29,,,,,,348,,,370,,,,,29,42,,,1047,,,,,,,,',
',,,,,,,19,,,,19,19,,,,,,,,,19,41,,,,,,,,,41,,29,,,29,,,,,,29,,713,,713',
',,42,,42,19,19,29,302,42,,29,,,,19,,,,,,,,,,302,,,,,,,,,42,,,,,,798',
',,798,,,29,29,,,,,29,29,19,,29,,19,,,,969,,,371,,371,561,,41,,,,,,,',
',974,713,,,,,,,,19,,,,,41,,,,561,,,,,,,,,,29,29,,,,,,,42,,,,,,19,,,',
',,,,,,,,713,,713,19,,,,,19,,,19,19,29,798,,,,,29,,41,,41,,29,29,301',
'41,,,,29,,,,,,713,,,,,29,301,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,29,,',
',29,29,,370,42,370,,,,,29,302,,,,,,,,302,,,,,,,18,,,,,,18,,,,,,,29,',
'29,29,,,,,,,,,29,29,41,,,,,,,18,305,305,,,,,,,,,,,42,,,42,,,,,,,,,,',
',,,29,,,,29,352,,,,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,,,,,,,,,,,18,,,,,',
',,,18,,,,,,,,,41,29,,,,,,301,,,,,,,,301,29,302,,,,29,,,29,29,,,302,',
',,,,,,,,42,42,,,29,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,41,,,,,18,,,,,,,,',
',,,42,42,,,,,,42,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,371,,,42',
',,,42,42,,,,,,,,,42,,,,,,18,,18,,,,305,18,301,,,,,,,,,,,301,,,,305,',
'42,42,,,41,41,,18,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,597,,597,,,,,371,',
',,42,,,,42,,41,41,965,,,,,41,,,,,,,,,,,,,,,,,,,,,42,,,230,,18,,,,,,',
'277,277,277,,,,,,,370,,,41,321,322,323,41,41,,,,42,,,,,41,,,,277,277',
',,,,42,,,,,42,,,42,42,,,,,,,,,,,,41,41,,,,,,,,,41,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,18,,,,,,370,305,,,41,,,,41,305,,,964,,,,,,,,,,,,,,,,,,,,,',
',,,,41,,,,,,,,,,,,,,,,,,,,,,,,,18,,,18,,,,,41,,,,,277,420,277,,,440',
'445,,,,41,,,,,41,,,41,41,,230,,,459,460,461,462,463,464,465,466,467',
'468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484',
',,,,,,277,,,,,,277,,,277,,,,,,,277,,277,,277,277,,,,,,,,,,305,,,,,,',
',,,,305,,,,,,,,,,18,18,,,,,531,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,18,18,,,,,871,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,',
'597,,,18,,,,18,18,,,,,,,,,18,,,,,,,,,,,,,,,,,,,277,,440,656,420,,,,',
',,,18,18,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,277,,,277,,277,,,,,,,597,',
',,18,,,277,18,,,,968,,,,690,691,,,,,,,,,,277,,,277,,,,,,,,18,,,,,,,',
',,,,,,,,,277,,,,,,,,,,,,,,,,18,,,,,277,,,,,,,,,,18,,,,,18,,,18,18,,',
',,,,,,,,,,,,,,,,,,,,,,,277,767,,,277,277,772,774,,,,,777,779,,,656,781',
',,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,',
'277,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,277,,,,,,,,,,,,,,,,,,,,,,277,',
'875,,,,,,,,,,,,,,772,774,779,777,,878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,875,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277' ]
        racc_goto_table = arr = ::Array.new(3052, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,35,35,35,97,152,39,39,59,24,41,73,88,94,29,24,63,63,60,60,29,10',
'67,67,13,59,33,20,75,68,24,182,64,64,2,52,25,71,71,24,24,24,71,24,24',
'24,38,19,19,98,197,19,17,17,92,39,67,91,91,6,6,50,76,93,93,76,141,5',
'24,97,53,187,14,24,24,66,151,24,24,8,6,60,6,6,6,6,6,6,6,197,192,54,131',
'72,72,72,25,146,60,132,19,19,19,19,14,147,57,40,40,40,42,48,142,49,26',
'111,169,129,42,42,112,24,169,72,72,7,24,24,24,24,24,113,5,70,70,70,193',
'172,144,58,172,58,114,115,116,117,47,47,47,11,133,9,139,45,136,136,44',
'9,142,145,142,148,173,70,149,150,173,15,153,173,154,157,173,75,158,159',
'68,160,161,144,132,35,68,162,163,197,164,167,168,170,171,174,175,176',
'73,184,184,184,31,76,76,177,178,31,31,146,179,31,180,6,181,18,32,147',
'185,30,24,24,24,24,50,60,24,24,24,24,24,24,23,21,188,7,189,132,23,35',
'190,196,182,24,193,35,74,131,35,39,39,187,68,73,68,94,68,68,57,129,31',
'31,31,31,1,86,23,9,87,3,90,69,65,6,95,132,9,24,144,50,6,6,25,24,96,187',
'24,151,67,99,33,100,141,97,42,54,192,182,73,101,50,102,103,54,24,67',
'24,104,105,106,24,24,107,108,109,70,39,110,52,,,70,,,,,39,24,19,19,',
'72,,,,53,24,93,142,,72,142,,,23,67,25,67,97,66,92,,26,23,24,24,5,22',
'31,31,31,31,,,187,14,142,24,8,24,,70,,,48,12,49,,26,48,70,49,,,47,39',
'68,,,41,,98,38,47,,41,,,136,136,,,,33,,,173,6,71,173,,5,,73,,25,63,24',
'60,73,,,75,,,6,6,35,197,6,26,,64,,,136,,73,,23,,,2,76,,142,9,,182,,10',
'10,17,188,50,6,188,54,,188,,188,23,20,60,24,33,,,68,,73,68,,68,,,184',
'184,,184,184,,184,31,31,6,6,,,,35,,151,6,6,,,13,50,50,,29,,73,67,,,68',
',40,68,,67,73,50,40,,52,6,24,50,75,23,,23,52,24,,24,23,60,,,,24,68,',
',50,39,60,,24,22,22,,,12,22,22,136,,26,,23,,10,,9,35,,,188,72,188,,188',
'40,188,91,12,25,73,,,,,,,,,,,,97,97,,6,24,,28,24,,,,,28,24,,60,97,68',
'72,,,68,68,,,24,,,188,24,,88,,184,184,184,184,,91,,28,,,,,,,,,12,182',
'23,33,63,12,60,,33,68,,91,,152,,24,24,,,94,64,24,24,,,24,28,,9,33,68',
',6,67,,73,,6,73,31,17,,,,67,,52,184,68,33,,6,10,10,,24,,52,59,,6,6,50',
',,,24,72,68,28,,,,,,,24,24,28,,,33,,35,,,,,50,19,6,26,6,,73,,,,,,,,68',
',,23,31,,,,31,6,,,,24,,97,,60,,24,97,,,50,,24,24,,,60,,,24,,,6,,,,,',
',33,24,,,,,135,,,,67,,,,6,6,6,,,,28,70,,,39,,,28,,,23,,24,23,,24,,6',
',24,24,6,,28,,,,,135,24,50,,19,,25,,,,,70,33,,140,43,50,19,,,68,43,',
',,,,,,97,24,,24,24,,,43,97,,,,50,24,24,,43,43,43,,43,,,,31,,67,28,,28',
',,,140,28,140,,,67,,,,,,68,43,,,24,,43,43,24,,43,,24,,,28,24,,12,,,12',
',,,,,,,130,23,23,,,33,,,,97,,,,24,,,,6,6,6,6,,6,,,43,,,,,43,43,43,43',
'43,,,,,60,,,,,22,22,24,,137,35,22,22,23,23,22,6,,,31,23,,24,73,,,,24',
'28,,24,24,31,,,,135,,6,135,,,135,33,135,,,,24,6,60,137,,,137,,6,6,6',
'6,,,,,,23,,,,23,23,12,12,,,,,,,23,6,43,43,43,43,,,43,43,43,43,43,43',
',,,,,140,,140,,,,43,,,,,,23,23,,,,,,,,,23,,,140,,140,,140,,12,,28,,',
',22,,,43,,,,,,43,,135,43,135,,135,,135,138,138,138,,,,23,,,,23,,43,',
'43,130,,,,43,,12,56,,,12,12,,56,,,,130,,,12,,,,,23,,,135,43,,,28,,140',
'28,140,,140,,,56,56,56,,,,43,43,,,12,12,140,,130,,,23,,137,,,137,,,137',
',137,,,,,23,,,56,,23,56,,23,23,,140,,,,,,,,,,,,,,,,12,,28,,12,,,,,,43',
',,,130,,,,,56,,,,,,,,,56,,,,,,12,,,,138,138,138,138,,138,,,,,,,,,,28',
'28,,,,43,55,130,,130,,,55,,12,130,,137,130,137,,137,,137,,,,,,12,,,',
',12,,,,,,55,55,55,,,,,,,,,28,28,130,,,,,28,,43,56,,138,138,138,138,137',
',43,,,,,,55,,,55,,,,,43,56,,,138,,,,,,,,,,,,,,,,28,,,,28,28,,,,,,,,',
'28,55,,,,,,,,,55,,43,,,43,,,,,,43,,130,,130,,,56,,56,28,28,43,56,56',
',43,,,,28,,,,,,,,,,56,,,,,,,,,56,,,,,,130,,,130,,,43,43,,,,,43,43,28',
',43,,28,,,,28,,,56,,56,130,,55,,,,,,,,,130,130,,,,,,,,28,,,,,55,,,,130',
',,,,,,,,,43,43,,,,,,,56,,,,,,28,,,,,,,,,,,,130,,130,28,,,,,28,,,28,28',
'43,130,,,,,43,,55,,55,,43,43,55,55,,,,43,,,,,,130,,,,,43,55,,,,,,,,',
'55,,,,,,,,,,,,,,,,,,,,,,,,43,,,,43,43,,55,56,55,,,,,43,56,,,,,,,,56',
',,,,,,27,,,,,,27,,,,,,,43,,43,43,,,,,,,,,43,43,55,,,,,,,27,27,27,,,',
',,,,,,,56,,,56,,,,,,,,,,,,,,43,,,,43,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'43,,,,,,,,,,,,,,27,,,,,,,,,27,,,,,,,,,55,43,,,,,,55,,,,,,,,55,43,56',
',,,43,,,43,43,,,56,,,,,,,,,,56,56,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,55',
',,55,,,,,27,,,,,,,,,,,,56,56,,,,,,56,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,,,56,,,,,,27,,27,,,,27,27,55,,,,',
',,,,,,55,,,,27,,56,56,,,55,55,,27,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,27',
',27,,,,,56,,,,56,,,,56,,55,55,56,,,,,55,,,,,,,,,,,,,,,,,,,,,56,,,34',
',27,,,,,,,34,34,34,,,,,,,55,,,55,34,34,34,55,55,,,,56,,,,,55,,,,34,34',
',,,,56,,,,,56,,,56,56,,,,,,,,,,,,55,55,,,,,,,,,55,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,27,,,,,,55,27,,,55,,,,55,27,,,55,,,,,,,,,,,,,,,,,,,,,,,,,',
'55,,,,,,,,,,,,,,,,,,,,,,,,,27,,,27,,,,,55,,,,,34,34,34,,,34,34,,,,55',
',,,,55,,,55,55,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,,,,,,,34,,,,,,34,,,34,,,,,,,34,,34,,34',
'34,,,,,,,,,,27,,,,,,,,,,,27,,,,,,,,,,27,27,,,,,34,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,,,27,27,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,34,,27,,,27,,,,27,27,,,,,,,,,27,,,,,,,,,,,,,,,,,,,34,,34',
'34,34,,,,,,,,27,27,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,',
',,27,,,,27,,,34,27,,,,27,,,,34,34,,,,,,,,,,34,,,34,,,,,,,,27,,,,,,,',
',,,,,,,,,34,,,,,,,,,,,,,,,,27,,,,,34,,,,,,,,,,27,,,,,27,,,27,27,,,,',
',,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34,,,,,,,,,',
',,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,,',
',,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,',
',34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3052, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   261,    33,   266,   nil,    63,    -2,   118,    75,   150,
  -303,   140,   336,  -508,  -620,  -646,   nil,    42,   200,   -18,
  -188,   159,   331,   227,     8,  -175,  -306,  1666,   586,  -195,
     6,   138,    88,   -21,  2047,   -30,   nil,   nil,    20,  -206,
    79,  -254,  -374,   836,  -332,  -651,   nil,   115,    76,    78,
     1,   nil,    -1,    33,  -224,  1289,  1137,  -487,  -216,   -65,
     8,   nil,   nil,     6,    22,  -142,    32,   -14,   -33,   206,
   102,  -292,    62,   -18,  -243,  -251,  -436,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   188,   202,   -51,   nil,
   202,  -283,  -668,  -518,  -332,   200,  -317,     0,  -551,   212,
   228,   -30,   230,  -427,   235,  -424,  -285,  -622,   238,  -434,
   -43,  -633,  -814,    59,  -457,  -224,  -457,  -719,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -721,
   586,  -470,  -741,  -509,   nil,   121,  -393,   313,   326,  -507,
   177,  -593,  -547,   nil,  -521,  -731,  -793,  -785,  -177,  -380,
   101,  -262,   -19,   -91,  -491,   nil,   nil,   -97,  -491,   -94,
  -489,  -803,  -402,  -509,  -631,   nil,   nil,   108,   106,    32,
   104,   104,  -244,  -212,   104,   104,   104,  -554,  -404,  -401,
   118,  -536,  -307,   nil,  -355,  -491,   nil,  -634,  -429,  -469,
  -642,   nil,  -617,  -748,   nil,   nil,  -135,  -451 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   291,     7,   347,   292,
   nil,   nil,   533,   nil,   844,   nil,   290,   nil,   nil,   nil,
    14,    15,    21,   229,   320,   nil,   nil,   227,   228,   nil,
   nil,    20,   nil,   328,    24,    25,    26,    27,   nil,   687,
   nil,   nil,   nil,   309,   nil,   nil,    28,   423,    35,   nil,
   nil,    37,    40,    39,   nil,   224,   225,   595,   nil,   132,
   431,   131,   134,    78,    79,   nil,    93,    49,   283,   nil,
   424,   nil,   425,   436,   643,   498,   281,   266,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   267,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   579,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,
   836,   nil,   716,   943,   788,   549,   nil,   550,   nil,   nil,
   551,   nil,   553,   659,   nil,   nil,   nil,   559,   nil,   nil,
   nil,   753,   nil,   nil,   nil,   435,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   610,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   828,   548,   nil,   552,   562,   564,   566,   567,
   800,   570,   571,   801,   574,   577,   nil,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 177, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 210, :_reduce_122,
  4, 163, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  4, 212, :_reduce_286,
  3, 212, :_reduce_287,
  3, 212, :_reduce_288,
  2, 212, :_reduce_289,
  3, 212, :_reduce_290,
  3, 212, :_reduce_291,
  1, 212, :_reduce_292,
  4, 212, :_reduce_293,
  3, 212, :_reduce_294,
  1, 212, :_reduce_295,
  5, 212, :_reduce_296,
  4, 212, :_reduce_297,
  3, 212, :_reduce_298,
  2, 212, :_reduce_299,
  1, 212, :_reduce_none,
  2, 212, :_reduce_301,
  2, 212, :_reduce_302,
  6, 212, :_reduce_303,
  6, 212, :_reduce_304,
  0, 247, :_reduce_305,
  0, 248, :_reduce_306,
  7, 212, :_reduce_307,
  0, 249, :_reduce_308,
  0, 250, :_reduce_309,
  7, 212, :_reduce_310,
  5, 212, :_reduce_311,
  4, 212, :_reduce_312,
  0, 251, :_reduce_313,
  0, 252, :_reduce_314,
  9, 212, :_reduce_315,
  0, 253, :_reduce_316,
  0, 254, :_reduce_317,
  7, 212, :_reduce_318,
  0, 255, :_reduce_319,
  0, 256, :_reduce_320,
  0, 257, :_reduce_321,
  9, 212, :_reduce_322,
  0, 258, :_reduce_323,
  0, 259, :_reduce_324,
  6, 212, :_reduce_325,
  0, 260, :_reduce_326,
  6, 212, :_reduce_327,
  0, 261, :_reduce_328,
  0, 262, :_reduce_329,
  9, 212, :_reduce_330,
  1, 212, :_reduce_331,
  1, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 169, :_reduce_335,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_353,
  1, 159, :_reduce_none,
  2, 159, :_reduce_355,
  1, 240, :_reduce_none,
  1, 240, :_reduce_357,
  1, 274, :_reduce_none,
  3, 274, :_reduce_359,
  1, 277, :_reduce_360,
  3, 277, :_reduce_361,
  1, 276, :_reduce_362,
  4, 276, :_reduce_363,
  6, 276, :_reduce_364,
  3, 276, :_reduce_365,
  5, 276, :_reduce_366,
  2, 276, :_reduce_367,
  4, 276, :_reduce_368,
  1, 276, :_reduce_369,
  3, 276, :_reduce_370,
  4, 278, :_reduce_371,
  2, 278, :_reduce_372,
  2, 278, :_reduce_373,
  1, 278, :_reduce_374,
  2, 283, :_reduce_375,
  1, 283, :_reduce_none,
  6, 284, :_reduce_377,
  8, 284, :_reduce_378,
  4, 284, :_reduce_379,
  6, 284, :_reduce_380,
  4, 284, :_reduce_381,
  2, 284, :_reduce_382,
  6, 284, :_reduce_383,
  2, 284, :_reduce_384,
  4, 284, :_reduce_385,
  6, 284, :_reduce_386,
  2, 284, :_reduce_387,
  4, 284, :_reduce_388,
  2, 284, :_reduce_389,
  4, 284, :_reduce_390,
  1, 284, :_reduce_391,
  1, 187, :_reduce_392,
  1, 187, :_reduce_none,
  3, 288, :_reduce_394,
  1, 288, :_reduce_395,
  4, 288, :_reduce_396,
  1, 289, :_reduce_none,
  4, 289, :_reduce_398,
  1, 290, :_reduce_399,
  3, 290, :_reduce_400,
  1, 291, :_reduce_401,
  1, 291, :_reduce_none,
  0, 295, :_reduce_403,
  3, 235, :_reduce_404,
  4, 293, :_reduce_405,
  1, 293, :_reduce_406,
  3, 294, :_reduce_407,
  3, 294, :_reduce_408,
  0, 298, :_reduce_409,
  0, 299, :_reduce_410,
  6, 297, :_reduce_411,
  2, 182, :_reduce_412,
  4, 182, :_reduce_413,
  5, 182, :_reduce_414,
  5, 182, :_reduce_415,
  0, 301, :_reduce_416,
  3, 234, :_reduce_417,
  4, 234, :_reduce_418,
  4, 234, :_reduce_419,
  3, 234, :_reduce_420,
  3, 234, :_reduce_421,
  3, 234, :_reduce_422,
  2, 234, :_reduce_423,
  1, 234, :_reduce_424,
  4, 234, :_reduce_425,
  0, 302, :_reduce_426,
  0, 303, :_reduce_427,
  6, 233, :_reduce_428,
  0, 304, :_reduce_429,
  0, 305, :_reduce_430,
  6, 233, :_reduce_431,
  0, 307, :_reduce_432,
  6, 239, :_reduce_433,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  6, 158, :_reduce_436,
  0, 158, :_reduce_437,
  1, 308, :_reduce_438,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 309, :_reduce_441,
  1, 309, :_reduce_none,
  2, 160, :_reduce_443,
  1, 160, :_reduce_none,
  1, 223, :_reduce_445,
  1, 223, :_reduce_446,
  1, 223, :_reduce_none,
  1, 224, :_reduce_448,
  1, 311, :_reduce_449,
  1, 311, :_reduce_none,
  2, 311, :_reduce_451,
  3, 312, :_reduce_452,
  1, 312, :_reduce_453,
  3, 225, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 227, :_reduce_457,
  1, 316, :_reduce_458,
  3, 316, :_reduce_459,
  1, 317, :_reduce_none,
  2, 317, :_reduce_461,
  3, 229, :_reduce_462,
  3, 229, :_reduce_463,
  1, 319, :_reduce_464,
  3, 319, :_reduce_465,
  3, 228, :_reduce_466,
  3, 228, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  1, 320, :_reduce_470,
  3, 320, :_reduce_471,
  1, 321, :_reduce_472,
  3, 321, :_reduce_473,
  1, 313, :_reduce_474,
  2, 313, :_reduce_475,
  1, 314, :_reduce_476,
  2, 314, :_reduce_477,
  1, 315, :_reduce_478,
  2, 315, :_reduce_479,
  1, 318, :_reduce_480,
  0, 323, :_reduce_481,
  3, 318, :_reduce_482,
  0, 324, :_reduce_483,
  4, 318, :_reduce_484,
  1, 322, :_reduce_485,
  1, 322, :_reduce_486,
  1, 322, :_reduce_487,
  1, 322, :_reduce_none,
  2, 208, :_reduce_489,
  1, 208, :_reduce_490,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  3, 209, :_reduce_495,
  1, 310, :_reduce_none,
  2, 310, :_reduce_497,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_507,
  1, 201, :_reduce_508,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 231, :_reduce_514,
  1, 231, :_reduce_515,
  1, 168, :_reduce_516,
  1, 168, :_reduce_517,
  1, 172, :_reduce_518,
  1, 172, :_reduce_519,
  1, 241, :_reduce_520,
  0, 326, :_reduce_521,
  4, 241, :_reduce_522,
  2, 241, :_reduce_523,
  3, 243, :_reduce_524,
  2, 243, :_reduce_525,
  4, 327, :_reduce_526,
  2, 327, :_reduce_527,
  2, 327, :_reduce_528,
  1, 327, :_reduce_none,
  2, 329, :_reduce_530,
  0, 329, :_reduce_531,
  6, 296, :_reduce_532,
  8, 296, :_reduce_533,
  4, 296, :_reduce_534,
  6, 296, :_reduce_535,
  4, 296, :_reduce_536,
  6, 296, :_reduce_537,
  2, 296, :_reduce_538,
  4, 296, :_reduce_539,
  6, 296, :_reduce_540,
  2, 296, :_reduce_541,
  4, 296, :_reduce_542,
  2, 296, :_reduce_543,
  4, 296, :_reduce_544,
  1, 296, :_reduce_545,
  0, 296, :_reduce_546,
  1, 292, :_reduce_547,
  1, 292, :_reduce_548,
  1, 292, :_reduce_549,
  1, 292, :_reduce_550,
  1, 275, :_reduce_none,
  1, 275, :_reduce_552,
  1, 331, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_555,
  1, 332, :_reduce_none,
  3, 332, :_reduce_557,
  1, 285, :_reduce_558,
  3, 285, :_reduce_559,
  1, 333, :_reduce_none,
  2, 334, :_reduce_561,
  1, 334, :_reduce_562,
  2, 335, :_reduce_563,
  1, 335, :_reduce_564,
  1, 279, :_reduce_none,
  3, 279, :_reduce_566,
  1, 328, :_reduce_none,
  3, 328, :_reduce_568,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 280, :_reduce_571,
  1, 280, :_reduce_572,
  3, 337, :_reduce_573,
  3, 338, :_reduce_574,
  1, 286, :_reduce_575,
  3, 286, :_reduce_576,
  1, 330, :_reduce_577,
  3, 330, :_reduce_578,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 287, :_reduce_581,
  1, 287, :_reduce_582,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 282, :_reduce_585,
  2, 281, :_reduce_586,
  0, 281, :_reduce_587,
  1, 244, :_reduce_none,
  0, 341, :_reduce_589,
  4, 244, :_reduce_590,
  1, 232, :_reduce_591,
  2, 232, :_reduce_592,
  1, 217, :_reduce_none,
  3, 217, :_reduce_594,
  3, 342, :_reduce_595,
  2, 342, :_reduce_596,
  2, 342, :_reduce_597,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 300, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 171, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_619,
  1, 242, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_622,
  0, 151, :_reduce_623 ]

racc_reduce_n = 624

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_426(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_427(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_428(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 434 omitted

# reduce 435 omitted

def _reduce_436(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_437(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_438(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 439 omitted

# reduce 440 omitted

def _reduce_441(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_449(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_457(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 460 omitted

def _reduce_461(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_462(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_463(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_466(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_475(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_481(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_482(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_484(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_485(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_486(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_490(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

def _reduce_495(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

def _reduce_507(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_508(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_509(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_511(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_513(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_514(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_518(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_519(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_520(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_521(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_522(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_523(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_525(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_526(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

# reduce 529 omitted

def _reduce_530(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_531(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 551 omitted

def _reduce_552(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 553 omitted

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

def _reduce_619(val, _values, result)
 yyerrok 
    result
end

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

def _reduce_623(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
