#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby23Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-503,-518,-99,791,668,-98,-517,-503,-503,-503,-84,-104,-503,-503,-503',
'-92,-503,756,628,242,668,1004,218,219,-503,-70,-503,-503,-503,218,219',
'271,825,-106,592,631,-503,-503,667,-503,-503,-503,-503,-503,586,-99',
'-98,-91,-89,-105,545,239,112,547,667,241,240,-94,-99,-100,-103,736,-103',
'-98,586,586,-105,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503',
'-503,-503,-503,627,-92,-503,-503,-503,736,-503,-503,-605,-104,-503,736',
'-103,-503,-503,747,-503,630,-503,748,-503,209,-503,-503,-503,-503,-503',
'-503,-503,-89,-503,222,-503,-91,-102,-99,-92,270,222,-92,-99,-93,755',
'-94,-104,-503,-503,-503,-503,-104,-503,-608,-503,586,-92,-101,586,-97',
'-608,-608,-608,116,-503,-503,-608,-608,115,-608,-91,-90,210,-91,-100',
'-96,-102,-605,-608,116,-94,-98,116,-94,115,-91,-98,115,-91,-608,-608',
'211,-608,-608,-608,-608,-608,-103,-94,116,116,-105,-103,938,115,115',
'-105,116,-106,-604,-93,-101,115,116,-604,221,-95,217,115,-94,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,708,261',
'-608,-608,-608,271,651,271,-604,271,-608,-93,790,-608,-93,668,-102,222',
'-608,644,-608,-102,-608,-608,-608,-608,-608,-608,-608,-93,-608,-608',
'-608,533,886,116,320,-101,116,668,115,462,-101,115,-506,-608,-608,-93',
'-93,667,-608,-506,-506,-506,-100,571,-506,-506,-506,-100,-506,-92,-608',
'-102,218,219,574,321,-506,-101,-506,-506,-506,667,-416,-96,-101,-608',
'218,219,-506,-506,-92,-506,-506,-506,-506,-506,-106,222,-105,-100,270',
'-106,270,83,270,612,-106,582,581,94,95,84,566,707,563,562,561,-601,564',
'-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506,-506',
'218,219,-506,-506,-506,-608,-506,-506,575,-517,-506,612,-608,-506,-506',
'360,-506,-604,-506,384,-506,-608,-506,-506,-506,-506,-506,-506,-506',
'222,-506,571,-506,614,613,610,612,-503,612,-608,545,617,574,547,-503',
'-506,-506,-506,-506,-601,-506,-288,-506,-503,683,96,97,850,-288,-288',
'-288,-509,-506,-506,-288,-288,-98,-288,-509,116,-608,-601,614,613,115',
'582,581,-513,242,-602,533,766,-506,545,-513,387,544,-288,-288,-506,-288',
'-288,-288,-288,-288,94,95,614,613,614,613,566,-503,563,562,561,768,564',
'612,575,239,645,218,219,241,240,237,238,-288,-288,-288,-288,-288,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-506,594,-288,-288,-288,-105',
'650,-506,595,411,-288,390,-602,-288,413,412,-506,593,-288,393,-288,-94',
'-288,-288,-288,-288,-288,-288,-288,409,-288,776,-288,751,-602,414,-103',
'614,613,620,750,612,96,97,-608,-288,-288,984,-95,752,-288,-608,-608',
'-608,116,461,-608,-608,-608,115,-608,213,-288,-104,463,-506,215,-503',
'214,-608,-608,-608,-608,-91,-503,-289,545,212,464,547,-608,-608,-289',
'-608,-608,-608,-608,-608,-100,-288,264,-289,-512,-289,854,825,-288,265',
'215,-512,-289,-605,614,613,615,-288,221,222,493,-289,1008,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608,273,215',
'-608,-608,-608,-514,792,-608,854,825,-608,503,-514,-608,-608,-289,-608',
'506,-608,612,-608,508,-608,-608,-608,-608,-608,-608,-608,-288,-608,-608',
'-608,-289,-511,116,264,-288,218,219,115,-511,612,265,-288,-608,-608',
'-608,-608,-605,-608,-515,-608,-288,242,116,-69,-288,-515,222,115,-510',
'-608,-102,-288,-288,-288,-515,-510,-288,-288,-288,566,-288,563,562,561',
'571,564,519,614,613,625,-288,-288,-288,239,116,574,520,241,240,115,-288',
'-288,527,-288,-288,-288,-288,-288,-508,-288,614,613,610,276,-516,-508',
'566,569,563,562,561,-516,564,-515,-518,222,579,578,582,581,-516,-288',
'-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,-288,116',
'273,-288,-288,-288,115,793,-288,530,722,-288,582,581,-288,-288,612,-288',
'575,-288,534,-288,-90,-288,-288,-288,-288,-288,-288,-288,242,-288,542',
'-288,116,-516,548,-99,566,115,563,562,561,571,564,525,-288,-288,-288',
'-288,549,-288,526,-288,574,508,592,403,-295,596,597,524,216,-288,-104',
'-295,-295,-295,619,623,-295,-295,-295,626,-295,458,569,614,613,632,629',
'636,459,-262,-295,-295,751,582,581,-280,638,460,222,965,-295,-295,-280',
'-295,-295,-295,-295,-295,752,642,-97,-280,643,535,751,273,215,273,877',
'878,536,965,879,110,111,-106,655,575,242,460,752,-295,-295,-295,-295',
'-295,-295,-295,-295,-295,-295,-295,-295,-295,-295,242,215,-295,-295',
'-295,242,242,-295,222,276,-295,222,215,-295,-295,-280,-295,222,-295',
'-84,-295,686,-295,-295,-295,-295,-295,-295,-295,222,-295,1014,-295,215',
'215,538,697,566,1015,563,562,561,702,564,-281,-295,-295,1013,-295,703',
'-295,-281,-281,-281,222,710,-281,-281,-281,713,-281,-335,-295,566,714',
'563,562,561,-335,564,-281,-281,-281,716,718,722,720,-335,728,729,-281',
'-281,730,-281,-281,-281,-281,-281,962,732,563,562,561,592,564,739,215',
'769,770,771,-263,722,566,777,563,562,561,493,564,493,930,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,222,-335,-281',
'-281,-281,795,261,-281,506,508,-281,697,222,-281,-281,722,-281,273,-281',
'273,-281,697,-281,-281,-281,-281,-281,-281,-281,242,-281,825,-281,566',
'222,563,562,561,571,564,119,120,121,122,123,-281,-281,-281,-281,574',
'-281,-626,-281,119,120,121,122,123,-626,-626,-626,848,-281,-626,-626',
'-626,566,-626,563,562,561,569,564,222,825,858,-626,-626,-626,222,-264',
'885,582,581,888,713,891,-626,-626,894,-626,-626,-626,-626,-626,896,898',
'222,900,566,901,563,562,561,722,564,566,697,563,562,561,909,564,725',
'-262,913,575,915,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,916,242,-626,-626,-626,722,222,-626,713,273,-626,919',
'722,-626,-626,921,-626,923,-626,925,-626,725,-626,-626,-626,-626,-626',
'-626,-626,925,-626,-626,-626,239,222,931,933,241,240,237,238,935,222',
'945,-610,-626,-626,946,-626,222,-626,-610,-610,-610,949,-265,-610,-610',
'-610,242,-610,566,-626,563,562,561,959,564,966,-610,-610,-610,-610,967',
'969,256,257,970,986,988,-610,-610,989,-610,-610,-610,-610,-610,993,713',
'998,239,1000,245,1002,241,240,237,238,722,1004,243,962,244,563,562,561',
'1004,564,1011,1016,-610,-610,-610,-610,-610,-610,-610,-610,-610,-610',
'-610,-610,-610,-610,1017,925,-610,-610,-610,925,925,-610,1022,986,-610',
'-605,-604,-610,-610,702,-610,986,-610,1045,-610,1046,-610,-610,-610',
'-610,-610,-610,-610,1047,-610,-610,-610,566,1048,563,562,561,571,564',
'119,120,121,122,123,-610,-610,-610,-610,574,-610,-425,-610,119,120,121',
'122,123,-425,-425,-425,1004,-610,-425,-425,-425,1004,-425,242,1004,222',
'569,925,986,3,,-425,-425,-425,,579,578,582,581,256,257,,-425,-425,,-425',
'-425,-425,-425,-425,,,,,,239,,245,,241,240,237,238,,,243,,244,,,,575',
',-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425,-425',
',,-425,-425,-425,,,-425,,273,-425,,,-425,-425,,-425,,-425,,-425,,-425',
'-425,-425,-425,-425,-425,-425,,-425,-425,-425,,,,,,,,,,,,-609,-425,-425',
',-425,,-425,-609,-609,-609,,,-609,-609,-609,242,-609,,-425,,,,,,,-609',
'-609,-609,-609,,,256,257,,,,-609,-609,,-609,-609,-609,-609,-609,,,,239',
',245,,241,240,237,238,,,243,,244,,,,,,,,-609,-609,-609,-609,-609,-609',
'-609,-609,-609,-609,-609,-609,-609,-609,,,-609,-609,-609,,,-609,,,-609',
',,-609,-609,,-609,,-609,,-609,,-609,-609,-609,-609,-609,-609,-609,,-609',
'-609,-609,,,,,,,,,,,,,-609,-609,-609,-609,,-609,,-609,,296,72,73,74',
'12,60,,,-609,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,656,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,-239,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,639,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,656,11,48,10',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235',
'236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260',
',,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222,260,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,-627,-627,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627',
'-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,298,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,',
',36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627',
'-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43',
',,36,,242,61,62,,,63,,38,239,,245,47,241,240,237,238,256,257,243,23',
'244,,,,91,83,85,86,87,89,,,239,84,92,,241,240,237,238,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,,,254',
'255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,,-627,-627,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,',
',,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
',,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,903,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,222,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61',
'62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303',
',,61,62,,,63,,302,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,522,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84',
'287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,',
',,,,,,,,,903,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,',
',,,,,,,,,976,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,680,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,538,,61,62,,,63,,',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,',
',65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84',
'287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,311,,,108,107,109,598,59,100,99,599,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,600,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,311,,,108,107,109,598,59,100,99,599,,102,110,111,,94,95,,,,317',
',,,,,,,,,,,,,,,,,,,600,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,354,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,403,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,',
',,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,680,,283,,47,,,',
',,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,',
'290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,403,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,',
',,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,680,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86',
'87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,419,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'774,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,680,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,',
'48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,',
',,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,',
',,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'419,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171',
'178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,400,399,128,,401,,',
',,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128',
',,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,369,368,370,367,172,191,190,,,,,,171,178,169,170',
'364,365,366,362,129,100,99,363,,102,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,376,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,-626,,',
',,,92,-626,-626,-626,,,-626,-626,-626,158,-626,566,,563,562,561,571',
'564,,-626,-626,,,,,,,574,,,-626,-626,,-626,-626,-626,-626,-626,,,566',
',563,562,561,571,564,,,569,,,,,,,574,,579,578,582,581,,,,,,,,,,,-626',
',,,,,569,-626,,,,,273,-626,,579,578,582,581,,,,575,,1038,433,,,1039',
',,,,,-626,-626,,161,162,,157,139,140,141,148,145,147,,-626,142,143,575',
',-626,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,1040,440,,,1041,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,742',
'433,,,743,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,443,433,,,444,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,566,165,563,562',
'561,571,564,566,,563,562,561,571,564,,,574,,,,,158,,574,566,,563,562',
'561,571,564,,,,,,,,569,760,574,,,,,569,,579,578,582,581,,,,,,582,581',
',,,566,569,563,562,561,571,564,,,,,,582,581,,566,574,563,562,561,571',
'564,575,,,,,,,575,,574,,,,,,,569,552,,,,,,,575,579,578,582,581,,566',
'569,563,562,561,571,564,,,,,,582,581,,,574,,,,,,,,,,,,,,,575,,,,,,,569',
'658,433,,,659,,,575,,,582,581,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,575,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,660,440,,,661,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,566',
'165,563,562,561,571,564,,,658,433,,,659,,,574,,,,,158,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,569,163,164,149,150,,,,,,273,582,581',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,566,165,563',
'562,561,571,564,,,,,,575,,,,574,,,,566,158,563,562,561,571,564,566,',
'563,562,561,571,564,,,574,,569,,,,,574,,,,,,582,581,,,,,,,,569,,,,,',
',569,,,,582,581,,,,579,578,582,581,,,,,,575,566,,563,562,561,571,564',
',,,,443,433,,,444,574,,,575,,,,,161,162,575,157,139,140,141,148,145',
'147,,,142,143,569,,,163,164,149,150,,,579,578,582,581,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,566,165,563,562,561,571',
'564,,,,575,,,,,,574,,,,566,158,563,562,561,571,564,,,,,,,,,,574,,569',
'760,,,,,,,,579,578,582,581,,,,,,,,569,1010,440,,,1009,,,,,,582,581,',
'161,162,,157,139,140,141,148,145,147,,575,142,143,,,,163,164,149,150',
',,,,,273,,,,,575,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,744,440,,,745,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,690,433,,,691,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',566,165,563,562,561,571,564,566,,563,562,561,571,564,,,574,,,,,158',
',574,566,,563,562,561,571,564,,,,,,,,569,,574,,,,,569,,579,578,582,581',
',,,579,578,582,581,,,,,569,,,,,,,,,579,578,582,581,222,,,443,433,,,444',
'575,,,,,,,575,161,162,,157,139,140,141,148,145,147,,,142,143,,,575,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,693,440,,,694,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,436,440,,,435,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,429,433,,,430,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,862,440,,,863,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,660,440,,,661,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26686, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,226,974,659,672,351,41,98,98,98,685,1041,98,98,98,690,98,604,391',
'467,497,1055,456,456,98,685,98,98,98,700,700,671,991,355,991,394,98',
'98,672,98,98,98,98,98,934,352,973,820,41,596,334,467,3,334,497,467,467',
'691,226,860,659,589,1039,41,345,859,1016,98,98,98,98,98,98,98,98,98',
'98,98,98,98,98,391,690,98,98,98,588,98,98,1041,745,98,861,743,98,98',
'600,98,394,98,600,98,13,98,98,98,98,98,98,98,351,98,456,98,820,1040',
'974,690,671,700,690,974,693,604,691,1041,98,98,98,98,1041,98,436,98',
'912,690,1038,344,355,436,436,436,604,98,98,436,436,604,436,820,352,15',
'820,1053,596,744,745,436,934,691,973,589,691,934,860,973,589,820,436',
'436,16,436,436,436,436,436,1039,691,345,859,1016,1039,859,345,859,1016',
'588,977,693,693,742,588,861,1040,22,745,19,861,743,436,436,436,436,436',
'436,436,436,436,436,436,436,436,436,551,25,436,436,436,312,436,64,744',
'29,436,693,658,436,693,498,1040,22,436,429,436,1040,436,436,436,436',
'436,436,436,693,436,436,436,321,794,912,40,1038,344,491,912,228,1038',
'344,101,436,436,744,436,498,436,101,101,101,1053,710,101,101,101,1053',
'101,429,436,436,763,763,710,43,101,658,101,101,101,491,29,321,429,862',
'20,20,101,101,742,101,101,101,101,101,977,48,321,794,312,977,64,80,29',
'510,228,710,710,44,44,80,725,551,725,725,725,598,725,101,101,101,101',
'101,101,101,101,101,101,101,101,101,101,343,343,101,101,101,862,101',
'101,710,225,101,621,862,101,101,72,101,862,101,87,101,862,101,101,101',
'101,101,101,101,763,101,888,101,510,510,510,624,598,382,862,705,382',
'888,705,598,101,101,101,101,598,101,435,101,598,510,44,44,725,435,435',
'435,369,101,101,435,435,225,435,369,761,862,598,621,621,761,888,888',
'364,487,599,461,621,363,333,364,88,333,435,435,363,435,435,435,435,435',
'317,317,624,624,382,382,930,598,930,930,930,624,930,385,888,487,430',
'757,757,487,487,487,487,435,435,435,435,435,435,435,435,435,435,435',
'435,435,435,599,353,435,435,435,461,435,599,353,126,435,89,599,435,126',
'126,599,353,435,90,435,430,435,435,435,435,435,435,435,124,435,640,435',
'602,599,207,430,385,385,385,602,380,317,317,660,435,435,930,435,602',
'435,660,660,660,348,227,660,660,660,348,660,17,435,435,229,599,353,362',
'17,660,660,660,660,640,362,527,338,17,230,338,660,660,527,660,660,660',
'660,660,640,694,27,527,365,748,1024,1024,694,27,602,365,748,694,380',
'380,380,694,234,960,266,748,960,660,660,660,660,660,660,660,660,660',
'660,660,660,660,660,269,17,660,660,660,366,660,660,731,731,660,280,366',
'660,660,527,660,281,660,388,660,284,660,660,660,660,660,660,660,694',
'660,660,660,748,367,943,372,863,329,329,943,367,378,372,863,660,660',
'660,660,863,660,304,660,863,468,869,297,661,304,299,869,370,660,660',
'661,661,661,304,370,661,661,661,919,661,919,919,919,919,919,300,388',
'388,388,661,661,661,468,293,919,301,468,468,293,661,661,307,661,661',
'661,661,661,368,863,378,378,378,310,305,368,1022,919,1022,1022,1022',
'305,1022,304,42,311,919,919,919,919,305,661,661,661,661,661,661,661',
'661,661,661,661,661,661,661,756,316,661,661,661,756,661,661,318,1022',
'661,713,713,661,661,396,661,919,661,322,661,42,661,661,661,661,661,661',
'661,325,661,331,661,5,305,335,42,1017,5,1017,1017,1017,1017,1017,306',
'661,661,661,661,336,661,306,661,1017,339,349,350,31,354,356,306,18,661',
'661,31,31,31,384,387,31,31,31,390,31,224,1017,396,396,396,393,415,224',
'418,31,31,902,1017,1017,308,420,224,424,902,31,31,308,31,31,31,31,31',
'902,427,18,308,428,323,964,437,306,442,764,764,323,964,764,764,764,18',
'448,1017,469,323,964,31,31,31,31,31,31,31,31,31,31,31,31,31,31,470,224',
'31,31,31,471,472,31,499,31,31,500,902,31,31,308,31,517,31,518,31,521',
'31,31,31,31,31,31,31,523,31,975,31,323,964,528,531,850,975,850,850,850',
'539,850,59,31,31,975,31,540,31,59,59,59,541,554,59,59,59,555,59,49,31',
'848,557,848,848,848,49,848,59,59,59,558,559,850,568,49,576,580,59,59',
'583,59,59,59,59,59,1008,585,1008,1008,1008,590,1008,591,975,628,631',
'633,637,848,986,641,986,986,986,646,986,652,848,59,59,59,59,59,59,59',
'59,59,59,59,59,59,59,662,49,59,59,59,664,670,59,677,679,59,687,689,59',
'59,986,59,692,59,695,59,696,59,59,59,59,59,59,59,699,59,701,59,896,709',
'896,896,896,896,896,9,9,9,9,9,59,59,59,59,896,59,431,59,295,295,295',
'295,295,431,431,431,724,59,431,431,431,722,431,722,722,722,896,722,726',
'733,738,431,431,431,741,773,778,896,896,796,797,799,431,431,800,431',
'431,431,431,431,801,803,804,805,984,806,984,984,984,722,984,569,819',
'569,569,569,823,569,722,826,827,896,831,431,431,431,431,431,431,431',
'431,431,431,431,431,431,431,832,486,431,431,431,984,833,431,834,431',
'431,838,569,431,431,839,431,841,431,842,431,569,431,431,431,431,431',
'431,431,844,431,431,431,486,847,849,852,486,486,486,486,855,865,870',
'441,431,431,871,431,872,431,441,441,441,881,882,441,441,441,479,441',
'931,431,931,931,931,899,931,903,441,441,441,441,904,906,479,479,907',
'932,936,441,441,937,441,441,441,441,441,942,950,953,479,954,479,955',
'479,479,479,479,931,956,479,900,479,900,900,900,958,900,968,976,441',
'441,441,441,441,441,441,441,441,441,441,441,441,441,979,980,441,441',
'441,981,982,441,983,985,441,1009,1010,441,441,1012,441,1023,441,1028',
'441,1029,441,441,441,441,441,441,441,1030,441,441,441,894,1031,894,894',
'894,894,894,516,516,516,516,516,441,441,441,441,894,441,30,441,684,684',
'684,684,684,30,30,30,1032,441,30,30,30,1033,30,480,1034,1037,894,1042',
'1043,1,,30,30,30,,894,894,894,894,480,480,,30,30,,30,30,30,30,30,,,',
',,480,,480,,480,480,480,480,,,480,,480,,,,894,,30,30,30,30,30,30,30',
'30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30,,,30,30,,30,,30,,30,,30',
'30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,440,30,30,,30,,30,440,440,440',
',,440,440,440,477,440,,30,,,,,,,440,440,440,440,,,477,477,,,,440,440',
',440,440,440,440,440,,,,477,,477,,477,477,477,477,,,477,,477,,,,,,,',
'440,440,440,440,440,440,440,440,440,440,440,440,440,440,,,440,440,440',
',,440,,,440,,,440,440,,440,,440,,440,,440,440,440,440,440,440,440,,440',
'440,440,,,,,,,,,,,,,440,440,440,440,,440,,440,,233,233,233,233,233,233',
',,440,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233',
'233,233,233,,,233,,,,,451,233,233,,233,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,,233,233,233,451,451,451,451,451,451,451,451,451',
'451,451,,451,451,,,451,451,,233,,,233,,,233,233,,,233,,233,451,,451',
'233,451,451,451,451,451,451,451,233,451,,,,233,233,233,233,233,233,',
',,233,233,,451,,451,,,233,,,233,233,233,,,233,233,987,987,987,987,987',
'987,,,,987,987,,,,987,,987,987,987,987,987,987,987,,,,,,987,987,987',
'987,987,987,987,,,987,,,,,423,987,987,,987,987,987,987,987,987,987,987',
'987,,987,987,987,,987,987,,987,987,987,423,423,423,423,423,423,423,423',
'423,423,423,,423,423,,,423,423,,987,,,987,,,987,987,,,987,,987,423,',
'423,987,423,423,423,423,423,423,423,987,423,,,,987,987,987,987,987,987',
',,,987,987,,423,,,,,987,,,987,987,987,,,987,987,409,409,409,409,409',
'409,,,,409,409,,,,409,,409,409,409,409,409,409,409,,,,,,409,409,409',
'409,409,409,409,,,409,,,,,663,409,409,409,409,409,409,409,409,409,409',
'409,409,,409,409,409,,409,409,,409,409,409,663,663,663,663,663,663,663',
'663,663,663,663,,663,663,,,663,663,,409,,,409,,,409,409,,,409,,409,663',
',663,409,663,663,663,663,663,663,663,409,663,,,,409,409,409,409,409',
'409,,,,409,409,,663,,,,,409,,,409,409,409,,,409,409,996,996,996,996',
'996,996,,,,996,996,,,,996,,996,996,996,996,996,996,996,,,,,,996,996',
'996,996,996,996,996,,,996,,,,,,996,996,,996,996,996,996,996,996,996',
'996,996,,996,996,996,,996,996,,996,996,996,787,787,787,787,787,787,787',
'787,787,787,787,,787,787,,,787,787,,996,,,996,,,996,996,,,996,,996,787',
',787,996,787,787,787,787,787,787,787,996,787,,,,996,996,996,996,996',
'996,,,,996,996,,787,,,,,996,,,996,996,996,,,996,996,995,995,995,995',
'995,995,,,,995,995,,,,995,,995,995,995,995,995,995,995,,,,,,995,995',
'995,995,995,995,995,,,995,,,,,,995,995,,995,995,995,995,995,995,995',
'995,995,,995,995,995,,995,995,,995,995,995,537,537,537,537,537,537,537',
'537,537,537,537,,537,537,,,537,537,,995,,,995,,,995,995,,,995,,995,537',
',537,995,537,537,537,537,537,537,537,995,537,,,,995,995,995,995,995',
'995,,,,995,995,,537,,,,,995,,,995,995,995,,,995,995,328,328,328,328',
'328,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328',
'328,328,328,328,328,,,328,,,,,,328,328,,328,328,328,328,328,328,328',
'328,328,,328,328,328,,328,328,,328,328,328,782,782,782,782,782,782,782',
'782,782,782,782,,782,782,,,782,782,,328,,,328,,,328,328,,,328,,328,782',
',782,328,782,782,782,782,782,782,782,328,782,,,,328,328,328,328,328',
'328,,,,328,328,,782,,,,,328,,,328,328,328,,,328,328,939,939,939,939',
'939,939,,,,939,939,,,,939,,939,939,939,939,939,939,939,,,,,,939,939',
'939,939,939,939,939,,,939,,,,,,939,939,,939,939,939,939,939,939,939',
'939,939,,939,939,939,,939,939,,939,939,939,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,939,,,939,,,939,939,,,939,,939,24,,24,939,24,24',
'24,24,24,24,24,939,24,,,,939,939,939,939,939,939,,,,939,939,,24,,,,',
'939,,,939,939,939,,,939,939,707,707,707,707,707,707,,,,707,707,,,,707',
',707,707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707',
',,,,,707,707,,707,707,707,707,707,707,707,707,707,,707,707,707,,707',
'707,,707,707,707,698,698,698,698,698,698,698,698,698,698,698,,698,698',
',,698,698,,707,,,707,,,707,707,,,707,,707,698,,698,707,698,698,698,698',
'698,698,698,707,698,,,,707,707,707,707,707,707,,,,707,707,,698,,,,,707',
',,707,707,707,,,707,707,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36',
'36,36,36,,36,36,36,,36,36,,36,36,36,775,775,775,775,775,775,775,775',
'775,775,775,,775,775,,,775,775,,36,,,36,,,36,36,,,36,,36,775,,775,36',
'775,775,775,775,775,775,775,36,775,,,,36,36,36,36,36,36,,,,36,36,,775',
',,,,36,,,36,36,36,,,36,36,909,909,909,909,909,909,,,,909,909,,,,909',
',909,909,909,909,909,909,909,,,,,,909,909,909,909,909,909,909,,,909',
',,,,,909,909,,909,909,909,909,909,909,909,909,909,,909,909,909,,909',
'909,,909,909,909,780,780,780,780,780,780,780,780,780,780,780,,780,780',
',,780,780,,909,,,909,,,909,909,,,909,,909,780,,780,909,780,780,780,780',
'780,780,780,909,780,,,,909,909,909,909,909,909,,,,909,909,,780,,,,,909',
',,909,909,909,,,909,909,298,298,298,298,298,298,,,,298,298,,,,298,,298',
'298,298,298,298,298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,',
'298,298,,298,298,298,298,298,298,298,298,298,,298,298,298,,298,298,',
'298,298,298,884,884,884,884,884,884,884,884,884,884,884,,884,884,,,884',
'884,,298,,,298,,,298,298,,,298,,298,884,,884,298,884,884,884,884,884',
'884,884,298,884,,,,298,298,298,298,298,298,,,,298,298,,884,,,,,298,',
',298,298,298,,,298,298,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,,2',
'2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,887',
'887,887,887,887,887,887,887,887,887,887,,887,887,,,887,887,,2,,,2,,',
'2,2,,,2,,2,887,,887,2,887,887,887,887,887,887,887,2,887,,,,2,2,2,2,2',
'2,,,,2,2,,887,,,,,2,,,2,2,2,,,2,2,587,587,587,587,587,587,,,,587,587',
',,,587,,587,587,587,587,587,587,587,,,,,,587,587,587,587,587,587,587',
',,587,,,,,,587,587,,587,587,587,587,587,587,587,587,587,,587,587,587',
',587,587,,587,587,587,278,278,278,278,278,278,278,278,278,278,278,,278',
'278,,,278,278,,587,,,587,,,587,587,,,587,,587,278,,278,587,278,278,278',
'278,278,278,278,587,278,,,,587,587,587,587,587,587,,,,587,587,,278,',
',,,587,,,587,587,587,,,587,587,584,584,584,584,584,584,,,,584,584,,',
',584,,584,584,584,584,584,584,584,,,,,,584,584,584,584,584,584,584,',
',584,,,,,,584,584,,584,584,584,584,584,584,584,584,584,,584,584,584',
',584,584,,584,584,584,446,446,446,446,446,446,446,446,446,446,446,,446',
'446,,,446,446,,584,,,584,,,584,584,,,584,,584,446,,446,584,446,446,446',
'446,446,446,446,584,446,,,,584,584,584,584,584,584,,,,584,584,,446,',
',,,584,,,584,584,584,,,584,584,758,758,758,758,758,758,,,,758,758,,',
',758,,758,758,758,758,758,758,758,,,,,,758,758,758,758,758,758,758,',
',758,,,,,,758,758,,758,758,758,758,758,758,758,758,758,,758,758,758',
',758,758,,758,758,758,785,785,785,785,785,785,785,785,785,785,785,,785',
'785,,,785,785,,758,,,758,,,758,758,,,758,,758,785,,785,758,785,785,785',
'785,785,785,785,758,785,,,,758,758,758,758,758,758,,,,758,758,,785,',
',,,758,,,758,758,758,,,758,758,856,856,856,856,856,856,,,,856,856,,',
',856,,856,856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856,',
',856,,,,,,856,856,,856,856,856,856,856,856,856,856,856,,856,856,856',
',856,856,,856,856,856,789,789,789,789,789,789,789,789,789,789,789,,789',
'789,,,789,789,,856,,,856,,,856,856,,,856,,856,789,,789,856,789,789,789',
'789,789,789,789,856,789,,,,856,856,856,856,856,856,,,,856,856,,789,',
',,,856,,,856,856,856,,,856,856,857,857,857,857,857,857,,,,857,857,,',
',857,,857,857,857,857,857,857,857,,,,,,857,857,857,857,857,857,857,',
',857,,,,,,857,857,,857,857,857,857,857,857,857,857,857,,857,857,857',
',857,857,,857,857,857,490,490,490,490,490,490,490,490,490,490,490,,490',
'490,,,490,490,,857,,,857,,,857,857,,,857,,857,490,,490,857,490,490,490',
'490,490,490,490,857,490,,,,857,857,857,857,857,857,,,,857,857,490,490',
',,,,857,,,857,857,857,,,857,857,905,905,905,905,905,905,,,,905,905,',
',,905,,905,905,905,905,905,905,905,,,,,,905,905,905,905,905,905,905',
',,905,,,,,,905,905,,905,905,905,905,905,905,905,905,905,,905,905,905',
',905,905,,905,905,905,465,465,465,465,465,465,465,465,465,465,465,,465',
'465,,,465,465,,905,,,905,,,905,905,,,905,,905,465,,465,905,465,465,465',
'465,465,465,465,905,465,,,,905,905,905,905,905,905,,,,905,905,,,,,,',
'905,,,905,905,905,,,905,905,303,303,303,303,303,303,,,,303,303,,,,303',
',303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303',
',,,,,303,303,,303,303,303,303,303,303,303,303,303,,303,303,303,,303',
'303,,303,303,303,483,483,483,483,483,483,483,,,483,483,,,,,,483,483',
',303,,,303,,,303,303,,,303,,303,483,,483,303,483,483,483,483,483,483',
'483,303,483,,,,303,303,303,303,303,303,,,,303,303,,,,,,,303,,,303,303',
'303,,,303,303,866,866,866,866,866,866,,,,866,866,,,,866,,866,866,866',
'866,866,866,866,,,,,,866,866,866,866,866,866,866,,,866,,,,,,866,866',
',866,866,866,866,866,866,866,866,866,,866,866,866,,866,866,,866,866',
'866,484,484,484,484,484,484,484,,,484,484,,,,,,484,484,,866,,,866,,',
'866,866,,,866,,866,484,,484,866,484,484,484,484,484,484,484,866,484',
',,,866,866,866,866,866,866,,,,866,866,,,,,,,866,,,866,866,866,,,866',
'866,992,992,992,992,992,992,,,,992,992,,,,992,,992,992,992,992,992,992',
'992,,,,,,992,992,992,992,992,992,992,,,992,,,,,,992,992,,992,992,992',
'992,992,992,992,992,992,,992,992,992,,992,992,,992,992,992,485,485,485',
'485,485,485,485,,,485,485,,,,,,485,485,,992,,,992,,,992,992,,,992,,992',
'485,,485,992,485,485,485,485,485,485,485,992,485,,,,992,992,992,992',
'992,992,,,,992,992,,,,,,,992,,,992,992,992,,,992,992,759,759,759,759',
'759,759,,,,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759',
'759,759,759,759,759,,,759,,,,,,759,759,,759,759,759,759,759,759,759',
'759,759,,759,759,759,,759,759,,759,759,759,481,481,481,481,481,481,481',
',,481,481,,,,,,481,481,,759,,,759,,,759,759,,,759,,759,481,,481,759',
'481,481,481,481,481,481,481,759,481,,,,759,759,759,759,759,759,,,,759',
'759,,,,,,,759,,,759,759,759,,,759,759,209,209,209,209,209,209,,,,209',
'209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209',
'209,,,209,,,,,,209,209,,209,209,209,209,209,209,209,209,209,,209,209',
'209,,209,209,,209,209,209,489,489,489,489,489,489,489,489,,489,489,',
',,,,489,489,,209,,,209,,,209,209,,,209,,209,489,,489,209,489,489,489',
'489,489,489,489,209,489,,,,209,209,209,209,209,209,,,,209,209,,,,,,',
'209,,,209,209,209,,,209,209,810,810,810,810,810,810,,,,810,810,,,,810',
',810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,,,810',
',,,,,810,810,,810,810,810,810,810,810,810,810,810,,810,810,810,,810',
'810,,810,810,810,476,476,476,476,476,476,476,,,476,476,,,,,,476,476',
',810,,,810,,,810,810,,,810,,810,476,,476,810,476,476,476,476,476,476',
'476,810,476,,,,810,810,810,810,810,810,,,,810,810,,,,,,,810,,,810,810',
'810,,,810,810,708,708,708,708,708,708,,,,708,708,,,,708,,708,708,708',
'708,708,708,708,,,,,,708,708,708,708,708,708,708,,,708,,,,,,708,708',
',708,708,708,708,708,708,708,708,708,,708,708,708,,708,708,,708,708',
'708,482,482,482,482,482,482,482,,,482,482,,,,,,482,482,,708,,,708,,',
'708,708,,,708,,708,482,,482,708,482,482,482,482,482,482,482,708,482',
',,,708,708,708,708,708,708,,,,708,708,,,,,,,708,,,708,708,708,,,708',
'708,765,765,765,765,765,765,,,,765,765,,,,765,,765,765,765,765,765,765',
'765,,,,,,765,765,765,765,765,765,765,,,765,,,,,,765,765,,765,765,765',
'765,765,765,765,765,765,,765,765,765,,765,765,,765,765,765,478,,,,,',
',,,,,,,,,,478,478,,765,,,765,,475,765,765,,,765,,765,478,,478,765,478',
'478,478,478,475,475,478,765,478,,,,765,765,765,765,765,765,,,475,765',
'765,,475,475,475,475,,765,,,765,765,765,,,765,765,825,825,825,825,825',
'825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,,825,825,825',
'825,825,825,825,,,825,,,,,,825,825,,825,825,825,825,825,825,825,825',
'825,,825,825,825,,825,825,,825,825,825,488,488,488,488,488,488,488,',
',488,488,,,,,,488,488,,825,,,825,,,825,825,,,825,,825,488,,488,825,488',
'488,488,488,488,488,488,825,488,,,,825,825,825,825,825,825,,,,825,825',
',,,,,,825,,,825,825,825,,,825,825,972,972,972,972,972,972,,,,972,972',
',,,972,,972,972,972,972,972,972,972,,,,,,972,972,972,972,972,972,972',
',,972,,,,,,972,972,,972,972,972,972,972,972,972,972,972,,972,972,972',
',972,972,,972,972,972,466,466,466,466,466,466,466,466,466,466,466,,466',
'466,,,466,466,,972,,,972,,,972,972,,,972,,972,466,,466,972,466,466,466',
'466,466,466,466,972,466,,,,972,972,972,972,972,972,,,,972,972,,,,,,',
'972,,,972,972,972,,,972,972,815,815,815,815,815,815,,,,815,815,,,,815',
',815,815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815',
',,,,,815,815,,815,815,815,815,815,815,815,815,815,,815,815,815,,815',
'815,,815,815,815,473,,,,,,,,,,,,,,,,473,473,,815,,,815,,,815,815,,,815',
',815,473,,473,815,473,473,473,473,,,,815,,,,,815,815,815,815,815,815',
',,,815,815,,,,,,,815,,,815,815,815,,,815,815,814,814,814,814,814,814',
',,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814,814',
'814,814,814,,,814,,,,,,814,814,,814,814,814,814,814,814,814,814,814',
',814,814,814,,814,814,,814,814,814,474,,,,,,,,,,,,,,,,474,474,,814,',
',814,,,814,814,,,814,,814,474,,474,814,474,474,474,474,,,,814,,,,,814',
'814,814,814,814,814,,,,814,814,,,,,,,814,,,814,814,814,,,814,814,218',
'218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218',
'218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218',
'218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218',
',,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218',
'218,,,,,,,218,,,218,218,218,,,218,218,746,746,746,,746,,,,746,746,,',
',746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746,',
',746,,,,,,,746,,,746,746,746,746,746,746,746,746,,746,746,746,,746,746',
',746,746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,',
',,,,,,746,,,,,746,746,746,746,746,746,,,,746,746,,,,,,,746,,,746,746',
'746,,,746,746,752,752,752,,752,,,,752,752,,,,752,,752,752,752,752,752',
'752,752,,,,,,752,752,752,752,752,752,752,,,752,,,,,,,752,,,752,752,752',
'752,752,752,752,752,752,752,752,752,,752,752,,752,752,752,,,,,,,,,,',
',,,,,,,,,752,,,752,,,752,752,,,752,,752,,752,,752,,,,,,,,752,,,,,752',
'752,752,752,752,752,,,,752,752,,,,,,,752,,752,752,752,752,,,752,752',
'255,255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,',
',255,255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255',
'255,255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,',
'255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255',
',,,255,255,,,,,,,255,,,255,255,255,,,255,255,774,774,774,,774,,,,774',
'774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774',
'774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,,774,774,774,',
'774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,',
',,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,',
',774,774,774,,,774,774,776,776,776,,776,,,,776,776,,,,776,,776,776,776',
'776,776,776,776,,,,,,776,776,776,776,776,776,776,,,776,,,,,,,776,,,776',
'776,776,776,776,776,776,776,,776,776,776,,776,776,,776,776,776,,,,,',
',,,,,,,,,,,,,,776,,,776,,,776,776,,,776,,,,,,776,,,,,,,,776,,,,,776',
'776,776,776,776,776,,,,776,776,,,,,,,776,,,776,776,776,,,776,776,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,790,790,790,,790,,,,790,790,,',
',790,,790,790,790,790,790,790,790,,,,,,790,790,790,790,790,790,790,',
',790,,,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790,,790,790',
',790,790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,,,,,790,',
',,,,,,790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790,,,790,790',
'790,,,790,790,791,791,791,,791,,,,791,791,,,,791,,791,791,791,791,791',
'791,791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791,,,791,791,791',
'791,791,791,791,791,,791,791,791,,791,791,,791,791,791,,,,,,,,,,,,,',
',,,,,,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791,791,791',
'791,791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791,792,792,792',
',792,,,,792,792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792',
'792,792,792,792,,,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792',
'792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792',
',,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,,,',
',,,792,,,792,792,792,,,792,792,793,793,793,,793,,,,793,793,,,,793,,793',
'793,793,793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,',
',793,,,793,793,793,793,793,793,793,793,,793,793,793,,793,793,,793,793',
'793,,,,,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,793',
',,,,793,793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793,793,,,793',
'793,795,795,795,,795,,,,795,795,,,,795,,795,795,795,795,795,795,795',
',,,,,795,795,795,795,795,795,795,,,795,,,,,,,795,,,795,795,795,795,795',
'795,795,795,,795,795,795,,795,795,,795,795,795,,,,,,,,,,,,,,,,,,,,795',
',,795,,,795,795,,,795,,,,,,795,,,,,,,,795,,,,,795,795,795,795,795,795',
',,,795,795,,,,,,,795,,,795,795,795,,,795,795,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,',
'257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,',
',257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258',
'258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258',
'258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,',
',,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258',
'258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259',
'259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259',
'259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259',
'259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259',
',,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259',
'259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,',
',260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,',
',260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260',
',260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,',
',,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260',
'260,,,260,260,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267',
'267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267',
'267,267,267,267,267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,',
',,,,,,,,,267,,,267,,,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267',
'267,267,267,267,267,,,,267,267,,,,,,,267,,267,267,267,267,,,267,267',
'273,273,273,,273,,,,273,273,,,,273,,273,273,273,273,273,273,273,,,,',
',273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273,273,273',
'273,273,273,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273',
',,273,,,273,273,,,273,,273,,273,,273,,,,,,,,273,,,,,273,273,273,273',
'273,273,,,,273,273,,,,,,,273,,273,273,273,273,,,273,273,807,807,807',
',807,,,,807,807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807',
'807,807,807,807,,,807,,,,,,,807,,,807,807,807,807,807,807,807,807,,807',
'807,807,,807,807,,,,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807',
',,,,,,,,,,,,,,,,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807',
'807,807,,,807,807,276,276,276,,276,,,,276,276,,,,276,,276,276,276,276',
'276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276,276',
'276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276,,,,,,',
',,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276,,,',
',276,276,276,276,276,276,,,,276,276,276,,,,,,276,,276,276,276,276,,',
'276,276,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32',
'32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,',
'32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32',
',,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32',
'32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33',
',33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,',
',33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,283',
'283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283',
'283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283',
'283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283',
',,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,,,,,,,283,,,283,283,283,,,283,283,34,34,34,,34,,,,34,34,,,,34,,34',
'34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34',
'34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,',
'34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34',
',,,,,,34,,34,34,34,34,,,34,34,285,285,285,,285,,,,285,285,,,,285,,285',
'285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,',
',285,,,285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285',
'285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,285',
',,,,285,285,285,285,285,285,,,,285,285,,,,,,,285,,,285,285,285,,,285',
'285,287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287,287,287',
',,,,,287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287',
'287,287,287,,287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287',
',,287,,,287,287,,,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287',
',,,287,287,,,,,,,287,,,287,287,287,,,287,287,289,289,289,,289,,,,289',
'289,,,,289,,289,289,289,289,289,289,289,,,,,,289,289,289,289,289,289',
'289,,,289,,,,,,,289,,,289,289,289,289,289,289,289,289,,289,289,289,',
'289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,,289,,',
',,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289,,,,,,,289,',
',289,289,289,,,289,289,290,290,290,,290,,,,290,290,,,,290,,290,290,290',
'290,290,290,290,,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290',
'290,290,290,290,290,290,290,,290,290,290,,290,290,,290,290,290,,,,,',
',,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290',
'290,290,290,290,290,,,,290,290,,,,,,,290,,,290,290,290,,,290,290,296',
'296,296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,',
'296,296,296,296,296,296,296,,,296,,,,,,296,296,,296,296,296,296,296',
'296,296,296,296,,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,',
',,296,,,296,,,296,296,,,296,,296,,,,296,,,,,,,,296,,,,,296,296,296,296',
'296,296,,,,296,296,,,,,,,296,,,296,296,296,,,296,296,37,37,37,,37,,',
',37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,',
',,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,',
',,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,',
',37,37,,,,,,,37,,,37,37,37,,,37,37,854,854,854,,854,,,,854,854,,,,854',
',854,854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854,,,854',
',,,,,,854,,,854,854,854,854,854,854,854,854,,854,854,854,,854,854,,854',
'854,854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,,854,,,,,,854,,,,,,',
',854,,,,,854,854,854,854,854,854,,,,854,854,,,,,,,854,,,854,854,854',
',,854,854,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,867,867',
'867,,867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867',
'867,867,867,867,867,,,867,,,,,,,867,,,867,867,867,867,867,867,867,867',
',867,867,867,,867,867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867',
'867,,,867,,,,,,867,,,,,,,,867,,,,,867,867,867,867,867,867,,,,867,867',
',,,,,,867,,,867,867,867,,,867,867,302,302,302,,302,,,,302,302,,,,302',
',302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302',
',,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,,302,302,,',
',302,,,,,,,,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,',
'302,302,302,302,302,302,,,,302,302,,,,302,,,302,,,302,302,302,,,302',
'302,885,885,885,,885,,,,885,885,,,,885,,885,885,885,885,885,885,885',
',,,,,885,885,885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885,885',
'885,885,885,885,885,885,885,,885,885,,885,885,885,,,,,,,,,,,,,,,,,,',
',885,,,885,,,885,885,,,885,,,,885,,885,,,,,,,,885,,,,,885,885,885,885',
'885,885,,,,885,885,,,,,,,885,,885,885,885,885,,,885,885,886,886,886',
',886,,,,886,886,,,,886,,886,886,886,886,886,886,886,,,,,,886,886,886',
'886,886,886,886,,,886,,,,,,,886,,,886,886,886,886,886,886,886,886,,886',
'886,886,,886,886,,886,886,886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886',
',,886,,,,,,886,,,,,,,,886,,,,,886,886,886,886,886,886,,,,886,886,,,',
',,,886,,,886,886,886,,,886,886,901,901,901,,901,,,,901,901,,,,901,,901',
'901,901,901,901,901,901,,,,,,901,901,901,901,901,901,901,,,901,,,,,',
',901,,,901,901,901,901,901,901,901,901,,901,901,901,,901,901,,,,901',
',,,,,,,,,,,,,,,,,,,901,,,901,,,901,901,,,901,,,,,,,,,,,,,,,,,,,901,901',
'901,901,901,901,,,,901,901,,,,,,,901,,,901,901,901,,,901,901,913,913',
'913,,913,,,,913,913,,,,913,,913,913,913,913,913,913,913,,,,,,913,913',
'913,913,913,913,913,,,913,,,,,,,913,,,913,913,913,913,913,913,913,913',
',913,913,913,,913,913,,,,913,,,,,,,,,,,,,,,,,,,,913,,,913,,,913,913',
',,913,,,,,,,,,,,,,,,,,,,913,913,913,913,913,913,,,,913,913,,,,,,,913',
',,913,913,913,,,913,913,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,938,938,938,,938,,,,938,938,,,,938,,938,938,938,938,938,938',
'938,,,,,,938,938,938,938,938,938,938,,,938,,,,,,,938,,,938,938,938,938',
'938,938,938,938,,938,938,938,,938,938,,938,938,938,,,,,,,,,,,,,,,,,',
',,938,,,938,,,938,938,,,938,,938,,,,938,,,,,,,,938,,,,,938,938,938,938',
'938,938,,,,938,938,,,,,,,938,,,938,938,938,,,938,938,319,319,319,,319',
',,,319,319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319',
'319,319,319,,,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319',
'319,,319,319,,,,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,',
',,,,,,,,,,,,,,,319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319,319',
'319,,,319,319,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,',
',46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46',
'46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46',
',,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46',
'47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47',
'47,47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47',
'47,,,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47',
'47,47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,327,327,327,,327',
',,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327,327',
'327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327',
'327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,327,,327,327',
',,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,',
',,,327,,,327,327,327,,,327,327,61,61,61,,61,,,,61,61,,,,61,,61,61,61',
'61,61,61,61,,,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61',
'61,61,61,,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61',
'61,,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61',
',,61,61,61,,,61,61,1013,1013,1013,,1013,,,,1013,1013,,,,1013,,1013,1013',
'1013,1013,1013,1013,1013,,,,,,1013,1013,1013,1013,1013,1013,1013,,,1013',
',,,,,,1013,,,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013,1013',
'1013,,1013,1013,,1013,1013,1013,,,,,,,,,,,,,,,,,,,,1013,,,1013,,,1013',
'1013,,,1013,,1013,,1013,,1013,,,,,,,,1013,,,,,1013,1013,1013,1013,1013',
'1013,,,,1013,1013,,,,,,,1013,,1013,1013,1013,1013,,,1013,1013,346,346',
'346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346',
'346,346,346,346,346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346',
',346,346,346,,346,346,,346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346',
'346,,,346,,,,,,346,,,,,,,,346,,,,,346,346,346,346,346,346,,,,346,346',
',,,,,,346,,,346,346,346,,,346,346,347,347,347,,347,,,,347,347,,,,347',
',347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,,,347',
',,,,,,347,,,347,347,347,347,347,347,347,347,,347,347,347,,347,347,,347',
'347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,,347,,,,,,347,,,,,,',
',347,,,,,347,347,347,347,347,347,,,,347,347,,,,,,,347,,,347,347,347',
',,347,347,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62',
'62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62',
',62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,',
',,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,,,62,62',
'63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63',
'63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,63,,,,',
'63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,,,63,63,66,66,66,,66',
',,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66',
',,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,',
',,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66',
'66,66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,359,359,359,,359,,,,359,359',
',,,359,,359,359,359,359,359,359,359,,,,,,359,359,359,359,359,359,359',
',,359,,,,,,,359,,,359,359,359,359,359,359,359,359,,359,359,359,,359',
'359,,,,359,,,,,,,,,,,,,,,,,,,,359,,,359,,,359,359,,,359,,,,,,,,,,,,',
',,,,,,359,359,359,359,359,359,,,,359,359,,,,,,,359,,,359,359,359,,,359',
'359,361,361,361,,361,,,,361,361,,,,361,,361,361,361,361,361,361,361',
',,,,,361,361,361,361,361,361,361,,,361,,,,,,,361,,,361,361,361,361,361',
'361,361,361,,361,361,361,,361,361,,,,361,,,,,,,,,,,,,,,,,,,,361,,,361',
',,361,361,,,361,,,,,,,,,,,,,,,,,,,361,361,361,361,361,361,,,,361,361',
',,,,,,361,,,361,361,361,,,361,361,67,67,67,,67,,,,67,67,,,,67,,67,67',
'67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67',
'67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,',
'67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67',
',,67,67,67,,,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70',
',,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70',
'70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,',
'70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70',
',,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71',
'71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71',
'71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,',
',71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,8,8,8,8,8,,',
',8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8',
'8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,',
'8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,419,419,419',
',419,,,,419,419,,,,419,,419,419,419,419,419,419,419,,,,,,419,419,419',
'419,419,419,419,,,419,,,,,,,419,,,419,419,419,419,419,419,419,419,,419',
'419,419,,419,419,,419,419,419,,,,,,,,,,,,,,,,,,,,419,,,419,,,419,419',
',,419,,,,,,419,,,,,,,,419,,,,,419,419,419,419,419,419,,,,419,419,,,',
',,,419,,,419,419,419,,,419,419,460,460,460,,460,,,,460,460,,,,460,,460',
'460,460,460,460,460,460,,,,,,460,460,460,460,460,460,460,,,460,,,,,',
',460,,,460,460,460,460,460,460,460,460,460,460,460,460,,460,460,,460',
'460,460,,,,,,,,,,,,,,,,,,,,460,,,460,,,460,460,,,460,,460,,460,,460',
',,,,,,,460,,,,,460,460,460,460,460,460,,,,460,460,,,,,,,460,,460,460',
'460,460,,,460,460,462,462,462,,462,,,,462,462,,,,462,,462,462,462,462',
'462,462,462,,,,,,462,462,462,462,462,462,462,,,462,,,,,,,462,,,462,462',
'462,462,462,462,462,462,,462,462,462,,462,462,,462,462,462,,,,,,,,,',
',,,,,,,,,,462,,,462,,,462,462,,,462,,,,,,462,,,,,,,,462,,,,,462,462',
'462,462,462,462,,,,462,462,,,,,,,462,,,462,462,462,,,462,462,463,463',
'463,,463,,,,463,463,,,,463,,463,463,463,463,463,463,463,,,,,,463,463',
'463,463,463,463,463,,,463,,,,,,,463,,,463,463,463,463,463,463,463,463',
',463,463,463,,463,463,,463,463,463,,,,,,,,,,,,,,,,,,,,463,,,463,,,463',
'463,,,463,,,,,,463,,,,,,,,463,,,,,463,463,463,463,463,463,,,,463,463',
',,,,,,463,,,463,463,463,,,463,463,464,464,464,,464,,,,464,464,,,,464',
',464,464,464,464,464,464,464,,,,,,464,464,464,464,464,464,464,,,464',
',,,,,,464,,,464,464,464,464,464,464,464,464,,464,464,464,,464,464,,464',
'464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,,464,,,,,,464,,,,,,',
',464,,,,,464,464,464,464,464,464,,,,464,464,,,,,,,464,,,464,464,464',
',,464,464,114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114',
'114,114,,,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114',
'114,114,114,114,114,114,114,114,,114,114,114,,114,114,,114,114,114,',
',,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,',
',,,114,114,114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114',
'114,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119',
',,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119',
'119,119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119',
',,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119',
',,,119,119,,,,,,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120',
'120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120',
'120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,',
'120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,',
',,,120,,,,,,,,120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,',
',120,120,120,,,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121,121',
'121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121',
'121,121,121,121,121,121,121,,121,121,121,,121,121,,121,121,121,,,,,',
',,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121',
'121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121,122',
'122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122',
'122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122',
'122,,122,122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122',
',,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122',
'122,,,,,,,122,,,122,122,122,,,122,122,123,123,123,123,123,,,,123,123',
',,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123,123',
',,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123,123,123',
',123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,',
'123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123',
',,123,123,123,,,123,123,503,503,503,,503,,,,503,503,,,,503,,503,503',
'503,503,503,503,503,,,,,,503,503,503,503,503,503,503,,,503,,,,,,,503',
',,503,503,503,503,503,503,503,503,503,503,503,503,,503,503,,503,503',
'503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503,,,503,,503,,503,,503,,,,',
',,,503,,,,,503,503,503,503,503,503,,,,503,503,,,,,,,503,,503,503,503',
'503,,,503,503,506,506,506,,506,,,,506,506,,,,506,,506,506,506,506,506',
'506,506,,,,,,506,506,506,506,506,506,506,,,506,,,,,,,506,,,506,506,506',
'506,506,506,506,506,506,506,506,506,,506,506,,506,506,506,,,,,,,,,,',
',,,,,,,,,506,,,506,,,506,506,,,506,,,,506,,506,,,,,,,,506,,,,,506,506',
'506,506,506,506,,,,506,506,,,,,,,506,,506,506,506,506,,,506,506,508',
'508,508,,508,,,,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508',
'508,508,508,508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508',
'508,,508,508,508,,508,508,,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508',
',,508,508,,,508,,,,,,508,,,,,,,,508,,,,,508,508,508,508,508,508,,,,508',
'508,,,,,,,508,,,508,508,508,,,508,508,515,515,515,515,515,,,,515,515',
',,,515,,515,515,515,515,515,515,515,,,,,,515,515,515,515,515,515,515',
',,515,,,,,,515,515,,515,515,515,515,515,515,515,515,515,,515,515,515',
',515,515,,515,515,515,,,,,,,,,,,,,,,,,,,,515,,,515,,,515,515,,,515,',
'515,,,,515,,,,,,,,515,,,,,515,515,515,515,515,515,,,,515,515,,,,,,515',
'515,,,515,515,515,,,515,515,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,,,23,23,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522',
'522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522',
'522,522,522,522,522,,522,522,522,,522,522,,,,522,,,,,,,,,,,,,,,,,,,',
'522,,,522,,,522,522,,,522,,,,,,,,,,,,,,,,,,,522,522,522,522,522,522',
',,,522,522,,,,,,,522,,,522,522,522,,,522,522,524,524,524,,524,,,,524',
'524,,,,524,,524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524',
'524,,,524,,,,,,,524,,,524,524,524,524,524,524,524,524,524,524,524,524',
',524,524,,524,524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,',
'524,,524,,524,,,,,,,,524,,,,,524,524,524,524,524,524,,,,524,524,,,,',
',,524,,524,524,524,524,,,524,524,210,210,210,,210,,,,210,210,,,,210',
',210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210',
',,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210',
'210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,',
',,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210,210',
',,210,210,530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530',
'530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530',
'530,530,530,530,,530,530,530,,530,530,,,,530,,,,,,,,,,,,,,,,,,,,530',
',,530,,,530,530,,,530,,,,,,,,,,,,,,,,,,,530,530,530,530,530,530,,,,530',
'530,,,,,,,530,,,530,530,530,,,530,530,211,211,211,,211,,,,211,211,,',
',211,,211,211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,',
',211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211',
',211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,',
',,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211',
'211,,,211,211,533,533,533,,533,,,,533,533,,,,533,,533,533,533,533,533',
'533,533,,,,,,533,533,533,533,533,533,533,,,533,,,,,,,533,,,533,533,533',
'533,533,533,533,533,,533,533,533,,533,533,,533,533,533,,,,,,,,,,,,,',
',,,,,,533,,,533,,,533,533,,,533,,,,,,533,,,,,,,,533,,,,,533,533,533',
'533,533,533,,,,533,533,,,,,,,533,,,533,533,533,,,533,533,534,534,534',
',534,,,,534,534,,,,534,,534,534,534,534,534,534,534,,,,,,534,534,534',
'534,534,534,534,,,534,,,,,,,534,,,534,534,534,534,534,534,534,534,,534',
'534,534,,534,534,,534,534,534,,,,,,,,,,,,,,,,,,,,534,,,534,,,534,534',
',,534,,,,,,534,,,,,,,,534,,,,,534,534,534,534,534,534,,,,534,534,,,',
',,,534,,,534,534,534,,,534,534,538,538,538,,538,,,,538,538,,,,538,,538',
'538,538,538,538,538,538,,,,,,538,538,538,538,538,538,538,,,538,,,,,',
',538,,,538,538,538,538,538,538,538,538,,538,538,538,,538,538,,538,538',
'538,,,,,,,,,,,,,,,,,,,,538,,,538,,,538,538,,,538,,,,,,538,,,,,,,,538',
',,,,538,538,538,538,538,538,,,,538,538,,,,,,,538,,,538,538,538,,,538',
'538,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,544,544',
'544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544',
'544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544,544',
'544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,',
',544,544,,,544,,544,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,',
',544,544,,,,,,,544,,544,544,544,544,,,544,544,547,547,547,,547,,,,547',
'547,,,,547,,547,547,547,547,547,547,547,,,,,,547,547,547,547,547,547',
'547,,,547,,,,,,,547,,,547,547,547,547,547,547,547,547,547,547,547,547',
',547,547,,547,547,547,,,,,,,,,,,,,,,,,,,,547,,,547,,,547,547,,,547,',
',,,,547,,,,,,,,547,,,,,547,547,547,547,547,547,,,,547,547,,,,,,,547',
',547,547,547,547,,,547,547,216,216,216,,216,,,,216,216,,,,216,,216,216',
'216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216',
',,216,216,216,216,216,216,216,216,,216,216,216,,216,216,,216,216,216',
',,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216,,,',
',216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216,216,,,216,216',
'217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,',
',217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217',
'217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,',
'217,,,217,217,,,217,,217,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217',
',,,217,217,,,,,,,217,,,217,217,217,,,217,217,219,219,219,,219,,,,219',
'219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219',
'219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,',
'219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,',
',,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,',
',219,219,219,,,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220,220',
'220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220',
'220,220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,',
',,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220',
'220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220,572',
'572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572,,,,,,572',
'572,572,572,572,572,572,,,572,,,,,,,572,,,572,572,572,572,572,572,572',
'572,,572,572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572',
',,572,572,,,572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572,,,,572',
'572,,,,,,,572,,,572,572,572,,,572,572,221,221,221,,221,,,,221,221,,',
',221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,',
',221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221',
',221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,',
',,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,221,,,,,,221,,,221',
'221,221,,,221,221,593,593,593,,593,,,,593,593,,,,593,,593,593,593,593',
'593,593,593,,,,,,593,593,593,593,593,593,593,,,593,,,,,,,593,,,593,593',
'593,593,593,593,593,593,593,593,593,593,,593,593,,593,593,593,,,,,,',
',,,,,,,,,,,,,593,,,593,,,593,593,,,593,,593,,593,,593,,,,,,,,593,,,',
',593,593,593,593,593,593,,,,593,593,,,,,,,593,,593,593,593,593,,,593',
'593,605,605,605,,605,,,,605,605,,,,605,,605,605,605,605,605,605,605',
',,,,,605,605,605,605,605,605,605,,,605,,,,,,,605,,,605,605,605,605,605',
'605,605,605,,605,605,605,,605,605,,605,605,605,,,,,,,,,,,,,,,,,,,,605',
',,605,,,605,605,,,605,,,,,,605,,,,,,,,605,,,,,605,605,605,605,605,605',
',,,605,605,,,,,,,605,,,605,605,605,,,605,605,609,609,609,,609,,,,609',
'609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609,609,609,609,609',
'609,,,609,,,,,,,609,,,609,609,609,609,609,609,609,609,,609,609,609,',
'609,609,,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609,609,,,609,,',
',,,609,,,,,,,,609,,,,,609,609,609,609,609,609,,,,609,609,,,,,,,609,',
',609,609,609,,,609,609,232,232,232,,232,,,,232,232,,,,232,,232,232,232',
'232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232',
'232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,',
',,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232',
'232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232,638',
'638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,,,638',
'638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638,638',
'638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,,638',
',,638,638,,,638,,638,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638,',
',,638,638,,,,,,,638,,,638,638,638,,,638,638,639,639,639,,639,,,,639',
'639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639,639,639',
'639,,,639,,,,,,,639,,,639,639,639,639,639,639,639,639,,639,639,639,',
'639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,,,639,639,,,639,,',
',,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,,639,639,,,,,,,639,',
',639,639,639,,,639,639,642,642,642,,642,,,,642,642,,,,642,,642,642,642',
'642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,,,642,,,642',
'642,642,642,642,642,642,642,642,642,642,642,,642,642,,642,642,642,,',
',,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,642,,642,,642,,,,,,,,642',
',,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642,642,642,642,,',
'642,642,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643',
'643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643',
'643,643,643,643,643,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,',
',,,,,643,,,643,,,643,643,,,643,,,,643,,643,,,,,,,,643,,,,,643,643,643',
'643,643,643,,,,643,643,,,,,,,643,,643,643,643,643,,,643,643,644,644',
'644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644',
'644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644',
',644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644',
'644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644',
',,,,,,644,,,644,644,644,,,644,644,645,645,645,,645,,,,645,645,,,,645',
',645,645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645',
',,,,,,645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,,645',
'645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,645,,,,,,',
',645,,,,,645,645,645,645,645,645,,,,645,645,,,,,,,645,,,645,645,645',
',,645,645,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235',
'235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235',
'235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,',
',,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235',
'235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235,650,650,650,,650',
',,,650,650,,,,650,,650,650,650,650,650,650,650,,,,,,650,650,650,650',
'650,650,650,,,650,,,,,,,650,,,650,650,650,650,650,650,650,650,,650,650',
'650,,650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650',
',,,,,650,,,,,,,,650,,,,,650,650,650,650,650,650,,,,650,650,,,,,,,650',
',,650,650,650,,,650,650,651,651,651,,651,,,,651,651,,,,651,,651,651',
'651,651,651,651,651,,,,,,651,651,651,651,651,651,651,,,651,,,,,,,651',
',,651,651,651,651,651,651,651,651,,651,651,651,,651,651,,651,651,651',
',,,,,,,,,,,,,,,,,,,651,,,651,,,651,651,,,651,,,,,,651,,,,,,,,651,,,',
',651,651,651,651,651,651,,,,651,651,,,,,,,651,,,651,651,651,,,651,651',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,655,655,655,,655,,,,655',
'655,,,,655,,655,655,655,655,655,655,655,,,,,,655,655,655,655,655,655',
'655,,,655,,,,,,,655,,,655,655,655,655,655,655,655,655,,655,655,655,',
'655,655,,655,655,655,,,,,,,,,,,,,,,,,,,,655,,,655,,,655,655,,,655,,',
',,,655,,,,,,,,655,,,,,655,655,655,655,655,655,,,,655,655,,,,,,,655,',
',655,655,655,,,655,655,656,656,656,,656,,,,656,656,,,,656,,656,656,656',
'656,656,656,656,,,,,,656,656,656,656,656,656,656,,,656,,,,,,,656,,,656',
'656,656,656,656,656,656,656,,656,656,656,,656,656,,656,656,656,,,,,',
',,,,,,,,,,,,,,656,,,656,,,656,656,,,656,,,,,,656,,,,,,,,656,,,,,656',
'656,656,656,656,656,,,,656,656,,,,,,,656,,,656,656,656,,,656,656,237',
'237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237',
'237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237',
'237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237',
',,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237',
'237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238,238,,',
',238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238,238,',
',238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,,238,238',
',238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,',
',,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238',
'238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240,240,240',
',240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240',
'240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240',
'240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240',
',,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,',
',,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241',
'241,680,680,680,,680,,,,680,680,,,,680,,680,680,680,680,680,680,680',
',,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680,680,680,680',
'680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,,,,,,,,680',
',,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680,680,680,680,680',
',,,680,680,,,,,,,680,,,680,680,680,,,680,680,683,683,683,,683,,,,683',
'683,,,,683,,683,683,683,683,683,683,683,,,,,,683,683,683,683,683,683',
'683,,,683,,,,,,,683,,,683,683,683,683,683,683,683,683,,683,683,683,',
'683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683,,,683,683,,,683,,',
',,,683,,,,,,,,683,,,,,683,683,683,683,683,683,,,,683,683,,,,,,,683,',
',683,683,683,,,683,683,686,686,686,,686,,,,686,686,,,,686,,686,686,686',
'686,686,686,686,,,,,,686,686,686,686,686,686,686,,,686,,,,,,,686,,,686',
'686,686,686,686,686,686,686,,686,686,686,,686,686,,,,686,,,,,,,,,,,',
',,,,,,,,686,,,686,,,686,686,,,686,,,,,,,,,,,,,,,,,,,686,686,686,686',
'686,686,,,,686,686,,,,,,,686,,,686,686,686,,,686,686,242,242,242,,242',
',,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242',
'242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242',
'242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242',
',,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242',
',,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243,243',
'243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,,,243',
',,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243,243',
',,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,',
',243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243,243',
'244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,',
',244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244',
'244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,',
'244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,697',
'697,697,,697,,,,697,697,,,,697,,697,697,697,697,697,697,697,,,,,,697',
'697,697,697,697,697,697,,,697,,,,,,,697,,,697,697,697,697,697,697,697',
'697,,697,697,697,,697,697,,,,697,,,,,,,,,,,,,,,,,,,,697,,,697,,,697',
'697,,,697,,,,,,,,,,,,,,,,,,,697,697,697,697,697,697,,,,697,697,,,,,',
',697,,,697,697,697,,,697,697,247,247,247,,247,,,,247,247,,,,247,,247',
'247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,',
',247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247',
'247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247',
',,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247',
'247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248',
',,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248',
'248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248',
',,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248',
',,,248,248,,,,,,,248,,,248,248,248,,,248,248,702,702,702,,702,,,,702',
'702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702,702,702,702',
'702,,,702,,,,,,,702,,,702,702,702,702,702,702,702,702,,702,702,702,',
'702,702,,702,702,702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,702,,,702,,702',
',,,702,,,,,,,,702,,,,,702,702,702,702,702,702,,,,702,702,,,,,,,702,',
',702,702,702,,,702,702,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,720',
'720,720,,720,,,,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720',
'720,720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720,720',
'720,,720,720,720,,720,720,,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720',
',,720,720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720,720,720,720,,,,720',
'720,,,,,,,720,,,720,720,720,,,720,720,250,250,250,,250,,,,250,250,,',
',250,,250,250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,',
',250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250',
',250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,',
',,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250',
'250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251',
'251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251',
'251,251,251,251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,',
',,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251',
'251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251,251,252,252,252',
',252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252',
'252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252',
'252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252',
',,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,',
',,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253',
'253,253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,',
',253,,,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253',
'253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253',
',,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253',
'253,740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740,740,740',
',,,,,740,740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740',
'740,740,740,,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,,,,,,,740',
',,740,,,740,740,,,740,,740,,,,740,,,,,,,,740,,,,,740,740,740,740,740',
'740,,,,740,740,,,,,,,740,,,740,740,740,,,740,740,254,254,254,,254,,',
',254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254',
'254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254',
',254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,',
',,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254',
',,254,254,254,,,254,254,762,762,762,762,762,762,762,762,762,762,762',
'762,762,762,762,762,762,762,762,762,762,762,762,762,,,,762,762,762,762',
'762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,762,762,,,762',
',,,,,,,,762,762,,762,762,762,762,762,762,762,,,762,762,,,,762,762,762',
'762,,,,,,,,,,,,,,762,762,,762,762,762,762,762,762,762,762,762,762,762',
',,762,,,,,,,,,,,,,,,,,,,,762,635,635,635,635,635,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,635,635,635,635,635,,,,635,635,635',
'635,635,635,635,635,635,635,,,,,,635,635,635,635,635,635,635,635,635',
',,635,,,,,,,,,635,635,,635,635,635,635,635,635,635,,,635,635,,,,635',
'635,635,635,,,,,,,,,,,,,,635,635,,635,635,635,635,635,635,635,635,635',
'635,635,,,635,635,,,,,,,,,,635,,,,,,,,,635,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91',
'91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91',
'91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91',
'91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12',
'12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12',
',12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12',
'12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,410,410',
'410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410,410',
'410,410,410,410,410,,,,410,410,410,410,410,410,410,410,410,410,,,,,',
'410,410,410,410,410,410,410,410,410,,,410,,,,,,,,,410,410,,410,410,410',
'410,410,410,410,,,410,410,,,,410,410,410,410,,,,,,,,,,,,,,410,410,,410',
'410,410,410,410,410,410,410,410,410,410,,,410,410,,,,,,,,,,410,,,,,',
',,,410,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74',
'74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74',
'74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,',
',,,,,,,,,,,,,,,,,74,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11',
'11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11',
'11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11',
'11,,,11,11,,,,492,,,,,,11,492,492,492,,,492,492,492,11,492,891,,891',
'891,891,891,891,,492,492,,,,,,,891,,,492,492,,492,492,492,492,492,,',
'714,,714,714,714,714,714,,,891,,,,,,,714,,891,891,891,891,,,,,,,,,,',
'492,,,,,,714,492,,,,,492,492,,714,714,714,714,,,,891,,1014,1014,,,1014',
',,,,,492,492,,1014,1014,,1014,1014,1014,1014,1014,1014,1014,,492,1014',
'1014,714,,492,1014,1014,1014,1014,,,,,,1014,,,,,,,,1014,1014,,1014,1014',
'1014,1014,1014,1014,1014,1014,1014,1014,1014,,,1014,,,,,1015,1015,,',
'1015,,,,,,,,,1015,1015,1014,1015,1015,1015,1015,1015,1015,1015,,,1015',
'1015,,,,1015,1015,1015,1015,,,,,,1015,,,,,,,,1015,1015,,1015,1015,1015',
'1015,1015,1015,1015,1015,1015,1015,1015,,,1015,,,,,594,594,,,594,,,',
',,,,,594,594,1015,594,594,594,594,594,594,594,,,594,594,,,,594,594,594',
'594,,,,,,594,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,594',
'594,,,594,,,,,751,751,,,751,,,,,,,,,751,751,594,751,751,751,751,751',
'751,751,,,751,751,,,,751,751,751,751,,,,,,751,,,,,,,,751,751,,751,751',
'751,751,751,751,751,751,751,751,751,,948,751,948,948,948,948,948,1002',
',1002,1002,1002,1002,1002,,,948,,,,,751,,1002,1004,,1004,1004,1004,1004',
'1004,,,,,,,,948,948,1004,,,,,1002,,948,948,948,948,,,,,,1002,1002,,',
',342,1004,342,342,342,342,342,,,,,,1004,1004,,925,342,925,925,925,925',
'925,948,,,,,,,1002,,925,,,,,,,342,342,,,,,,,1004,342,342,342,342,,923',
'925,923,923,923,923,923,,,,,,925,925,,,923,,,,,,,,,,,,,,,342,,,,,,,923',
'458,458,,,458,,,925,,,923,923,,458,458,,458,458,458,458,458,458,458',
',,458,458,,,,458,458,458,458,,,,,,458,,,,,923,,,458,458,,458,458,458',
'458,458,458,458,458,458,458,458,,,458,,,,,459,459,,,459,,,,,,,,,459',
'459,458,459,459,459,459,459,459,459,,,459,459,,,,459,459,459,459,,,',
',,459,,,,,,,,459,459,,459,459,459,459,459,459,459,459,459,459,459,,921',
'459,921,921,921,921,921,,,535,535,,,535,,,921,,,,,459,535,535,,535,535',
'535,535,535,535,535,,,535,535,,,921,535,535,535,535,,,,,,535,921,921',
',,,,,535,535,,535,535,535,535,535,535,535,535,535,535,535,,1048,535',
'1048,1048,1048,1048,1048,,,,,,921,,,,1048,,,,718,535,718,718,718,718',
'718,716,,716,716,716,716,716,,,718,,1048,,,,,716,,,,,,1048,1048,,,,',
',,,718,,,,,,,716,,,,718,718,,,,716,716,716,716,,,,,,1048,998,,998,998',
'998,998,998,,,,,263,263,,,263,998,,,718,,,,,263,263,716,263,263,263',
'263,263,263,263,,,263,263,998,,,263,263,263,263,,,998,998,998,998,,',
',,,,,263,263,,263,263,263,263,263,263,263,263,263,263,263,,607,263,607',
'607,607,607,607,,,,998,,,,,,607,,,,1000,263,1000,1000,1000,1000,1000',
',,,,,,,,,1000,,607,607,,,,,,,,607,607,607,607,,,,,,,,1000,965,965,,',
'965,,,,,,1000,1000,,965,965,,965,965,965,965,965,965,965,,607,965,965',
',,,965,965,965,965,,,,,,965,,,,,1000,,,965,965,,965,965,965,965,965',
'965,965,965,965,965,965,,,965,,,,,595,595,,,595,,,,,,,,,595,595,965',
'595,595,595,595,595,595,595,,,595,595,,,,595,595,595,595,,,,,,595,,',
',,,,,595,595,,595,595,595,595,595,595,595,595,595,595,595,,,595,,,,',
'525,525,,,525,,,,,,,,,525,525,595,525,525,525,525,525,525,525,,,525',
'525,,,,525,525,525,525,,,,,,525,,,,,,,,525,525,,525,525,525,525,525',
'525,525,525,525,525,525,,667,525,667,667,667,667,667,760,,760,760,760',
'760,760,,,667,,,,,525,,760,552,,552,552,552,552,552,,,,,,,,667,,552',
',,,,760,,667,667,667,667,,,,760,760,760,760,,,,,552,,,,,,,,,552,552',
'552,552,667,,,215,215,,,215,667,,,,,,,760,215,215,,215,215,215,215,215',
'215,215,,,215,215,,,552,215,215,215,215,,,,,,,,,,,,,,215,215,,215,215',
'215,215,215,215,215,215,215,215,215,,,215,,,,,526,526,,,526,,,,,,,,',
'526,526,215,526,526,526,526,526,526,526,,,526,526,,,,526,526,526,526',
',,,,,526,,,,,,,,526,526,,526,526,526,526,526,526,526,526,526,526,526',
',,526,,,,,214,214,,,214,,,,,,,,,214,214,526,214,214,214,214,214,214',
'214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214',
'214,214,214,214,214,214,214,214,,,214,,,,,213,213,,,213,,,,,,,,,213',
'213,214,213,213,213,213,213,213,213,,,213,213,,,,213,213,213,213,,,',
',,213,,,,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,',
'213,,,,,750,750,,,750,,,,,,,,,750,750,213,750,750,750,750,750,750,750',
',,750,750,,,,750,750,750,750,,,,,,750,,,,,,,,750,750,,750,750,750,750',
'750,750,750,750,750,750,750,,,750,,,,,536,536,,,536,,,,,,,,,536,536',
'750,536,536,536,536,536,536,536,,,536,536,,,,536,536,536,536,,,,,,536',
',,,,,,,536,536,,536,536,536,536,536,536,536,536,536,536,536,,,536,,',
',,,,,,,,,,,,,,,,,536' ]
        racc_action_check = arr = ::Array.new(26686, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1327,  3114,    52,   nil,   640,   nil,   nil, 13632,   997,
   nil, 24930, 24531,   -10,   nil,     7,    83,   453,   707,    52,
   255,   nil,   104, 15872,  2409,   187,   nil,   482,   nil,   197,
  1304,   790,  8592,  8732,  9012,   nil,  2691,  9852, 10132,   nil,
   120,   -81,   625,   225,   253, 11112, 11532, 11672,   176,   854,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   915,
   nil, 11952, 12512, 12652,   195,   nil, 12792, 13212,   nil,   nil,
 13352, 13492,   270,   nil, 24797,   nil,   nil,   nil,   nil,   nil,
   192,   nil,   nil,   nil,   nil,   nil,   nil,   227,   293,   351,
   359, 24398,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 14472,   nil,   nil,   nil,   nil, 14612,
 14752, 14892, 15032, 15172,   387,   nil,   426,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   376,   nil,  4665,
 16292, 16572, 17132, 26415, 26347, 26211, 17552, 17692,  5792, 17832,
 17972, 18252,   nil,   nil,   729,   260,   -86,   470,   167,   390,
   461,   nil, 18812,  1563,   486, 19792, 20212, 20632, 20772, 20912,
 21052, 21192, 21752, 21892, 22032, 22172, 22312, 22592, 22732, 23012,
 23292, 23432, 23572, 23712, 23992,  6212,  6632,  7472,  7612,  7752,
  7892,   nil,   nil, 25814,   nil,   nil,   481,  8032,   nil,   505,
   nil,   nil,   nil,  8172,   nil,   nil,  8452,   nil,  3255,   nil,
   477,   483,   nil,  8872,   528,  9152,   nil,  9292,   nil,  9432,
  9572,   nil,   nil,   556,   nil,  1010,  9712,   507,  2973,   528,
   583,   555, 10412,  4101,   568,   624,   699,   635,   743,   nil,
   611,   587,   193,   nil,   nil,   nil,   644,   372,   612, 11392,
   nil,   159,   685,   761,   nil,   695,   nil, 11812,  2268,   597,
   nil,   673,   nil,   295,   -76,   673,   669,   nil,   420,   699,
   nil,   nil, 25427,   302,   125,    52, 12232, 12372,   398,   772,
   658,   -19,    21,   393,   736,     9,   768,   nil,   nil, 12932,
   nil, 13072,   459,   342,   337,   484,   522,   551,   618,   321,
   578,   nil,   553,   nil,   nil,   nil,   nil,   nil,   577,   nil,
   451,   nil,   316,   nil,   677,   386,   nil,   678,   554,   nil,
   682,   -42,   nil,   689,   -25,   nil,   688,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1845,
 24664,   nil,   nil,   nil,   nil,   700,   nil,   nil,   686, 13772,
   693,   nil,   nil,  1704,   698,   nil,   nil,   706,   709,   145,
   362,  1047,   nil,   nil,   nil,   389,   132,   751,   nil,   nil,
  1429,  1172,   753,   nil,   nil,   nil,  3396,   nil,   708,   nil,
   nil,  1563,   nil,   nil,   nil,   nil,   -14,   nil, 25518, 25586,
 13912,   331, 14052, 14192, 14332,  3960,  5370,   -48,   582,   787,
   804,   809,   810,  5511,  5652,  5112,  4806,  1377,  5088,  1120,
  1254,  4524,  4947,  4101,  4242,  4383,  1062,   349,  5229,  4665,
  3819,   177, 25049,   nil,   nil,   nil,   nil,   -55,   153,   753,
   756,   nil,   nil, 15312,   nil,   nil, 15452,   nil, 15592,   nil,
   250,   nil,   nil,   nil,   nil, 15732,  1254,   762,   761,   nil,
   nil,   763, 16012,   774, 16152, 26071, 26279,   467,   816,   nil,
 16432,   778,   nil, 16712, 16852, 25657, 26551,  2127, 16992,   906,
   911,   799,   nil,   nil, 17272,   nil,   nil, 17412,   nil,   nil,
   nil,   185, 26157,   nil,   797,   801,   nil,   806,   815,   816,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   803,  1051,
   nil,   nil, 18112,   nil,   nil,   nil,   898,   nil,   nil,   nil,
   899,   nil,   nil,   902,  3396,   948,   nil,  3255,    60,    35,
   948,   957,   nil, 18392, 25236, 26003,    25,   nil,   297,   392,
    45,   nil,   425,   nil,    16, 18532,   nil, 25876,   nil, 18672,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   289,   nil,   nil,   314,   nil,   nil,   nil,   838,   nil,
   nil,   839,   nil,   857,   nil, 24265,   nil,   842, 18952, 19092,
   414,   879, 19232, 19372, 19512, 19652,   881,   nil,   nil,   nil,
 19932, 20072,   883,   nil,   nil, 20352, 20492,   nil,   138,   -84,
   514,   652,   870,  1845,   873,   nil,   nil, 26133,   nil,   nil,
   975,     6,   -71,   nil,   nil,   nil,   nil,   875,   nil,   917,
 21332,   nil,   nil, 21472,  1267,  -119, 21612,   878,   nil,   882,
    -9,    33,   923,    98,   481,   925,   888, 22452,  2550,   958,
    -7,  1013, 22872,   nil,   nil,   252,   nil,  2550,  4947,   904,
   212,   nil,   nil,   644, 25044,   nil, 25746,   nil, 25739,   nil,
 23152,   nil,  1011,   nil,   928,   266,   943,   nil,   nil,   nil,
   nil,   590,   nil,  1056,   nil,   nil,   nil,   nil,  1062,   nil,
 23852,   949,   166,    69,   131,    66,  5932,   nil,   485,   nil,
 26483, 25304,  6072,   nil,   nil,   nil,   607,   414,  3537,  4524,
 26140,   281, 24132,   241,   791,  5088,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   947,  6352,  2691,  6492,   nil,   948,   nil,
  2832,   nil,  2268,   nil,   nil,  3537,   nil,  1986,   nil,  3678,
  6772,  6912,  7052,  7192,   160,  7332,   951,   952,   nil,   953,
   956,   962,   nil,   983,   967,   963,   952,  8312,   nil,   nil,
  4806,   nil,   nil,   nil,  5652,  5511,   nil,   nil,   nil,   974,
    23,   nil,   nil,  1099,   nil,  5229,   981,  1023,   nil,   nil,
   nil,  1000,  1119,  1008,  1007,   nil,   nil,   nil,  1010,  1014,
   nil,  1016,  1018,   nil,  1028,   nil,   nil,  1036,   883,  1034,
   857,   nil,  1155,   nil,  9992,  1160,  3678,  3819,   nil,    53,
    35,    66,   265,   554,   nil,  1044,  4242, 10272,   nil,   524,
  1162,  1166,  1051,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  1069,  1054,   nil,  2973, 10552, 10692,  3114,   313,   nil,
   nil, 25015,   nil,   nil,  1235,   nil,   978,   nil,   nil,  1085,
  1179, 10832,   740,  1141,  1192,  3960,  1089,  1196,   nil,  2832,
   nil,   nil,   122, 10972,   nil,   nil,   nil,   nil,   nil,   616,
   nil, 25648,   nil, 25479,   nil, 25442,   nil,   nil,   nil,   nil,
   388,  1138,  1077,   nil,    32,   nil,  1198,  1201, 11252,  2409,
   nil,   nil,  1207,   504,   nil,   nil,   nil,   nil, 25366,   nil,
  1088,   nil,   nil,  1089,  1091,  1093,  1099,   nil,  1106,   nil,
   451,   nil,   nil,   nil,   762, 25935,   nil,   nil,  1124,   nil,
   nil,   nil,  5370,    34,   -10,   824,  1183,   175,   nil,  1124,
  1125,  1129,  1130,  1132,  1044,  1133,   922,  1704,   nil,   nil,
   nil,    18,  4383,   nil,   nil,  2127,  1986,   nil, 25803,   nil,
 25896,   nil, 25373,   nil, 25390,   nil,   nil,   nil,   908,  1174,
  1175,   nil,  1261, 12092, 25100, 25168,    54,   719,   nil,   nil,
   nil,   nil,   653,  1141,   551,   nil,   nil,   nil,  1263,  1265,
  1273,  1158,  1185,  1190,  1193,   nil,   nil,  1197,   124,    50,
   103,    -1,  1196,  1197,   nil,   nil,   nil,   nil, 25719,   nil,
   nil,   nil,   nil,   141,   nil,  -108,   nil ]

racc_action_default = [
    -1,  -627,  -626,  -627,    -2,  -613,    -4,    -5,  -627,    -8,
    -9,  -627,  -627,  -627,   -29,  -627,  -627,  -627,  -280,  -627,
   -40,   -43,  -615,  -627,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -292,  -331,  -332,   -69,  -626,   -73,   -81,   -83,
  -627,  -515,  -516,  -627,  -627,  -627,  -627,  -627,  -615,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -603,
  -282,  -615,  -626,  -626,  -300,  -403,  -627,  -627,  -305,  -308,
  -613,  -627,  -316,  -323,  -627,  -333,  -334,  -446,  -447,  -448,
  -449,  -450,  -451,  -626,  -454,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -491,  -497,  -499,  -500,  -501,  -502,  -601,  -504,
  -505,  -602,  -507,  -508,  -509,  -510,  -511,  -512,  -513,  -514,
  -519,  -520,  1057,    -3,  -614,  -622,  -623,  -624,    -7,  -627,
  -627,  -627,  -627,  -627,  -627,   -17,  -627,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -626,
  -627,  -627,  -626,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -615,  -616,   -47,  -627,  -515,  -516,  -627,  -280,  -627,
  -627,  -230,  -627,  -626,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -409,  -412,  -627,  -611,  -612,   -58,  -627,  -299,  -627,
  -427,  -430,   -64,  -626,  -424,   -65,  -615,   -66,  -239,  -252,
  -626,  -626,  -256,  -627,  -262,  -627,  -626,  -491,  -594,  -627,
  -627,   -67,   -68,  -613,   -13,   -14,  -627,   -71,  -626,  -615,
  -627,   -74,   -77,  -626,   -89,   -90,  -627,  -627,   -97,  -292,
  -295,  -615,  -416,  -331,  -332,  -335,  -425,  -627,   -79,  -627,
   -85,  -289,  -498,  -627,  -215,  -216,  -231,  -627,  -626,  -285,
  -284,  -627,  -240,  -619,  -619,  -627,  -627,  -592,  -619,  -627,
  -301,  -302,  -547,   -49,  -627,  -627,  -627,  -627,  -613,  -627,
  -614,  -515,  -516,  -627,  -627,  -280,  -627,  -356,  -357,  -627,
  -319,  -627,  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,
  -187,  -326,  -627,  -515,  -516,  -589,  -590,  -452,  -627,  -475,
  -627,  -477,  -627,  -479,  -627,  -627,  -459,  -627,  -627,  -465,
  -627,  -627,  -471,  -627,  -627,  -473,  -627,  -490,  -492,  -493,
  -494,  -495,    -6,  -625,   -23,   -24,   -25,   -26,   -27,  -626,
  -627,   -19,   -20,   -21,  -122,  -627,   -30,   -39,  -267,  -627,
  -627,  -266,   -31,  -197,  -615,  -247,  -248,  -626,  -626,  -604,
  -605,  -257,  -422,  -606,  -607,  -605,  -604,  -257,  -421,  -423,
  -606,  -607,  -626,  -604,  -605,   -37,  -205,   -38,  -627,   -41,
   -42,  -195,  -262,   -44,   -45,   -46,  -615,  -298,  -627,  -627,
  -626,  -289,  -627,  -627,  -627,  -206,  -207,  -208,  -209,  -210,
  -211,  -212,  -213,  -217,  -218,  -219,  -220,  -221,  -222,  -223,
  -224,  -225,  -226,  -227,  -228,  -229,  -232,  -233,  -234,  -235,
  -615,  -626,  -257,   -54,   -59,  -258,  -417,  -626,  -626,  -615,
  -615,  -294,  -253,  -627,  -261,  -254,  -627,  -259,  -627,  -263,
  -627,  -599,  -597,  -600,   -12,  -614,   -16,  -615,   -70,  -287,
   -86,   -75,  -627,  -615,  -626,  -627,  -627,   -96,  -627,  -498,
  -627,   -82,   -87,  -627,  -627,  -627,  -627,  -236,  -627,  -438,
  -627,  -615,  -617,  -241,  -621,  -620,  -243,  -621,  -290,  -291,
  -593,  -627,  -547,  -406,  -588,  -588,  -530,  -532,  -532,  -532,
  -546,  -548,  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -627,
  -559,  -561,  -563,  -568,  -570,  -571,  -573,  -578,  -580,  -581,
  -583,  -584,  -585,  -627,  -626,  -347,  -348,  -626,  -627,  -627,
  -627,  -627,  -433,  -626,  -627,  -627,  -289,  -313,  -107,  -108,
  -627,  -110,  -627,  -280,  -627,  -627,  -324,  -547,  -328,  -627,
  -453,  -476,  -481,  -482,  -484,  -455,  -478,  -456,  -480,  -457,
  -458,  -627,  -461,  -463,  -627,  -464,  -467,  -468,  -627,  -469,
  -470,  -627,  -496,  -627,   -18,  -627,   -28,  -270,  -627,  -627,
  -426,  -627,  -249,  -251,  -627,  -627,   -60,  -245,  -246,  -418,
  -627,  -627,   -62,  -420,  -419,  -627,  -627,  -297,  -604,  -605,
  -604,  -605,  -615,  -195,  -627,  -392,  -393,  -615,  -395,  -410,
   -53,  -413,  -626,  -428,  -431,  -244,  -293,  -626,  -260,  -264,
  -627,  -595,  -596,  -627,   -15,   -72,  -627,   -78,   -84,  -615,
  -604,  -605,  -626,  -608,   -95,  -627,   -80,  -627,  -204,  -214,
  -615,  -626,  -626,  -283,  -286,  -619,  -404,  -626,  -626,  -615,
  -627,  -528,  -529,  -627,  -627,  -539,  -627,  -542,  -627,  -544,
  -627,  -358,  -627,  -360,  -362,  -369,  -615,  -562,  -572,  -582,
  -586,  -626,  -349,  -626,  -306,  -350,  -351,  -309,  -627,  -312,
  -627,  -615,  -604,  -605,  -608,  -288,  -627,  -107,  -108,  -109,
  -627,  -627,  -626,  -317,  -521,  -522,  -627,  -320,  -626,  -626,
  -547,  -627,  -627,  -615,  -627,  -626,  -460,  -462,  -466,  -472,
  -474,   -10,  -123,  -268,  -627,  -198,  -627,  -618,  -626,   -33,
  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,
  -627,  -627,  -627,  -627,  -426,  -627,  -588,  -588,  -374,  -626,
  -626,  -626,  -391,  -627,  -615,  -397,  -555,  -565,  -566,  -576,
  -626,  -415,  -414,   -55,  -626,  -626,  -255,  -265,  -598,   -76,
  -426,   -88,  -296,  -626,  -354,  -626,  -439,  -626,  -440,  -441,
  -242,  -627,  -627,  -615,  -588,  -569,  -587,  -531,  -532,  -532,
  -560,  -532,  -532,  -579,  -532,  -555,  -574,  -615,  -627,  -367,
  -627,  -556,  -627,  -352,  -627,  -627,  -626,  -626,  -311,  -627,
  -426,  -627,  -107,  -108,  -111,  -615,  -626,  -627,  -524,  -627,
  -627,  -627,  -615,  -526,  -329,  -591,  -483,  -486,  -487,  -488,
  -489,  -627,  -269,   -32,  -199,  -250,  -627,  -237,  -627,  -372,
  -373,  -382,  -376,  -384,  -627,  -387,  -627,  -389,  -394,  -627,
  -627,  -627,  -564,  -627,  -627,  -626,  -627,  -627,   -11,  -626,
  -445,  -355,  -627,  -627,  -443,  -407,  -408,  -405,  -527,  -627,
  -535,  -627,  -537,  -627,  -540,  -627,  -543,  -545,  -359,  -361,
  -365,  -627,  -370,  -303,  -627,  -304,  -627,  -627,  -627,  -626,
  -314,  -426,  -627,  -627,  -321,  -325,  -327,  -525,  -547,  -485,
  -588,  -567,  -375,  -626,  -626,  -626,  -626,  -577,  -626,  -396,
  -615,  -399,  -401,  -402,  -575,  -627,  -289,  -411,  -627,  -429,
  -432,  -444,  -626,  -515,  -516,  -627,  -627,  -280,  -442,  -532,
  -532,  -532,  -532,  -363,  -627,  -368,  -627,  -626,  -307,  -310,
  -264,  -626,  -626,  -318,  -523,  -626,  -626,  -371,  -627,  -379,
  -627,  -381,  -627,  -385,  -627,  -388,  -390,  -398,  -627,  -288,
  -608,   -56,  -438,  -626,  -627,  -627,  -289,  -627,  -533,  -536,
  -538,  -541,  -627,  -366,  -626,  -434,  -435,  -436,  -627,  -627,
  -627,  -626,  -626,  -626,  -626,  -400,  -437,  -615,  -604,  -605,
  -608,  -288,  -532,  -364,  -353,  -315,  -322,  -330,  -627,  -377,
  -380,  -383,  -386,  -426,  -534,  -626,  -378 ]

clist = [
'6,220,591,424,262,279,279,279,371,274,223,340,344,345,701,450,348,117',
'315,315,584,587,330,505,301,398,421,327,280,280,280,130,130,447,540',
'133,133,568,4,759,852,431,437,442,640,125,208,9,135,135,263,322,315',
'9,318,553,711,712,333,840,332,337,494,843,499,404,405,406,407,749,560',
'113,300,281,281,281,114,800,266,272,275,379,117,381,383,386,389,392',
'395,381,929,492,823,378,130,543,546,726,681,678,550,531,678,334,338',
'734,737,715,717,719,669,130,29,961,299,803,673,674,29,963,801,721,957',
'654,855,621,380,604,624,606,960,297,396,29,551,118,349,706,342,681,124',
'932,29,29,29,491,29,810,497,814,498,815,277,291,292,1025,740,833,827',
'9,912,377,382,385,388,391,394,839,408,841,505,29,876,671,764,765,29',
'29,397,616,29,618,457,867,622,279,838,622,2,835,951,609,432,635,1,616',
'335,416,422,375,336,905,341,445,449,672,420,356,753,372,425,328,541',
'420,346,856,347,857,746,864,992,1035,985,359,29,866,957,963,929,29,29',
'29,29,29,441,681,840,501,678,678,279,402,605,738,869,415,279,568,496',
'279,847,662,899,995,361,758,607,762,948,410,518,802,417,280,358,709',
'843,207,804,300,840,425,280,908,721,1023,,849,504,504,560,,794,315,379',
',431,437,,,528,813,588,589,,274,510,,889,890,315,953,568,,687,117,532',
',281,820,,,696,1043,,689,,281,521,29,29,29,29,,529,,29,29,29,29,29,29',
',1044,300,560,918,,,300,315,516,315,29,954,,,955,,840,,16,,692,,,,16',
',514,117,860,806,692,515,,,,,,,,979,,,797,517,29,940,,996,523,1026,29',
'741,16,29,495,920,922,,924,926,297,927,608,500,,297,,721,,721,641,,',
'29,6,29,568,648,568,,29,590,,653,657,834,816,767,648,692,767,,504,504',
',,647,130,,,279,133,,,432,29,,647,,783,,634,633,,135,788,,,1031,997',
'450,9,568,29,29,425,,675,676,,16,870,871,,830,819,664,,648,16,872,,',
',681,685,441,646,678,983,721,688,941,652,1036,560,665,647,,,,,665,665',
'279,,,,,704,315,432,,,,,532,799,315,,,432,,,532,828,29,816,,425,,,,',
',,1018,1019,1020,1021,,,939,721,,721,,,670,,865,677,,441,,,,,,,,,,441',
',16,842,684,844,,,,,279,,,,29,,942,432,721,,,,,692,,,16,,,705,806,,972',
'806,,425,1054,,,,950,,,797,735,735,797,,797,,,798,,,987,,,,568,441,754',
',812,,731,329,,733,,29,343,343,,,343,779,781,,29,,,784,786,,,641,449',
'568,1027,16,805,16,29,811,836,,16,836,,130,,1053,,133,,822,,,,,,315',
'641,772,665,648,135,532,653,504,560,16,315,343,343,343,343,778,821,',
',851,805,,647,,861,806,29,,874,29,420,824,829,1029,1030,29,,807,797',
',797,,797,,797,,,29,,,,29,641,,,,875,279,,,,824,432,824,,,,,859,956',
',958,,,,831,832,,893,895,897,,425,,,,29,29,797,,16,,29,29,980,883,981',
'29,982,,868,,441,,,873,,,504,,453,454,455,456,130,805,,,,,315,,,,,,917',
',,892,892,892,934,881,,,1037,,,,928,,,,,943,,,,29,29,,,910,,,,914,,',
'836,,,798,,947,798,,798,,,,,1032,692,1033,641,1034,904,,,,906,907,,17',
',,29,,,17,1042,911,29,,16,,,,29,29,,,,735,224,29,,,,,,944,315,224,224',
'224,29,17,306,306,,1055,936,937,315,,,,,,999,1001,1003,1005,,1006,343',
'343,,,,,224,,,,,224,224,,29,224,353,,29,29,807,,,807,,,807,16,807,29',
'16,,798,1007,798,968,798,,798,971,,,,,,892,892,892,892,994,892,,,,,',
',,29,17,29,29,,,224,224,224,224,17,991,29,29,1049,1050,1051,1052,,,',
'441,279,,798,824,,,,432,,,,,,,,,1056,,,,,,1012,,,425,,,19,29,641,,,29',
'19,,824,1024,,,,,1028,892,892,892,892,,,441,807,,807,,807,,807,,,,,',
'19,29,,,,892,,,16,16,,,17,224,224,224,,,,224,224,224,224,224,224,,,',
',,,,,,29,357,17,,807,,,,,,,,,,,29,700,,,,29,,,29,29,16,16,,,,,,16,,',
',224,,,,,29,224,,19,224,,,,,,,,19,,,,,,,,,,,,17,,17,,,,306,17,,,,,16',
',,,16,16,757,,,,763,306,,,,16,,,,,17,,,,,,,,,,,,,,,,,,224,224,,,,,,',
'16,16,,,,602,,602,,,16,,42,,,,19,,42,,,,,,448,,,,,,,,,,,,,,,,19,,,,',
',42,305,305,16,,,,16,,17,,,,,,,,,,,,,,,,,,,,,,,,,,352,,16,374,,,,,,',
',,,,,,,,,,343,,19,,19,224,,,,19,,,,,,16,,,,,,,,42,,,,,,,16,,42,,19,16',
',,16,16,,,,,,,,,,,,,,,,,,,,,17,,,,,,,306,,224,,,,,,306,,,,,,,,224,,',
',,,,,,,,,,,,,,,,,,,,,,343,,,,,,,19,,,42,,,343,,,,,,,,17,,,17,,,,,,224',
',,,42,,,,,,,,224,,,,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,224,224,,',
',,224,224,,,,224,,,,,42,,42,,,,305,42,,,,,,,,,19,,,,,,,305,,,306,,,',
',,42,,,,,306,,,,,,,,18,,17,17,,,18,,,,,,,,,,,,374,,374,,,,,,,,,,,,,',
'18,308,308,,,,19,224,,19,,,,224,,,,,,17,17,,,,,,17,,,,,,,,42,355,,224',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,902,339,,17,,,,17,17,448,18,,,,,,,,17',
'18,,,,,,,,,,,,,,,,41,,,,,,41,,,,,,224,,17,17,,,,,,,,,17,224,19,19,,',
',,,,41,304,304,42,,,,,,,305,,,,,,,,305,,,,,,,964,,,,17,,,,17,,351,18',
'975,373,,,,,19,19,,,,,,19,,,,,,,,,,18,,,17,,,,,,,,,42,,,42,,,41,418',
',,,,,,452,41,,,,,,,,19,17,,,19,19,,,,,,,,,,19,17,,,,,17,,,17,17,,,18',
',18,,,,308,18,,,,,,,224,,,,19,19,,,,308,,,,,19,507,,509,18,511,,512',
'513,,,,,,,,,,,,,,41,305,,,,,,,,,,,305,603,,603,,19,,,,19,42,42,41,978',
',,,,,,,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,18,,,,,,,,,,42,42,,,,,,42,,,',
'19,,,41,,41,,,,304,41,,,,,19,,,,,19,,,19,19,,304,,,,,637,,,,41,,,374',
',,42,,,,42,42,,,,,,,,,,42,,,,,,,,,,373,,373,,,,,,,,,,,,,,,,,18,,42,42',
',,,308,,,,,42,,,308,,,,,,,,,,,,,,,679,41,,339,,682,,,,,,,,,,,,374,,',
',42,,,,42,,,,974,,,,,,,,,,18,,679,18,,339,,,,,,,,,,,42,,,,,,,,,,,,,',
'727,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,42,,,,41,42,,,42,42,,304,,,,',
',,,304,,,,,,,,,,,,,773,,,,679,339,308,,,,,,,,,,,308,,,,,,,,,,18,18,',
',,,,,,,,,,,41,817,,41,818,,,,,,,,,,,,,,,,,,,826,,,,,,,,,,,,,,18,18,',
',846,,880,18,,,,,,,,,,,,,,,,,452,,,,,,,,,,,,,,,,,,,,,,,,,603,,,18,,',
',18,18,882,,,,,,,304,,18,,,,,,,,,304,,,,,,,,,,41,41,,,,,,,,,,,18,18',
',,,,,,,,18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,603,41,,,18,,,,18,',
',,977,,,,,,,,,,,,,231,339,,,,,,,,278,278,278,,18,,,,,373,,,41,324,325',
'326,41,41,,,,,,,,,,41,,,278,278,,,,,,18,,,,,,,,990,,,,,,,18,,,,,18,41',
'41,18,18,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,373,,,,41,,,,41',
',,,973,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41',
',,,278,423,278,,,,446,451,,,,41,,,,,41,,,41,41,,231,,,465,466,467,468',
'469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485',
'486,487,488,489,490,,,,,,,278,,,,,,278,,,278,,,,,,,278,,278,,278,,278',
'278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,537,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,446,663,423,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,,,,,,,,,,,,,,,,278,,,,,,,',
',698,699,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,',
',,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,775,,,278',
'278,780,782,,,,,785,787,,,,663,789,,,,,,,,,,,,,,,,,,,,,,,,278,,,278',
',,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,',
',,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,884,,,,,,,,,,,,,,780,782,787',
'785,,887,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,884,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3471, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,94,25,152,35,35,35,59,73,22,88,19,19,13,20,19,97,67,67,91,91,50',
'75,52,59,29,33,70,70,70,60,60,29,10,63,63,186,2,98,92,39,39,39,26,17',
'17,9,64,64,38,66,67,9,53,151,136,136,70,187,6,6,41,192,25,19,19,19,19',
'57,182,5,12,72,72,72,8,141,40,40,40,6,97,6,6,6,6,6,6,6,129,39,14,168',
'60,71,71,131,197,76,71,54,76,72,72,93,93,184,184,184,42,60,43,146,49',
'144,42,42,43,147,142,130,193,74,14,172,169,58,172,58,145,48,169,43,148',
'7,5,149,150,197,11,132,43,43,43,153,43,154,157,158,159,160,47,47,47',
'161,162,144,163,9,164,167,170,171,174,175,176,142,9,142,75,43,177,74',
'178,179,43,43,180,173,43,173,50,181,173,35,185,173,3,189,190,196,73',
'65,1,173,69,22,22,86,87,45,90,22,22,44,70,95,96,99,6,100,101,70,102',
'103,104,105,106,57,107,146,132,108,43,109,193,147,129,43,43,43,43,43',
'60,197,187,50,76,76,35,7,110,94,111,12,35,186,73,35,131,25,144,112,113',
'114,115,116,117,32,50,133,30,70,21,151,192,18,139,12,187,6,70,15,130',
'132,,130,6,6,182,,26,67,6,,39,39,,,33,42,19,19,,73,168,,136,136,67,141',
'186,,54,97,52,,72,26,,,54,132,,25,,72,53,43,43,43,43,,66,,43,43,43,43',
'43,43,,92,12,182,136,,,12,67,9,67,43,142,,,142,,187,,23,,39,,,,23,,5',
'97,26,186,39,8,,,,,,,,142,,,135,49,43,93,,98,49,14,43,25,23,43,47,184',
'184,,184,184,48,184,38,47,,48,,130,,130,33,,,43,6,43,186,73,186,,43',
'5,,73,50,135,75,173,73,39,173,,6,6,,,6,60,,,35,63,,,73,43,,6,,41,,17',
'2,,64,41,,,142,136,20,9,186,43,43,6,,50,50,,23,10,10,,71,54,33,,73,23',
'151,,,,197,50,60,40,76,130,130,50,26,40,13,182,6,6,,,,,6,6,35,,,,,50',
'67,73,,,,,52,140,67,,,73,,,52,29,43,75,,6,,,,,,,184,184,184,184,,,91',
'130,,130,,,40,,25,72,,60,,,,,,,,,,60,,23,140,9,140,,,,,35,,,,43,,10',
'73,130,,,,,39,,,23,,,72,186,,91,186,,6,184,,,,135,,,135,97,97,135,,135',
',,137,,,91,,,,186,60,97,,88,,12,31,,12,,43,31,31,,,31,22,22,,43,,,22',
'22,,,33,22,186,94,23,33,23,43,152,137,,23,137,,60,,26,,63,,50,,,,,,67',
'33,17,6,73,64,52,73,6,182,23,67,31,31,31,31,72,52,,,50,33,,6,,19,186',
'43,,59,43,70,6,6,10,10,43,,188,135,,135,,135,,135,,,43,,,,43,33,,,,50',
'35,,,,6,73,6,,,,,70,140,,140,,,,12,12,,138,138,138,,6,,,,43,43,135,',
'23,,43,43,140,22,140,43,140,,97,,60,,,97,,,6,,31,31,31,31,60,33,,,,',
'67,,,,,,50,,,6,6,6,19,12,,,25,,,,50,,,,,19,,,,43,43,,,6,,,,6,,,137,',
',137,,50,137,,137,,,,,140,39,140,33,140,12,,,,12,12,,24,,,43,,,24,140',
'12,43,,23,,,,43,43,,,,97,24,43,,,,,,97,67,24,24,24,43,24,24,24,,140',
'12,12,67,,,,,,138,138,138,138,,138,31,31,,,,,24,,,,,24,24,,43,24,24',
',43,43,188,,,188,,,188,23,188,43,23,,137,33,137,12,137,,137,12,,,,,',
'6,6,6,6,97,6,,,,,,,,43,24,43,43,,,24,24,24,24,24,12,43,43,138,138,138',
'138,,,,60,35,,137,6,,,,73,,,,,,,,,138,,,,,,12,,,6,,,28,43,33,,,43,28',
',6,12,,,,,12,6,6,6,6,,,60,188,,188,,188,,188,,,,,,28,43,,,,6,,,23,23',
',,24,24,24,24,,,,24,24,24,24,24,24,,,,,,,,,,43,28,24,,188,,,,,,,,,,',
'43,31,,,,43,,,43,43,23,23,,,,,,23,,,,24,,,,,43,24,,28,24,,,,,,,,28,',
',,,,,,,,,,24,,24,,,,24,24,,,,,23,,,,23,23,31,,,,31,24,,,,23,,,,,24,',
',,,,,,,,,,,,,,,,24,24,,,,,,,23,23,,,,24,,24,,,23,,56,,,,28,,56,,,,,',
'28,,,,,,,,,,,,,,,,28,,,,,,56,56,56,23,,,,23,,24,,,,,,,,,,,,,,,,,,,,',
',,,,,56,,23,56,,,,,,,,,,,,,,,,,31,,28,,28,24,,,,28,,,,,,23,,,,,,,,56',
',,,,,,23,,56,,28,23,,,23,23,,,,,,,,,,,,,,,,,,,,,24,,,,,,,24,,24,,,,',
',24,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,,,,28,,,56,,,31,,,,,,,,24',
',,24,,,,,,24,,,,56,,,,,,,,24,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',24,24,,,,,24,24,,,,24,,,,,56,,56,,,,56,56,,,,,,,,,28,,,,,,,56,,,24',
',,,,,56,,,,,24,,,,,,,,27,,24,24,,,27,,,,,,,,,,,,56,,56,,,,,,,,,,,,,',
'27,27,27,,,,28,24,,28,,,,24,,,,,,24,24,,,,,,24,,,,,,,,56,27,,24,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,24,68,,24,,,,24,24,28,27,,,,,,,,24,27,,,,',
',,,,,,,,,,,55,,,,,,55,,,,,,24,,24,24,,,,,,,,,24,24,28,28,,,,,,,55,55',
'55,56,,,,,,,56,,,,,,,,56,,,,,,,24,,,,24,,,,24,,55,27,24,55,,,,,28,28',
',,,,,28,,,,,,,,,,27,,,24,,,,,,,,,56,,,56,,,55,68,,,,,,,68,55,,,,,,,',
'28,24,,,28,28,,,,,,,,,,28,24,,,,,24,,,24,24,,,27,,27,,,,27,27,,,,,,',
'24,,,,28,28,,,,27,,,,,28,68,,68,27,68,,68,68,,,,,,,,,,,,,,55,56,,,,',
',,,,,,56,27,,27,,28,,,,28,56,56,55,28,,,,,,,,,,,,,,,,,,,,,,,,,,28,,',
',,,,,,,,,27,,,,,,,,,,56,56,,,,,,56,,,,28,,,55,,55,,,,55,55,,,,,28,,',
',,28,,,28,28,,55,,,,,68,,,,55,,,56,,,56,,,,56,56,,,,,,,,,,56,,,,,,,',
',,55,,55,,,,,,,,,,,,,,,,,27,,56,56,,,,27,,,,,56,,,27,,,,,,,,,,,,,,,68',
'55,,68,,68,,,,,,,,,,,,56,,,,56,,,,56,,,,56,,,,,,,,,,27,,68,27,,68,,',
',,,,,,,,56,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,56,,,',
'55,56,,,56,56,,55,,,,,,,,55,,,,,,,,,,,,,68,,,,68,68,27,,,,,,,,,,,27',
',,,,,,,,,27,27,,,,,,,,,,,,,55,68,,55,68,,,,,,,,,,,,,,,,,,,68,,,,,,,',
',,,,,,27,27,,,68,,27,27,,,,,,,,,,,,,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,27',
',,27,,,,27,27,68,,,,,,,55,,27,,,,,,,,,55,,,,,,,,,,55,55,,,,,,,,,,,27',
'27,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,55,,,,,27,55,,,27,,,,27',
',,,27,,,,,,,,,,,,,34,68,,,,,,,,34,34,34,,27,,,,,55,,,55,34,34,34,55',
'55,,,,,,,,,,55,,,34,34,,,,,,27,,,,,,,,68,,,,,,,27,,,,,27,55,55,27,27',
',,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,55,,,,55,,,,55,,,,',
',,,,,,,,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,34,34',
'34,,,,34,34,,,,55,,,,,55,,,55,55,,34,,,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,,,,,,,34,,,,,,34,,,34',
',,,,,,34,,34,,34,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,34',
'34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,34,,,,,,,,,,,,',
',,,34,,,,,,,,,34,34,,,,,,,,,,34,,,34,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,',
',,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34',
',,34,34,34,34,,,,,34,34,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,34,,,34,,,,',
',,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,',
',,34,,,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,,,,,,34,34,34,34,,34,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3471, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   194,    36,   188,   nil,    66,    -2,   127,    71,    45,
  -294,   130,    36,  -525,  -609,  -550,   nil,    34,   255,   -54,
  -202,   193,   -13,   349,   851,  -209,  -380,  1554,  1012,  -184,
    52,   560,   134,   -21,  2457,   -27,   nil,   nil,    23,  -172,
    49,  -204,  -381,   110,  -288,  -612,   nil,   120,    95,    78,
   -39,   nil,   -13,    16,  -218,  1691,  1215,  -531,  -232,   -66,
    20,   nil,   nil,    24,    37,  -221,     7,   -19,  1596,   134,
    -4,  -238,    41,   -21,  -319,  -258,  -404,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   125,   137,   -53,   nil,
   137,  -324,  -691,  -483,  -347,   136,  -396,    12,  -568,   135,
   151,  -117,   146,  -519,   147,  -520,  -379,  -720,   151,  -528,
  -118,  -513,  -691,   181,  -351,  -115,  -351,  -616,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -758,
  -448,  -472,  -709,  -406,   nil,  -292,  -498,   -60,   -53,  -399,
  -157,  -590,  -547,   nil,  -552,  -770,  -787,  -781,  -208,  -414,
    73,  -287,   -21,  -116,  -522,   nil,   nil,  -122,  -524,  -121,
  -523,  -836,  -436,  -544,  -667,   nil,   nil,    81,    10,    41,
    76,    76,  -260,  -201,    76,    76,    76,  -592,  -439,  -439,
    87,  -572,  -272,   nil,  -450,  -528,  -305,  -655,    38,  -521,
  -698,   nil,  -653,  -772,   nil,   nil,  -185,  -408 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   350,   295,
   nil,   nil,   539,   nil,   853,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   228,   229,   nil,
   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,   695,
   nil,   nil,   nil,   312,   nil,   nil,    28,   426,    35,   nil,
   nil,    37,    40,    39,   nil,   225,   226,   601,   nil,   132,
   434,   131,   134,    78,    79,   nil,    93,    49,   284,   nil,
   427,   nil,   428,   439,   649,   502,   282,   267,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   nil,   268,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   585,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   723,
   567,   nil,   724,   952,   796,   555,   nil,   556,   nil,   nil,
   557,   nil,   559,   666,   nil,   nil,   nil,   565,   nil,   nil,
   nil,   761,   nil,   nil,   nil,   438,   269,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,
   nil,   nil,   nil,   611,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   837,   554,   nil,   558,   845,   570,   572,   573,
   808,   576,   577,   809,   580,   583,   nil,   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 178, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 211, :_reduce_122,
  4, 164, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  4, 213, :_reduce_286,
  3, 213, :_reduce_287,
  3, 213, :_reduce_288,
  2, 213, :_reduce_289,
  3, 213, :_reduce_290,
  3, 213, :_reduce_291,
  1, 213, :_reduce_292,
  4, 213, :_reduce_293,
  3, 213, :_reduce_294,
  1, 213, :_reduce_295,
  5, 213, :_reduce_296,
  4, 213, :_reduce_297,
  3, 213, :_reduce_298,
  2, 213, :_reduce_299,
  1, 213, :_reduce_none,
  2, 213, :_reduce_301,
  2, 213, :_reduce_302,
  6, 213, :_reduce_303,
  6, 213, :_reduce_304,
  0, 248, :_reduce_305,
  0, 249, :_reduce_306,
  7, 213, :_reduce_307,
  0, 250, :_reduce_308,
  0, 251, :_reduce_309,
  7, 213, :_reduce_310,
  5, 213, :_reduce_311,
  4, 213, :_reduce_312,
  0, 252, :_reduce_313,
  0, 253, :_reduce_314,
  9, 213, :_reduce_315,
  0, 254, :_reduce_316,
  0, 255, :_reduce_317,
  7, 213, :_reduce_318,
  0, 256, :_reduce_319,
  0, 257, :_reduce_320,
  0, 258, :_reduce_321,
  9, 213, :_reduce_322,
  0, 259, :_reduce_323,
  0, 260, :_reduce_324,
  6, 213, :_reduce_325,
  0, 261, :_reduce_326,
  6, 213, :_reduce_327,
  0, 262, :_reduce_328,
  0, 263, :_reduce_329,
  9, 213, :_reduce_330,
  1, 213, :_reduce_331,
  1, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 170, :_reduce_335,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_353,
  1, 160, :_reduce_none,
  2, 160, :_reduce_355,
  1, 241, :_reduce_none,
  1, 241, :_reduce_357,
  1, 275, :_reduce_none,
  3, 275, :_reduce_359,
  1, 278, :_reduce_360,
  3, 278, :_reduce_361,
  1, 277, :_reduce_362,
  4, 277, :_reduce_363,
  6, 277, :_reduce_364,
  3, 277, :_reduce_365,
  5, 277, :_reduce_366,
  2, 277, :_reduce_367,
  4, 277, :_reduce_368,
  1, 277, :_reduce_369,
  3, 277, :_reduce_370,
  4, 279, :_reduce_371,
  2, 279, :_reduce_372,
  2, 279, :_reduce_373,
  1, 279, :_reduce_374,
  2, 284, :_reduce_375,
  1, 284, :_reduce_none,
  6, 285, :_reduce_377,
  8, 285, :_reduce_378,
  4, 285, :_reduce_379,
  6, 285, :_reduce_380,
  4, 285, :_reduce_381,
  2, 285, :_reduce_382,
  6, 285, :_reduce_383,
  2, 285, :_reduce_384,
  4, 285, :_reduce_385,
  6, 285, :_reduce_386,
  2, 285, :_reduce_387,
  4, 285, :_reduce_388,
  2, 285, :_reduce_389,
  4, 285, :_reduce_390,
  1, 285, :_reduce_391,
  1, 188, :_reduce_392,
  1, 188, :_reduce_none,
  3, 289, :_reduce_394,
  1, 289, :_reduce_395,
  4, 289, :_reduce_396,
  1, 290, :_reduce_none,
  4, 290, :_reduce_398,
  1, 291, :_reduce_399,
  3, 291, :_reduce_400,
  1, 292, :_reduce_401,
  1, 292, :_reduce_none,
  0, 296, :_reduce_403,
  3, 236, :_reduce_404,
  4, 294, :_reduce_405,
  1, 294, :_reduce_406,
  3, 295, :_reduce_407,
  3, 295, :_reduce_408,
  0, 299, :_reduce_409,
  0, 300, :_reduce_410,
  6, 298, :_reduce_411,
  2, 183, :_reduce_412,
  4, 183, :_reduce_413,
  5, 183, :_reduce_414,
  5, 183, :_reduce_415,
  0, 302, :_reduce_416,
  3, 235, :_reduce_417,
  4, 235, :_reduce_418,
  4, 235, :_reduce_419,
  4, 235, :_reduce_420,
  3, 235, :_reduce_421,
  3, 235, :_reduce_422,
  3, 235, :_reduce_423,
  2, 235, :_reduce_424,
  1, 235, :_reduce_425,
  4, 235, :_reduce_426,
  0, 303, :_reduce_427,
  0, 304, :_reduce_428,
  6, 234, :_reduce_429,
  0, 305, :_reduce_430,
  0, 306, :_reduce_431,
  6, 234, :_reduce_432,
  0, 308, :_reduce_433,
  6, 240, :_reduce_434,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  6, 159, :_reduce_437,
  0, 159, :_reduce_438,
  1, 309, :_reduce_439,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 310, :_reduce_442,
  1, 310, :_reduce_none,
  2, 161, :_reduce_444,
  1, 161, :_reduce_none,
  1, 224, :_reduce_446,
  1, 224, :_reduce_447,
  1, 224, :_reduce_none,
  1, 225, :_reduce_449,
  1, 312, :_reduce_450,
  1, 312, :_reduce_none,
  2, 312, :_reduce_452,
  3, 313, :_reduce_453,
  1, 313, :_reduce_454,
  3, 226, :_reduce_455,
  3, 227, :_reduce_456,
  3, 228, :_reduce_457,
  3, 228, :_reduce_458,
  1, 317, :_reduce_459,
  3, 317, :_reduce_460,
  1, 318, :_reduce_none,
  2, 318, :_reduce_462,
  3, 230, :_reduce_463,
  3, 230, :_reduce_464,
  1, 320, :_reduce_465,
  3, 320, :_reduce_466,
  3, 229, :_reduce_467,
  3, 229, :_reduce_468,
  3, 231, :_reduce_469,
  3, 231, :_reduce_470,
  1, 321, :_reduce_471,
  3, 321, :_reduce_472,
  1, 322, :_reduce_473,
  3, 322, :_reduce_474,
  1, 314, :_reduce_475,
  2, 314, :_reduce_476,
  1, 315, :_reduce_477,
  2, 315, :_reduce_478,
  1, 316, :_reduce_479,
  2, 316, :_reduce_480,
  1, 319, :_reduce_481,
  0, 324, :_reduce_482,
  3, 319, :_reduce_483,
  0, 325, :_reduce_484,
  4, 319, :_reduce_485,
  1, 323, :_reduce_486,
  1, 323, :_reduce_487,
  1, 323, :_reduce_488,
  1, 323, :_reduce_none,
  2, 209, :_reduce_490,
  1, 209, :_reduce_491,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  1, 326, :_reduce_none,
  3, 210, :_reduce_496,
  1, 311, :_reduce_none,
  2, 311, :_reduce_498,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_508,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 202, :_reduce_514,
  1, 232, :_reduce_515,
  1, 232, :_reduce_516,
  1, 169, :_reduce_517,
  1, 169, :_reduce_518,
  1, 173, :_reduce_519,
  1, 173, :_reduce_520,
  1, 242, :_reduce_521,
  0, 327, :_reduce_522,
  4, 242, :_reduce_523,
  2, 242, :_reduce_524,
  3, 244, :_reduce_525,
  2, 244, :_reduce_526,
  4, 328, :_reduce_527,
  2, 328, :_reduce_528,
  2, 328, :_reduce_529,
  1, 328, :_reduce_none,
  2, 330, :_reduce_531,
  0, 330, :_reduce_532,
  6, 297, :_reduce_533,
  8, 297, :_reduce_534,
  4, 297, :_reduce_535,
  6, 297, :_reduce_536,
  4, 297, :_reduce_537,
  6, 297, :_reduce_538,
  2, 297, :_reduce_539,
  4, 297, :_reduce_540,
  6, 297, :_reduce_541,
  2, 297, :_reduce_542,
  4, 297, :_reduce_543,
  2, 297, :_reduce_544,
  4, 297, :_reduce_545,
  1, 297, :_reduce_546,
  0, 297, :_reduce_547,
  1, 293, :_reduce_548,
  1, 293, :_reduce_549,
  1, 293, :_reduce_550,
  1, 293, :_reduce_551,
  1, 276, :_reduce_none,
  1, 276, :_reduce_553,
  1, 332, :_reduce_none,
  1, 333, :_reduce_none,
  3, 333, :_reduce_556,
  1, 333, :_reduce_none,
  3, 333, :_reduce_558,
  1, 286, :_reduce_559,
  3, 286, :_reduce_560,
  1, 334, :_reduce_none,
  2, 335, :_reduce_562,
  1, 335, :_reduce_563,
  2, 336, :_reduce_564,
  1, 336, :_reduce_565,
  1, 280, :_reduce_none,
  3, 280, :_reduce_567,
  1, 329, :_reduce_none,
  3, 329, :_reduce_569,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 281, :_reduce_572,
  1, 281, :_reduce_573,
  3, 338, :_reduce_574,
  3, 339, :_reduce_575,
  1, 287, :_reduce_576,
  3, 287, :_reduce_577,
  1, 331, :_reduce_578,
  3, 331, :_reduce_579,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 288, :_reduce_582,
  1, 288, :_reduce_583,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 283, :_reduce_586,
  2, 282, :_reduce_587,
  0, 282, :_reduce_588,
  1, 245, :_reduce_none,
  0, 342, :_reduce_590,
  4, 245, :_reduce_591,
  1, 233, :_reduce_592,
  2, 233, :_reduce_593,
  1, 218, :_reduce_none,
  3, 218, :_reduce_595,
  3, 343, :_reduce_596,
  2, 343, :_reduce_597,
  4, 343, :_reduce_598,
  2, 343, :_reduce_599,
  2, 343, :_reduce_600,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 301, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 172, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_622,
  1, 243, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_625,
  0, 152, :_reduce_626 ]

racc_reduce_n = 627

racc_shift_n = 1057

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_286(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_288(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_296(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_297(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_298(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_299(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 300 omitted

def _reduce_301(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_302(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_304(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_306(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_312(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_313(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_314(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_315(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_316(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_322(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_324(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_327(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_329(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_330(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_332(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_362(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_363(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_364(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_367(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_368(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_369(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_372(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = args val
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
 result = 0 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

# reduce 397 omitted

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 402 omitted

def _reduce_403(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_404(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_405(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_406(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_407(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_409(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_410(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_411(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_412(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_413(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_414(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_415(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_416(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_417(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_418(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_419(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      result[0] = :safe_call
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_427(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_428(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_429(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_430(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_431(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_432(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_433(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_434(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 435 omitted

# reduce 436 omitted

def _reduce_437(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 440 omitted

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 448 omitted

def _reduce_449(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_450(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 451 omitted

def _reduce_452(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_453(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_458(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 461 omitted

def _reduce_462(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_463(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_464(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_476(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_482(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_483(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_484(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_485(val, _values, result)
#if   defined(RUBY21) || defined(RUBY22 || defined(RUBY23))
                      # TODO: tRCURLY -> tSTRING_END
#endif
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_486(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_487(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 489 omitted

def _reduce_490(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_491(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

def _reduce_496(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 557 omitted

def _reduce_558(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_559(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_560(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_563(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_564(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_565(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 568 omitted

def _reduce_569(val, _values, result)
                      result = args val
                    
    result
end

# reduce 570 omitted

# reduce 571 omitted

def _reduce_572(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_573(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_575(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_578(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_579(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 580 omitted

# reduce 581 omitted

def _reduce_582(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_583(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 584 omitted

# reduce 585 omitted

def _reduce_586(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_588(val, _values, result)
                      result = nil
                    
    result
end

# reduce 589 omitted

def _reduce_590(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_593(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 594 omitted

def _reduce_595(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_598(val, _values, result)
                      _, sym, _, value = val
                      sym[0] = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_599(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_600(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

# reduce 623 omitted

# reduce 624 omitted

def _reduce_625(val, _values, result)
 yyerrok 
    result
end

def _reduce_626(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby23Parser
