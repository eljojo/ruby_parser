#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-291,579,218,-102,579,215,216,-291,-291,-291,749,268,660,-291,-291,660',
'-291,660,83,700,995,-85,-507,-101,239,-100,84,268,109,-507,579,-105',
'-103,579,-104,-71,-291,-291,219,-291,-291,-291,-291,-291,-521,817,659',
'585,113,659,-99,659,-95,112,-93,579,236,-515,729,-518,238,237,234,235',
'-515,-104,-518,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291',
'-291,-291,-291,729,-106,-291,-291,-291,-102,643,207,215,216,-291,215',
'216,-291,219,268,-604,267,-291,-99,-291,-107,-291,-291,-291,-291,-291',
'-291,-291,-603,-291,-103,-291,267,113,748,-102,113,-95,112,-93,-102',
'112,699,-607,-291,-291,208,-96,-91,-291,-607,-607,-607,113,-96,-101',
'-607,-607,112,-607,-101,-105,113,209,-103,113,-104,112,-607,-103,112',
'-104,-95,-90,-93,-95,113,-93,729,-607,-607,112,-607,-607,-607,-607,-607',
'113,-95,-95,929,-93,112,-101,624,800,-603,219,621,113,219,267,268,605',
'112,-97,567,660,214,-93,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,258,-98,-607,-607,-607,605,644,877,-601,315',
'-607,-94,-516,-607,261,575,574,659,-607,-516,-607,262,-607,-607,-607',
'-607,-607,-607,-607,-514,-607,-607,-607,623,-521,605,-514,620,-428,-607',
'607,606,618,-419,-607,-607,-607,769,-94,568,-607,-607,-607,-607,113',
'316,-607,-607,-607,112,-607,-510,-103,-101,219,267,607,606,-510,-607',
'-607,-607,-607,-601,-92,761,-90,-510,-522,219,-607,-607,999,-607,-607',
'-607,-607,-607,356,-92,-99,-428,-607,-517,-292,-601,607,606,-428,-607',
'-517,-292,526,-101,-603,759,380,-428,-607,-607,-292,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-428,-607,-607,-607',
'-607,783,785,-607,-510,-100,-607,605,784,-607,-607,-510,-607,740,-607',
'605,-607,741,-607,-607,-607,-607,-607,-607,-607,454,-607,-607,-607,-106',
'575,574,718,-607,557,556,555,605,558,383,-607,-607,-607,-607,-607,-603',
'-607,-507,-607,-607,605,521,522,386,-507,-507,-507,-102,-103,-507,-507',
'-507,389,-507,-104,-513,405,-607,607,606,603,-507,-513,-507,-507,-507',
'607,606,608,539,-600,-107,541,-507,-507,410,-507,-507,-507,-507,-507',
'718,565,557,556,555,453,558,607,606,613,605,261,567,610,-522,215,216',
'455,262,975,607,606,625,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,456,526,-507,-507,-507,-507,-507,-507,575,574',
'-507,218,-507,-507,-507,487,-507,-600,-507,-91,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-512,-507,270,-507,-100,607,606,-512,539,497,-600',
'538,841,568,-97,638,-507,-507,-507,-507,500,-507,-291,-507,637,213,502',
'113,-106,-291,-291,-291,112,-507,-291,-291,-291,560,-291,557,556,555',
'565,558,587,-70,239,113,-291,-291,-291,588,112,567,215,216,219,-95,-291',
'-291,586,-291,-291,-291,-291,-291,-93,-98,215,216,718,-104,557,556,555',
'563,558,511,236,512,-102,-107,238,237,572,571,575,574,519,-291,-291',
'-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,-291,845,817',
'-291,-291,-291,714,786,-291,539,539,-291,541,541,-291,-291,273,-291',
'568,-291,219,-291,270,-291,-291,-291,-291,-291,-291,-291,113,-291,523',
'-291,718,112,557,556,555,800,558,215,216,845,817,239,-291,-291,-291',
'-291,567,-291,-510,-291,317,318,527,113,528,-510,-510,-510,112,-105',
'-510,-510,-510,718,-510,557,556,555,563,558,239,536,-510,236,-510,-510',
'-510,238,237,575,574,542,543,502,-510,-510,529,-510,-510,-510,-510,-510',
'718,530,557,556,555,585,558,113,399,714,452,718,112,557,556,555,589',
'558,921,590,612,568,616,-510,-510,-510,-510,-510,-510,-510,-510,-510',
'-510,-510,-510,-510,-510,619,714,-510,-510,-510,239,-510,-510,622,629',
'-510,-265,714,-510,-510,631,-510,239,-510,219,-510,717,-510,-510,-510',
'-510,-510,-510,-510,635,-510,113,-510,253,254,636,112,236,270,647,239',
'238,237,234,235,-510,-510,-510,-510,236,-510,242,-510,238,237,234,235',
'239,239,240,239,241,-510,174,185,175,198,171,191,181,180,201,202,196',
'179,178,173,199,203,204,183,172,186,190,192,184,177,219,219,219,193',
'200,195,194,187,197,182,170,189,188,116,117,118,119,120,169,176,167',
'168,164,165,166,124,126,-85,407,125,677,219,239,409,408,532,688,694',
'158,159,695,154,136,137,138,145,142,144,253,254,139,140,219,702,705',
'160,161,146,147,718,706,557,556,555,236,558,708,710,238,237,234,235',
'151,150,712,135,157,153,152,148,149,143,141,133,156,134,-338,721,162',
'722,723,725,953,-338,557,556,555,714,558,585,732,718,-338,557,556,555',
'717,558,155,762,763,764,-266,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,770,714',
'487,193,200,195,365,364,366,363,170,189,188,116,117,118,119,120,169',
'176,167,168,360,361,362,358,126,97,96,359,718,99,557,556,555,487,558',
'219,158,159,788,154,136,137,138,145,142,144,258,500,139,140,502,744',
'688,160,161,146,147,718,956,557,556,555,372,558,219,270,714,745,270',
'688,151,150,239,135,157,153,152,148,149,143,141,133,156,134,-283,-519',
'162,-520,239,1005,817,-283,-519,219,-520,714,1006,839,219,817,-283,-519',
'849,-520,219,1004,155,-267,876,879,705,163,174,185,175,198,171,191,181',
'180,201,202,196,179,178,173,199,203,204,183,172,186,190,192,184,177',
'882,885,887,193,200,195,194,187,197,182,170,189,188,116,117,118,119',
'120,169,176,167,168,164,165,166,124,126,123,889,125,219,953,239,557',
'556,555,891,558,158,159,892,154,136,137,138,145,142,144,253,254,139',
'140,688,900,-265,160,161,146,147,116,117,118,119,120,236,904,242,906',
'238,237,234,235,151,150,907,135,157,153,152,148,149,143,141,133,156',
'134,-292,211,162,91,744,-283,219,-292,212,705,910,956,-283,92,912,914',
'-292,210,916,916,745,-283,155,219,922,924,926,163,174,185,175,198,171',
'191,181,180,201,202,196,179,178,173,199,203,204,183,172,186,190,192',
'184,177,219,936,937,193,200,195,194,187,197,182,170,189,188,219,940',
'-268,950,957,169,176,167,168,164,165,166,124,126,958,960,125,868,869',
'239,961,870,107,108,977,158,159,979,154,136,137,138,145,142,144,253',
'254,139,140,980,984,705,160,161,146,147,989,991,993,995,995,236,1002',
'242,1007,238,237,234,235,151,150,1008,135,157,153,152,148,149,143,141',
'133,156,134,-291,-519,162,91,517,916,916,-291,-519,916,1013,518,-604',
'92,977,-604,-291,-519,-603,694,516,977,155,1036,1037,1038,1039,163,174',
'185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204,183',
'172,186,190,192,184,177,995,995,995,193,200,195,194,187,197,182,170',
'189,188,219,916,977,3,,169,176,167,168,164,165,166,124,126,,,125,,,',
'-520,,,,,158,159,-520,154,136,137,138,145,142,144,,-520,139,140,-291',
'-292,-291,160,161,146,147,-291,-292,-291,,,-604,,-604,,-291,-292,-291',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,450,744,162,91',
',,,451,743,,,,,92,,,452,745,,,,,155,,,,,163,174,185,175,198,171,191',
'181,180,201,202,196,179,178,173,199,203,204,183,172,186,190,192,184',
'177,,,,193,200,195,194,187,197,182,170,189,188,,,,,,169,176,167,168',
'164,165,166,124,126,,,125,,,,,,,,,158,159,,154,136,137,138,145,142,144',
',,139,140,,,,160,161,146,147,,,,,,,,,,,,,,151,150,,135,157,153,152,148',
'149,143,141,133,156,134,,,162,91,,,,,,,,,,92,,,,,,,,,155,,,,,163,174',
'185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204,183',
'172,186,190,192,184,177,,,,193,200,195,194,187,197,182,170,189,188,',
',,,,169,176,167,168,164,165,166,124,126,396,395,125,,397,,,,,,,158,159',
',154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,,,,,',
',,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,',
',,,,,8,72,73,74,12,60,,,155,66,67,,,163,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,22,,,,,648,11,48,10,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255',
'256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47',
'238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257',
',-242,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,648,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250',
'245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38',
'236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89',
',,,84,92,,257,,,,,65,,,81,88,90,8,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,632,11,48,10',
'13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248',
'249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62',
',,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85',
'86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
'11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239',
'243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,293',
',,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254',
',43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23',
'241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253',
'254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240',
'23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232,233',
',,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246',
'244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90',
'291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252,,232',
'233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235',
'246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88',
'90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251,252',
',232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234',
'235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81',
'88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256,251',
'252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237',
'234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,,,,65',
',,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247,255,256',
'251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238',
'237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,257,,',
',,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245,247',
'255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242',
'47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92',
',257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249,250,245',
'247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63,,38,236',
',242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84',
'92,219,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243,248,249',
'250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61,62,,,63',
',38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83,85,86,87',
'89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48',
',13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,239,243',
'248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,,,36,,,61',
'62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91,83',
'85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,243,248,249,250,245,247,255,256,251,252,,232,233,,,253,254,,43,',
',36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,257,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,,,251,252,,,,,,253,254,,43,,,36,,',
'61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,243,248,249,250,245,247,255,256,251,252,,-626,-626,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,255,256,251,252,,-626,-626,,,253,254',
',43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23',
'241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,,43,',
',36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,,,,,,,,,,,,,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242',
'47,238,237,234,235,,,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,239,,,,,,,,,,,,,,,,253,254,,43',
',,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,,,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'239,,,,,,,,,,,,,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238',
'237,234,235,,,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626',
'-626,,,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234',
'235,246,244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,291,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626',
',,,,,253,254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246',
'244,240,23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253',
'254,,43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240',
'23,241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,',
'43,,,36,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23',
'241,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,-626,-626,-626,-626,245,247,,,-626,-626,,,,,,253,254,,43,',
',293,,,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,291,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,239,243,248,249,250,245,247,255,,251,252,,,,,,253,254,,43,,,293',
',,61,62,,,63,,38,236,,242,47,238,237,234,235,246,244,240,23,241,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,',
'48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,',
',,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,800,558,47,,,,,,',
',23,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74',
',60,,575,574,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280',
',47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557',
'556,555,565,558,47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309',
'75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,718,63,557,556,555,565,558,47,,,,,,,,229,567,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,',
',,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,565,558,47',
',,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90',
'72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96,98,',
'99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718',
'63,557,556,555,565,558,47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,568,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,718,63,557,556,555,800,558,47,,,,,,,,229,567,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575',
'574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,800',
'558,47,,,,,,,,229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81',
'88,90,72,73,74,,60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,',
',304,305,311,101,100,102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,718,63,557,556,555,800,558,47,,,,,,,,229,567,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,563,,81,88,90,72,73,74,,60,,575,574,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,568,,',
'48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,',
',,,,,,,,,,,,224,,,230,,,61,62,,718,63,557,556,555,565,558,47,,,,,,,',
'229,567,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,563,,81,88,90,72,73,74',
',60,,575,574,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,568,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,',
',,,91,83,85,86,87,89,,,,84,92,219,,,,,,65,,285,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',,,312,,,,,,,,,,,,,,,,,,,,894,,,230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,',
'48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,',
',,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,',
',105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,',
',,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302',
',,298,,,61,62,,,63,,297,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,230,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,314,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,',
'304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,230,,,61,62,,',
'63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,514,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,280,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,',
',,,,,,,,,,,,,,,,894,,,230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,967',
',,230,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76',
',,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,672',
',,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,532,,61,62,,,63,,,,,,47',
',,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,219,,,,,,65,,,81,88,90,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,',
',105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,',
',,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,',
',,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,591,59,97,96,592,',
'99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,593,,,230,,,61,62,,,63,',
',,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,306,,,105,104,106,591,59,97,96,592,,99,107,108,',
'93,94,,,,312,,,,,,,,,,,,,,,,,,,,593,,,230,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,113,,,,,112,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,',
',,,,,,,,,,,,,,,,350,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,10,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,',
',,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309',
'75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,',
',,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,',
',63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,399,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,224,,,230,,,61,62,,,63,,672,,280,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,',
',,,,,,224,,,230,,,61,62,,,63,,,,280,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,399,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,',
',,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62',
',,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282,,280',
',47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,415,,,,47',
',,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
'284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,',
',,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,672,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,415,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,219',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96',
'98,284,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,282,,280,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,285,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,767,,,,47,,,,,,',
',229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,672,,280,,47,,,,,,,,229,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,284,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,280,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,285,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,',
',,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,',
',230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,',
',,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100',
'102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,',
',,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102',
'103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,',
'231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,306,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,312,,,,,,,,,,,,,,,,,,,,302',
',,298,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76',
',,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,',
',61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,',
',,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101',
'100,102,103,,,231,,,,,,,306,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,,,312,,,,,,,,,,,,,,,,,,,,302,,,298,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103',
',,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,224,,,230,,,61,62,,,63,,415,,,,47,,,,,,,,229,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,308,309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,224,,,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308',
'309,75,76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224',
',,230,,,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75',
'76,,,,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230',
',,61,62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,',
',,,,304,305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61',
'62,,,63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304',
'305,311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,',
'63,,,,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305',
'311,101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,',
',,,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,282',
',,,47,,,,,,,,229,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,308,309,75,76,,,,,,304,305,311',
'101,100,102,103,,,231,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,224,,,230,,,61,62,,,63,,,,,',
'47,,,,,,,,229,,,,-284,91,83,85,86,87,89,-284,-284,-284,84,92,-284,-284',
'-284,,-284,,65,,,81,88,90,,,-284,-284,-284,,,,,,,,-284,-284,,-284,-284',
'-284,-284,-284,,,,,,,,,,,,,,,,,,,,,,,,-284,-284,-284,-284,-284,-284',
'-284,-284,-284,-284,-284,-284,-284,-284,,,-284,-284,-284,,,-284,,,-284',
',,-284,-284,,-284,,-284,,-284,,-284,-284,-284,-284,-284,-284,-284,,-284',
',-284,,,,,,,,,,,,,-284,-284,-284,-284,-608,-284,,-284,,,,-608,-608,-608',
',,-608,-608,-608,560,-608,557,556,555,565,558,,,,-608,-608,-608,-608',
',,567,,,,,-608,-608,,-608,-608,-608,-608,-608,,,,,,,,,,563,753,,,,,',
',,572,571,575,574,,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,,,-608,-608,-608,,,-608,,,-608,,,-608,-608,,-608',
'568,-608,,-608,,-608,-608,-608,-608,-608,-608,-608,,-608,-608,-608,',
',,,,,,,,,,,-608,-608,-608,-608,-609,-608,,-608,,,,-609,-609,-609,,,-609',
'-609,-609,560,-609,557,556,555,565,558,,,,-609,-609,-609,-609,,,567',
',,,,-609,-609,,-609,-609,-609,-609,-609,,,,,,,,,,563,,,,,,,,,572,571',
'575,574,,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609',
'-609,-609,,,-609,-609,-609,,,-609,,,-609,,,-609,-609,,-609,568,-609',
',-609,,-609,-609,-609,-609,-609,-609,-609,,-609,-609,-609,,,,,,,,,,',
',,-609,-609,-609,-609,-427,-609,,-609,,,,-427,-427,-427,,,-427,-427',
'-427,560,-427,557,556,555,565,558,,,,-427,-427,-427,,,,567,,,,,-427',
'-427,,-427,-427,-427,-427,-427,,,,,,,,,,563,,,,,,,,,572,571,575,574',
',-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427',
',,-427,-427,-427,,,-427,,270,-427,,,-427,-427,,-427,568,-427,,-427,',
'-427,-427,-427,-427,-427,-427,-427,,-427,-427,-427,,,,,,,,,,,,-298,-427',
'-427,,-427,,-427,-298,-298,-298,,,-298,-298,-298,799,-298,557,556,555',
'800,558,,,,,-298,-298,,,,567,,,,,-298,-298,,-298,-298,-298,-298,-298',
',,,,,,,,,563,,,,,,,,,572,571,575,574,,-298,-298,-298,-298,-298,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,,,-298,-298,-298,,,-298,,273',
'-298,,,-298,-298,,-298,568,-298,,-298,,-298,-298,-298,-298,-298,-298',
'-298,,-298,,-298,,,,,,,,,,,,-625,-298,-298,,-298,,-298,-625,-625,-625',
',,-625,-625,-625,799,-625,557,556,555,800,558,,,,-625,-625,-625,,,,567',
',,,,-625,-625,,-625,-625,-625,-625,-625,,,,,,,,,,563,,,,,,,,,572,571',
'575,574,,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625,-625',
'-625,-625,,,-625,-625,-625,,,-625,,270,-625,,,-625,-625,,-625,568,-625',
',-625,,-625,-625,-625,-625,-625,-625,-625,,-625,-625,-625,,,,,,,,,,',
',-625,-625,-625,,-625,,-625,-625,-625,-625,,,-625,-625,-625,,-625,799',
',557,556,555,800,558,,-625,-625,,,,,,,567,,,-625,-625,,-625,-625,-625',
'-625,-625,,,560,,557,556,555,565,558,,,563,,,,,,,567,,572,571,575,574',
',,,,,,,,,,-625,,,,,,563,-625,,,,,270,-625,219,572,571,575,574,,,,568',
',652,435,,,653,,,,,,-625,-625,,158,159,,154,136,137,138,145,142,144',
',-625,139,140,568,,-625,160,161,146,147,,,,,,270,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,485,428,,,486',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,735,428,,,736,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',737,435,,,738,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,1031,435,,,1032,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,1029,428,,,1030,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,560,162,557,556,555,565,558',
',,,,485,428,,,486,567,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,563,,,160,161,146,147,,,572,571,575,574,,,,,,,,151,150',
',135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,568,1001',
'435,,,1000,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139',
'140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148',
'149,143,141,133,156,134,,,162,,,,,,,,,,431,435,,,430,,,,,,155,,,158',
'159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,',
',,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,',
'162,,,,,,,,,,424,428,,,425,,,,,,155,,,158,159,163,154,136,137,138,145',
'142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157',
'153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,652,435,,,653,,,',
',,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161',
'146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133',
'156,134,,,162,,,,,,,,,,650,428,,,651,,,,,,155,,,158,159,163,154,136',
'137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151',
'150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,684',
'435,,,685,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140',
',,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153,152,148,149',
'143,141,133,156,134,,,162,,,,,,,,,,650,428,,,651,,,,,,155,,,158,159',
'163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,270',
',,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,',
',,,,,,,853,435,,,854,,,,,,155,,,158,159,163,154,136,137,138,145,142',
'144,,,139,140,,,,160,161,146,147,,,,,,270,,,,,,,,151,150,,135,157,153',
'152,148,149,143,141,133,156,134,,,162,,,,,,,,,,681,428,,,682,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,270,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',560,162,557,556,555,565,558,560,,557,556,555,565,558,,,567,,,,,155',
',567,,799,163,557,556,555,800,558,,,,,,,563,753,,567,,,,563,546,572',
'571,575,574,,,,572,571,575,574,,,,,,563,,,,,,,,,572,571,575,574,,,,',
',,,568,,,,,,,568,,,,,,,,,,,,,,,,,,568' ]
        racc_action_table = arr = ::Array.new(25641, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'430,925,22,1029,903,756,756,430,430,430,597,307,664,430,430,491,430',
'483,80,545,1046,676,358,1044,478,348,80,64,3,358,341,738,1031,340,1030',
'676,430,430,22,430,430,430,430,430,222,982,664,982,860,491,347,483,682',
'860,681,850,478,363,852,362,478,478,478,478,363,736,362,430,430,430',
'430,430,430,430,430,430,430,430,430,430,430,582,589,430,430,430,735',
'430,13,448,448,430,692,692,430,756,663,738,307,430,222,430,351,430,430',
'430,430,430,430,430,1031,430,737,430,64,925,597,1029,903,682,925,681',
'1029,903,545,431,430,430,15,430,348,430,431,431,431,597,738,1044,431',
'431,597,431,1044,430,341,16,1031,340,1030,341,431,1031,340,1030,682',
'347,681,682,852,681,581,431,431,852,431,431,431,431,431,850,736,682',
'850,681,850,851,390,879,737,448,387,582,692,663,29,384,582,589,879,492',
'19,735,431,431,431,431,431,431,431,431,431,431,431,431,431,431,25,351',
'431,431,431,617,431,787,592,40,431,737,361,431,368,879,879,492,431,361',
'431,368,431,431,431,431,431,431,431,366,431,431,431,390,41,614,366,387',
'812,684,384,384,384,29,652,431,431,633,431,879,431,652,652,652,581,43',
'652,652,652,581,652,592,431,787,48,29,617,617,592,652,652,652,652,592',
'851,617,41,592,223,951,652,652,951,652,652,652,652,652,72,633,41,812',
'684,360,519,592,614,614,812,684,360,519,453,633,684,614,87,812,684,853',
'519,652,652,652,652,652,652,652,652,652,652,652,652,652,652,812,684',
'652,652,652,650,652,652,359,223,652,374,651,652,652,359,652,593,652',
'376,652,593,652,652,652,652,652,652,652,225,652,652,652,453,705,705',
'921,853,921,921,921,381,921,88,853,652,652,652,652,853,652,95,652,853',
'392,312,312,89,95,95,95,650,652,95,95,95,90,95,651,365,121,853,374,374',
'374,95,365,95,95,95,376,376,376,330,591,225,330,95,95,205,95,95,95,95',
'95,717,702,717,717,717,224,717,381,381,381,378,27,702,378,42,750,750',
'226,27,921,392,392,392,95,95,95,95,95,95,95,95,95,95,95,95,95,95,227',
'316,95,95,95,591,95,95,702,702,95,231,591,95,95,263,95,591,95,42,95',
'591,95,95,95,95,95,95,95,364,95,266,95,42,378,378,364,329,277,591,329',
'717,702,316,425,95,95,95,95,278,95,653,95,424,18,281,5,316,653,653,653',
'5,95,653,653,653,708,653,708,708,708,708,708,349,292,459,934,653,653',
'653,349,934,708,325,325,294,425,653,653,349,653,653,653,653,653,424',
'18,339,339,922,425,922,922,922,708,922,295,459,296,424,18,459,459,708',
'708,708,708,302,653,653,653,653,653,653,653,653,653,653,653,653,653',
'653,1015,1015,653,653,653,922,653,653,334,697,653,334,697,653,653,305',
'653,708,653,306,653,311,653,653,653,653,653,653,653,754,653,313,653',
'1039,754,1039,1039,1039,1039,1039,20,20,724,724,460,653,653,653,653',
'1039,653,98,653,44,44,317,749,318,98,98,98,749,653,98,98,98,839,98,839',
'839,839,1039,839,321,327,98,460,98,98,98,460,460,1039,1039,331,332,335',
'98,98,319,98,98,98,98,98,841,319,841,841,841,345,841,344,346,839,319',
'563,344,563,563,563,350,563,839,352,380,1039,383,98,98,98,98,98,98,98',
'98,98,98,98,98,98,98,386,841,98,98,98,479,98,98,389,411,98,413,563,98',
'98,416,98,469,98,419,98,563,98,98,98,98,98,98,98,422,98,288,98,469,469',
'423,288,479,432,440,461,479,479,479,479,98,98,98,98,469,98,469,98,469',
'469,469,469,462,463,469,464,469,98,755,755,755,755,755,755,755,755,755',
'755,755,755,755,755,755,755,755,755,755,755,755,755,755,755,493,494',
'509,755,755,755,755,755,755,755,755,755,755,290,290,290,290,290,755',
'755,755,755,755,755,755,755,755,510,123,755,513,515,467,123,123,520',
'524,533,755,755,534,755,755,755,755,755,755,755,467,467,755,755,535',
'548,549,755,755,755,755,714,551,714,714,714,467,714,552,553,467,467',
'467,467,755,755,560,755,755,755,755,755,755,755,755,755,755,755,49,569',
'755,573,576,578,999,49,999,999,999,714,999,583,584,1013,49,1013,1013',
'1013,714,1013,755,621,624,626,630,755,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,634,1013,639,74,74,74,74,74',
'74,74,74,74,74,508,508,508,508,508,74,74,74,74,74,74,74,74,74,74,74',
'74,977,74,977,977,977,645,977,654,74,74,656,74,74,74,74,74,74,74,662',
'669,74,74,671,955,678,74,74,74,74,975,955,975,975,975,74,975,680,683',
'977,955,686,687,74,74,690,74,74,74,74,74,74,74,74,74,74,74,968,964,74',
'965,691,966,693,968,964,701,965,975,966,716,719,726,968,964,731,965',
'734,966,74,766,771,789,790,74,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,792,793,794,11,11,11,11,11,11,11,11',
'11,11,9,9,9,9,9,11,11,11,11,11,11,11,11,11,11,796,11,797,891,466,891',
'891,891,798,891,11,11,799,11,11,11,11,11,11,11,466,466,11,11,811,815',
'818,11,11,11,11,675,675,675,675,675,466,819,466,823,466,466,466,466',
'11,11,824,11,11,11,11,11,11,11,11,11,11,11,741,17,11,11,893,303,825',
'741,17,826,830,893,303,11,831,833,741,17,834,836,893,303,11,838,840',
'843,846,11,628,628,628,628,628,628,628,628,628,628,628,628,628,628,628',
'628,628,628,628,628,628,628,628,628,856,861,862,628,628,628,628,628',
'628,628,628,628,628,863,872,873,890,894,628,628,628,628,628,628,628',
'628,628,895,897,628,757,757,465,898,757,757,757,923,628,628,927,628',
'628,628,628,628,628,628,465,465,628,628,928,933,941,628,628,628,628',
'944,945,946,947,949,465,959,465,967,465,465,465,465,628,628,970,628',
'628,628,628,628,628,628,628,628,628,628,854,299,628,628,301,971,972',
'854,299,973,974,301,854,628,976,1000,854,299,1001,1003,301,1014,628',
'1019,1020,1021,1022,628,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,1023,1024,1025,12,12,12,12,12,12,12,12,12',
'12,1028,1033,1034,1,,12,12,12,12,12,12,12,12,12,,,12,,,,300,,,,,12,12',
'300,12,12,12,12,12,12,12,,300,12,12,685,1007,1032,12,12,12,12,685,1007',
'1032,,,685,,1032,,685,1007,1032,,12,12,,12,12,12,12,12,12,12,12,12,12',
'12,221,595,12,12,,,,221,595,,,,,12,,,221,595,,,,,12,,,,,12,406,406,406',
'406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,406,,,,406,406,406,406,406,406,406,406,406,406,,,,,,406',
'406,406,406,406,406,406,406,406,,,406,,,,,,,,,406,406,,406,406,406,406',
'406,406,406,,,406,406,,,,406,406,406,406,,,,,,,,,,,,,,406,406,,406,406',
'406,406,406,406,406,406,406,406,406,,,406,406,,,,,,,,,,406,,,,,,,,,406',
',,,,406,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91',
'91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91',
'91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,',
',,,,,,,,,,2,2,2,2,2,2,,,91,2,2,,,91,2,,2,2,2,2,2,2,2,,,,,,2,2,2,2,2',
'2,2,,,2,,,,,443,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2,2,2,443,443,443',
'443,443,443,443,443,443,443,443,,443,443,,,443,443,,2,,,2,,,2,2,,,2',
',2,443,,443,2,443,443,443,443,443,443,443,2,443,,,,2,2,2,2,2,2,,,,2',
'2,,443,,443,,,2,,,2,2,2,857,857,857,857,857,857,,,,857,857,,,,857,,857',
'857,857,857,857,857,857,,,,,,857,857,857,857,857,857,857,,,857,,,,,655',
'857,857,,857,857,857,857,857,857,857,857,857,,857,857,857,,857,857,',
'857,857,857,655,655,655,655,655,655,655,655,655,655,655,,655,655,,,655',
'655,,857,,,857,,,857,857,,,857,,857,655,,655,857,655,655,655,655,655',
'655,655,857,655,,,,857,857,857,857,857,857,,,,857,857,,655,,,,,857,',
',857,857,857,405,405,405,405,405,405,,,,405,405,,,,405,,405,405,405',
'405,405,405,405,,,,,,405,405,405,405,405,405,405,,,405,,,,,418,405,405',
'405,405,405,405,405,405,405,405,405,405,,405,405,405,,405,405,,405,405',
'405,418,418,418,418,418,418,418,418,418,418,418,,418,418,,,418,418,',
'405,,,405,,,405,405,,,405,,405,418,,418,405,418,418,418,418,418,418',
'418,405,418,,,,405,405,405,405,405,405,,,,405,405,,418,,,,,405,,,405',
'405,405,298,298,298,298,298,298,,,,298,298,,,,298,,298,298,298,298,298',
'298,298,,,,,,298,298,298,298,298,298,298,,,298,,,,,,298,298,,298,298',
'298,298,298,298,298,298,298,,298,298,298,,298,298,,298,298,298,875,875',
'875,875,875,875,875,875,875,875,875,,875,875,,,875,875,,298,,,298,,',
'298,298,,,298,,298,875,,875,298,875,875,875,875,875,875,875,298,875',
',,,298,298,298,298,298,298,,,,298,298,,875,,,,,298,,,298,298,298,847',
'847,847,847,847,847,,,,847,847,,,,847,,847,847,847,847,847,847,847,',
',,,,847,847,847,847,847,847,847,,,847,,,,,,847,847,,847,847,847,847',
'847,847,847,847,847,,847,847,847,,847,847,,847,847,847,531,531,531,531',
'531,531,531,531,531,531,531,,531,531,,,531,531,,847,,,847,,,847,847',
',,847,,847,531,,531,847,531,531,531,531,531,531,531,847,531,,,,847,847',
'847,847,847,847,,,,847,847,,531,,,,,847,,,847,847,847,848,848,848,848',
'848,848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848',
'848,848,848,848,848,,,848,,,,,,848,848,,848,848,848,848,848,848,848',
'848,848,,848,848,848,,848,848,,848,848,848,275,275,275,275,275,275,275',
'275,275,275,275,,275,275,,,275,275,,848,,,848,,,848,848,,,848,,848,275',
',275,848,275,275,275,275,275,275,275,848,275,,,,848,848,848,848,848',
'848,,,,848,848,,275,,,,,848,,,848,848,848,230,230,230,230,230,230,,',
',230,230,,,,230,,230,230,230,230,230,230,230,,,,,,230,230,230,230,230',
'230,230,,,230,,,,,,230,230,,230,230,230,230,230,230,230,230,230,,230',
'230,230,,230,230,,230,230,230,778,778,778,778,778,778,778,778,778,778',
'778,,778,778,,,778,778,,230,,,230,,,230,230,,,230,,230,778,,778,230',
'778,778,778,778,778,778,778,230,778,,,,230,230,230,230,230,230,,,,230',
'230,,778,,,,,230,,,230,230,230,699,699,699,699,699,699,,,,699,699,,',
',699,,699,699,699,699,699,699,699,,,,,,699,699,699,699,699,699,699,',
',699,,,,,,699,699,,699,699,699,699,699,699,699,699,699,,699,699,699',
',699,699,,699,699,699,775,775,775,775,775,775,775,775,775,775,775,,775',
'775,,,775,775,,699,,,699,,,699,699,,,699,,699,775,,775,699,775,775,775',
'775,775,775,775,699,775,,,,699,699,699,699,699,699,,,,699,699,,775,',
',,,699,,,699,699,699,580,580,580,580,580,580,,,,580,580,,,,580,,580',
'580,580,580,580,580,580,,,,,,580,580,580,580,580,580,580,,,580,,,,,',
'580,580,,580,580,580,580,580,580,580,580,580,,580,580,580,,580,580,',
'580,580,580,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,580,,,580',
',,580,580,,,580,,580,24,,24,580,24,24,24,24,24,24,24,580,24,,,,580,580',
'580,580,580,580,,,,580,580,,24,,,,,580,,,580,580,580,987,987,987,987',
'987,987,,,,987,987,,,,987,,987,987,987,987,987,987,987,,,,,,987,987',
'987,987,987,987,987,,,987,,,,,,987,987,,987,987,987,987,987,987,987',
'987,987,,987,987,987,,987,987,,987,987,987,878,878,878,878,878,878,878',
'878,878,878,878,,878,878,,,878,878,,987,,,987,,,987,987,,,987,,987,878',
',878,987,878,878,878,878,878,878,878,987,878,,,,987,987,987,987,987',
'987,,,,987,987,,878,,,,,987,,,987,987,987,751,751,751,751,751,751,,',
',751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751',
'751,751,,,751,,,,,,751,751,,751,751,751,751,751,751,751,751,751,,751',
'751,751,,751,751,,751,751,751,689,689,689,689,689,689,689,689,689,689',
'689,,689,689,,,689,689,,751,,,751,,,751,751,,,751,,751,689,,689,751',
'689,689,689,689,689,689,689,751,689,,,,751,751,751,751,751,751,,,,751',
'751,,689,,,,,751,,,751,751,751,752,752,752,752,752,752,,,,752,752,,',
',752,,752,752,752,752,752,752,752,,,,,,752,752,752,752,752,752,752,',
',752,,,,,,752,752,,752,752,752,752,752,752,752,752,752,,752,752,752',
',752,752,,752,752,752,780,780,780,780,780,780,780,780,780,780,780,,780',
'780,,,780,780,,752,,,752,,,752,752,,,752,,752,780,,780,752,780,780,780',
'780,780,780,780,752,780,,,,752,752,752,752,752,752,,,,752,752,,780,',
',,,752,,,752,752,752,577,577,577,577,577,577,,,,577,577,,,,577,,577',
'577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,577,,,,,',
'577,577,,577,577,577,577,577,577,577,577,577,,577,577,577,,577,577,',
'577,577,577,438,438,438,438,438,438,438,438,438,438,438,,438,438,,,438',
'438,,577,,,577,,,577,577,,,577,,577,438,,438,577,438,438,438,438,438',
'438,438,577,438,,,,577,577,577,577,577,577,,,,577,577,,438,,,,,577,',
',577,577,577,963,963,963,963,963,963,,,,963,963,,,,963,,963,963,963',
'963,963,963,963,,,,,,963,963,963,963,963,963,963,,,963,,,,,,963,963',
',963,963,963,963,963,963,963,963,963,,963,963,963,,963,963,,963,963',
'963,482,482,482,482,482,482,482,482,482,482,482,,482,482,,,482,482,',
'963,,,963,,,963,963,,,963,,963,482,,482,963,482,482,482,482,482,482',
'482,963,482,,,,963,963,963,963,963,963,,,,963,963,482,482,,,,,963,,',
'963,963,963,983,983,983,983,983,983,,,,983,983,,,,983,,983,983,983,983',
'983,983,983,,,,,,983,983,983,983,983,983,983,,,983,,,,,,983,983,,983',
'983,983,983,983,983,983,983,983,,983,983,983,,983,983,,983,983,983,768',
'768,768,768,768,768,768,768,768,768,768,,768,768,,,768,768,,983,,,983',
',,983,983,,,983,,983,768,,768,983,768,768,768,768,768,768,768,983,768',
',,,983,983,983,983,983,983,,,,983,983,,768,,,,,983,,,983,983,983,207',
'207,207,207,207,207,,,,207,207,,,,207,,207,207,207,207,207,207,207,',
',,,,207,207,207,207,207,207,207,,,207,,,,,,207,207,,207,207,207,207',
'207,207,207,207,207,,207,207,207,,207,207,,207,207,207,782,782,782,782',
'782,782,782,782,782,782,782,,782,782,,,782,782,,207,,,207,,,207,207',
',,207,,207,782,,782,207,782,782,782,782,782,782,782,207,782,,,,207,207',
'207,207,207,207,,,,207,207,,782,,,,,207,,,207,207,207,978,978,978,978',
'978,978,,,,978,978,,,,978,,978,978,978,978,978,978,978,,,,,,978,978',
'978,978,978,978,978,,,978,,,,,,978,978,,978,978,978,978,978,978,978',
'978,978,,978,978,978,,978,978,,978,978,978,773,773,773,773,773,773,773',
'773,773,773,773,,773,773,,,773,773,,978,,,978,,,978,978,,,978,,978,773',
',773,978,773,773,773,773,773,773,773,978,773,,,,978,978,978,978,978',
'978,,,,978,978,,773,,,,,978,,,978,978,978,986,986,986,986,986,986,,',
',986,986,,,,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986,986',
'986,986,,,986,,,,,,986,986,,986,986,986,986,986,986,986,986,986,,986',
'986,986,,986,986,,986,986,986,480,480,480,480,480,480,480,,,480,480',
',,,,,480,480,,986,,,986,,,986,986,,,986,,986,480,,480,986,480,480,480',
'480,480,480,480,986,480,,,,986,986,986,986,986,986,,,,986,986,,,,,,',
'986,,,986,986,986,803,803,803,803,803,803,,,,803,803,,,,803,,803,803',
'803,803,803,803,803,,,,,,803,803,803,803,803,803,803,,,803,,,,,,803',
'803,,803,803,803,803,803,803,803,803,803,,803,803,803,,803,803,,803',
'803,803,458,458,458,458,458,458,458,458,458,458,458,,458,458,,,458,458',
',803,,,803,,,803,803,,,803,,803,458,,458,803,458,458,458,458,458,458',
'458,803,458,,,,803,803,803,803,803,803,,,,803,803,,,,,,,803,,,803,803',
'803,807,807,807,807,807,807,,,,807,807,,,,807,,807,807,807,807,807,807',
'807,,,,,,807,807,807,807,807,807,807,,,807,,,,,,807,807,,807,807,807',
'807,807,807,807,807,807,,807,807,807,,807,807,,807,807,807,457,457,457',
'457,457,457,457,457,457,457,457,,457,457,,,457,457,,807,,,807,,,807',
'807,,,807,,807,457,,457,807,457,457,457,457,457,457,457,807,457,,,,807',
'807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807,808,808,808,808',
'808,808,,,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808',
'808,808,808,808,808,,,808,,,,,,808,808,,808,808,808,808,808,808,808',
'808,808,,808,808,808,,808,808,,808,808,808,468,468,468,468,468,468,468',
',,468,468,,,,,,468,468,,808,,,808,,,808,808,,,808,,808,468,,468,808',
'468,468,468,468,468,468,468,808,468,,,,808,808,808,808,808,808,,,,808',
'808,,,,,,,808,,,808,808,808,758,758,758,758,758,758,,,,758,758,,,,758',
',758,758,758,758,758,758,758,,,,,,758,758,758,758,758,758,758,,,758',
',,,,,758,758,,758,758,758,758,758,758,758,758,758,,758,758,758,,758',
'758,,758,758,758,470,,,,,,,,,,,,,,,,470,470,,758,,,758,,,758,758,,,758',
',758,470,,470,758,470,470,470,470,,,470,758,470,,,,758,758,758,758,758',
'758,,,,758,758,,,,,,,758,,,758,758,758,324,324,324,324,324,324,,,,324',
'324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324',
'324,,,324,,,,,,324,324,,324,324,324,324,324,324,324,324,324,,324,324',
'324,,324,324,,324,324,324,471,,,,,,,,,,,,,,,,471,471,,324,,,324,,,324',
'324,,,324,,324,471,,471,324,471,471,471,471,,,471,324,471,,,,324,324',
'324,324,324,324,,,,324,324,,,,,,,324,,,324,324,324,930,930,930,930,930',
'930,,,,930,930,,,,930,,930,930,930,930,930,930,930,,,,,,930,930,930',
'930,930,930,930,,,930,,,,,,930,930,,930,930,930,930,930,930,930,930',
'930,,930,930,930,,930,930,,930,930,930,472,,,,,,,,,,,,,,,,472,472,,930',
',,930,,,930,930,,,930,,930,472,,472,930,472,472,472,472,,,472,930,472',
',,,930,930,930,930,930,930,,,,930,930,,,,,,,930,,,930,930,930,817,817',
'817,817,817,817,,,,817,817,,,,817,,817,817,817,817,817,817,817,,,,,',
'817,817,817,817,817,817,817,,,817,,,,,,817,817,,817,817,817,817,817',
'817,817,817,817,,817,817,817,,817,817,,817,817,817,473,473,473,473,473',
'473,473,,,473,473,,,,,,473,473,,817,,,817,,,817,817,,,817,,817,473,',
'473,817,473,473,473,473,473,473,473,817,473,,,,817,817,817,817,817,817',
',,,817,817,,,,,,,817,,,817,817,817,700,700,700,700,700,700,,,,700,700',
',,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700,700,700,700',
',,700,,,,,,700,700,,700,700,700,700,700,700,700,700,700,,700,700,700',
',700,700,,700,700,700,474,474,474,474,474,474,474,,,474,474,,,,,,474',
'474,,700,,,700,,,700,700,,,700,,700,474,,474,700,474,474,474,474,474',
'474,474,700,474,,,,700,700,700,700,700,700,,,,700,700,,,,,,,700,,,700',
'700,700,900,900,900,900,900,900,,,,900,900,,,,900,,900,900,900,900,900',
'900,900,,,,,,900,900,900,900,900,900,900,,,900,,,,,,900,900,,900,900',
'900,900,900,900,900,900,900,,900,900,900,,900,900,,900,900,900,475,475',
'475,475,475,475,475,,,475,475,,,,,,475,475,,900,,,900,,,900,900,,,900',
',900,475,,475,900,475,475,475,475,475,475,475,900,475,,,,900,900,900',
'900,900,900,,,,900,900,,,,,,,900,,,900,900,900,896,896,896,896,896,896',
',,,896,896,,,,896,,896,896,896,896,896,896,896,,,,,,896,896,896,896',
'896,896,896,,,896,,,,,,896,896,,896,896,896,896,896,896,896,896,896',
',896,896,896,,896,896,,896,896,896,476,476,476,476,476,476,476,,,476',
'476,,,,,,476,476,,896,,,896,,,896,896,,,896,,896,476,,476,896,476,476',
'476,476,476,476,476,896,476,,,,896,896,896,896,896,896,,,,896,896,,',
',,,,896,,,896,896,896,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36',
'36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36',
'36,36,36,,36,36,36,,36,36,,36,36,36,477,477,477,477,477,477,477,,,477',
'477,,,,,,477,477,,36,,,36,,,36,36,,,36,,36,477,,477,36,477,477,477,477',
'477,477,477,36,477,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36,36',
'293,293,293,293,293,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,,293,293,293,293,293,293,293,,,293,,,,,,293,293,,293,293,293,293',
'293,293,293,293,293,,293,293,293,,293,293,,293,293,293,481,481,481,481',
'481,481,481,481,,481,481,,,,,,481,481,,293,,,293,,,293,293,,,293,,293',
'481,,481,293,481,481,481,481,481,481,481,293,481,,,,293,293,293,293',
'293,293,,,,293,293,,,,,,,293,,,293,293,293,33,33,33,,33,,,,33,33,,,',
'33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33',
'33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,',
',33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,',
',33,33,,,,,,,33,,33,33,33,33,739,739,739,,739,,,,739,739,,,,739,,739',
'739,739,739,739,739,739,,,,,,739,739,739,739,739,739,739,,,739,,,,,',
',739,,,739,739,739,739,739,739,739,739,,739,739,739,,739,739,,739,739',
'739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,887,739,887,887,887,887',
'887,739,,,,,,,,739,887,,,,739,739,739,739,739,739,,,,739,739,,,,,,,739',
'887,,739,739,739,745,745,745,,745,,887,887,745,745,,,,745,,745,745,745',
'745,745,745,745,,,,,,745,745,745,745,745,745,745,,,745,,,,887,,,745',
',,745,745,745,745,745,745,745,745,745,745,745,745,,745,745,,745,745',
'745,,,,,,,,,,,,,,,,,,,,745,,,745,,,745,745,,,745,,745,,745,,745,,,,',
',,,745,,,,,745,745,745,745,745,745,,,,745,745,,,,,,,745,,745,745,745',
'745,254,254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254',
',,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254',
'254,254,254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254',
',,254,,,254,254,,710,254,710,710,710,710,710,254,,,,,,,,254,710,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,710,,254,254,254,767,767,767',
',767,,710,710,767,767,,,,767,,767,767,767,767,767,767,767,,,,,,767,767',
'767,767,767,767,767,,,767,,,,710,,,767,,,767,767,767,767,767,767,767',
'767,,767,767,767,,767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767',
',,767,767,,912,767,912,912,912,912,912,767,,,,,,,,767,912,,,,767,767',
'767,767,767,767,,,,767,767,,,,,,,767,912,,767,767,767,769,769,769,,769',
',912,912,769,769,,,,769,,769,769,769,769,769,769,769,,,,,,769,769,769',
'769,769,769,769,,,769,,,,912,,,769,,,769,769,769,769,769,769,769,769',
',769,769,769,,769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769',
'769,,914,769,914,914,914,914,914,769,,,,,,,,769,914,,,,769,769,769,769',
'769,769,,,,769,769,,,,,,,769,914,,769,769,769,255,255,255,,255,,914',
'914,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255',
'255,255,255,,,255,,,,914,,,255,,,255,255,255,255,255,255,255,255,,255',
'255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255',
',916,255,916,916,916,916,916,255,,,,,,,,255,916,,,,255,255,255,255,255',
'255,,,,255,255,,,,,,,255,916,,255,255,255,783,783,783,,783,,916,916',
'783,783,,,,783,,783,783,783,783,783,783,783,,,,,,783,783,783,783,783',
'783,783,,,783,,,,916,,,783,,,783,783,783,783,783,783,783,783,,783,783',
'783,,783,783,,783,783,783,,,,,,,,,,,,,,,,,,,,783,,,783,,,783,783,,991',
'783,991,991,991,991,991,783,,,,,,,,783,991,,,,783,783,783,783,783,783',
',,,783,783,,,,,,,783,991,,783,783,783,784,784,784,,784,,991,991,784',
'784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784',
'784,,,784,,,,991,,,784,,,784,784,784,784,784,784,784,784,,784,784,784',
',784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,993,784',
'993,993,993,993,993,784,,,,,,,,784,993,,,,784,784,784,784,784,784,,',
',784,784,,,,,,,784,993,,784,784,784,785,785,785,,785,,993,993,785,785',
',,,785,,785,785,785,785,785,785,785,,,,,,785,785,785,785,785,785,785',
',,785,,,,993,,,785,,,785,785,785,785,785,785,785,785,,785,785,785,,785',
'785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,995,785,995',
'995,995,995,995,785,,,,,,,,785,995,,,,785,785,785,785,785,785,,,,785',
'785,,,,,,,785,995,,785,785,785,786,786,786,,786,,995,995,786,786,,,',
'786,,786,786,786,786,786,786,786,,,,,,786,786,786,786,786,786,786,,',
'786,,,,995,,,786,,,786,786,786,786,786,786,786,786,,786,786,786,,786',
'786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,1008,786,1008',
'1008,1008,1008,1008,786,,,,,,,,786,1008,,,,786,786,786,786,786,786,',
',,786,786,,,,,,,786,1008,,786,786,786,788,788,788,,788,,1008,1008,788',
'788,,,,788,,788,788,788,788,788,788,788,,,,,,788,788,788,788,788,788',
'788,,,788,,,,1008,,,788,,,788,788,788,788,788,788,788,788,,788,788,788',
',788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,,788,',
',,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,,,,,,,788',
',,788,788,788,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,',
'257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,',
',257,257,257,264,264,264,,264,,,,264,264,,,,264,,264,264,264,264,264',
'264,264,,,,,,264,264,264,264,264,264,264,,,264,,,,,,,264,,,264,264,264',
'264,264,264,264,264,264,264,264,264,,264,264,,264,264,264,,,,,,,,,,',
',,,,,,,,,264,,,264,,,264,264,,,264,,264,,264,,264,,,,,,,,264,,,,,264',
'264,264,264,264,264,,,,264,264,,,,,,,264,,264,264,264,264,270,270,270',
',270,,,,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270',
'270,270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,270',
'270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270',
'270,,,270,,270,,270,,270,,,,,,,,270,,,,,270,270,270,270,270,270,,,,270',
'270,,,,,,,270,,270,270,270,270,273,273,273,,273,,,,273,273,,,,273,,273',
'273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273,,,,,',
',273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273,273,,273',
'273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273,,273',
',,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,273,,,,,,273,,273',
'273,273,273,800,800,800,,800,,,,800,800,,,,800,,800,800,800,800,800',
'800,800,,,,,,800,800,800,800,800,800,800,,,800,,,,,,,800,,,800,800,800',
'800,800,800,800,800,,800,800,800,,800,800,,,,800,,,,,,,,,,,,,,,,,,,',
'800,,,800,,,800,800,,,800,,,,,,,,,,,,,,,,,,,800,800,800,800,800,800',
',,,800,800,,,,,,,800,,,800,800,800,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32',
',,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,',
',,,,32,,32,32,32,32,280,280,280,,280,,,,280,280,,,,280,,280,280,280',
'280,280,280,280,,,,,,280,280,280,280,280,280,280,,,280,,,,,,,280,,,280',
'280,280,280,280,280,280,280,,280,280,280,,280,280,,280,280,280,,,,,',
',,,,,,,,,,,,,,280,,,280,,,280,280,,,280,,,,,,280,,,,,,,,280,,,,,280',
'280,280,280,280,280,,,,280,280,,,,,,,280,,,280,280,280,34,34,34,,34',
',,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34',
',,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,',
',,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34',
'34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,282,282,282,,282,,,,282,282',
',,,282,,282,282,282,282,282,282,282,,,,,,282,282,282,282,282,282,282',
',,282,,,,,,,282,,,282,282,282,282,282,282,282,282,,282,282,282,,282',
'282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,,282,,,,,,282',
',,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,,,,,,,282,,,282,282',
'282,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284',
',,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284',
'284,284,284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284',
',,284,,,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284',
',,,284,284,,,,,,,284,,,284,284,284,285,285,285,,285,,,,285,285,,,,285',
',285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285',
',,,,,,285,,,285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285',
'285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,',
',285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,,285,,,285,285,285',
'291,291,291,291,291,,,,291,291,,,,291,,291,291,291,291,291,291,291,',
',,,,291,291,291,291,291,291,291,,,291,,,,,,291,291,,291,291,291,291',
'291,291,291,291,291,,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,',
',,,,,,291,,,291,,,291,291,,,291,,291,,,,291,,,,,,,,291,,,,,291,291,291',
'291,291,291,,,,291,291,,,,,,,291,,,291,291,291,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,',
',,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,297,297,297',
',297,,,,297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297,297',
'297,297,297,297,,,297,,,,,,,297,,,297,297,297,297,297,297,297,297,,297',
'297,297,,297,297,,,,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297',
',,,,,,,,,,,,,,,,,,297,297,297,297,297,297,,,,297,297,,,,297,,,297,,',
'297,297,297,845,845,845,,845,,,,845,845,,,,845,,845,845,845,845,845',
'845,845,,,,,,845,845,845,845,845,845,845,,,845,,,,,,,845,,,845,845,845',
'845,845,845,845,845,,845,845,845,,845,845,,845,845,845,,,,,,,,,,,,,',
',,,,,,845,,,845,,,845,845,,,845,,,,,,845,,,,,,,,845,,,,,845,845,845',
'845,845,845,,,,845,845,,,,,,,845,,,845,845,845,858,858,858,,858,,,,858',
'858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858,858,858,858,858',
'858,,,858,,,,,,,858,,,858,858,858,858,858,858,858,858,,858,858,858,',
'858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858,,,858,,,858,858,,,858,,',
',,,858,,,,,,,,858,,,,,858,858,858,858,858,858,,,,858,858,,,,,,,858,',
',858,858,858,876,876,876,,876,,,,876,876,,,,876,,876,876,876,876,876',
'876,876,,,,,,876,876,876,876,876,876,876,,,876,,,,,,,876,,,876,876,876',
'876,876,876,876,876,876,876,876,876,,876,876,,876,876,876,,,,,,,,,,',
',,,,,,,,,876,,,876,,,876,876,,,876,,,,876,,876,,,,,,,,876,,,,,876,876',
'876,876,876,876,,,,876,876,,,,,,,876,,876,876,876,876,877,877,877,,877',
',,,877,877,,,,877,,877,877,877,877,877,877,877,,,,,,877,877,877,877',
'877,877,877,,,877,,,,,,,877,,,877,877,877,877,877,877,877,877,,877,877',
'877,,877,877,,877,877,877,,,,,,,,,,,,,,,,,,,,877,,,877,,,877,877,,,877',
',,,,,877,,,,,,,,877,,,,,877,877,877,877,877,877,,,,877,877,,,,,,,877',
',,877,877,877,892,892,892,,892,,,,892,892,,,,892,,892,892,892,892,892',
'892,892,,,,,,892,892,892,892,892,892,892,,,892,,,,,,,892,,,892,892,892',
'892,892,892,892,892,,892,892,892,,892,892,,,,892,,,,,,,,,,,,,,,,,,,',
'892,,,892,,,892,892,,,892,,,,,,,,,,,,,,,,,,,892,892,892,892,892,892',
',,,892,892,,,,,,,892,,,892,892,892,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,904,904,904,,904,,,,904,904,,,,904,,904,904,904,904,904,904',
'904,,,,,,904,904,904,904,904,904,904,,,904,,,,,,,904,,,904,904,904,904',
'904,904,904,904,,904,904,904,,904,904,,,,904,,,,,,,,,,,,,,,,,,,,904',
',,904,,,904,904,,,904,,,,,,,,,,,,,,,,,,,904,904,904,904,904,904,,,,904',
'904,,,,,,,904,,,904,904,904,314,314,314,,314,,,,314,314,,,,314,,314',
'314,314,314,314,314,314,,,,,,314,314,314,314,314,314,314,,,314,,,,,',
',314,,,314,314,314,314,314,314,314,314,,314,314,314,,314,314,,,,314',
',,,,,,,,,,,,,,,,,,,314,,,314,,,314,314,,,314,,,,,,,,,,,,,,,,,,,314,314',
'314,314,314,314,,,,314,314,,,,,,,314,,,314,314,314,46,46,46,,46,,,,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,,,,,,,46,,,46,46,46,929,929,929,,929,,,,929,929,,,,929,,929',
'929,929,929,929,929,929,,,,,,929,929,929,929,929,929,929,,,929,,,,,',
',929,,,929,929,929,929,929,929,929,929,,929,929,929,,929,929,,929,929',
'929,,,,,,,,,,,,,,,,,,,,929,,,929,,,929,929,,,929,,929,,,,929,,,,,,,',
'929,,,,,929,929,929,929,929,929,,,,929,929,,,,,,,929,,,929,929,929,47',
'47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47',
'47,,,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47',
',,,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47',
'47,47,47,47,,,,47,47,,,,,,,47,,,47,47,47,323,323,323,,323,,,,323,323',
',,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323',
',,323,,,,,,,323,,,323,323,323,323,323,323,323,323,,323,323,323,,323',
'323,,323,323,323,,,,,,,,,,,,,,,,,,,,323,,,323,323,,323,323,,,323,,,',
',,323,,,,,,,,323,,,,,323,323,323,323,323,323,,,,323,323,,,,,,,323,,',
'323,323,323,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,,61',
'61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61,61,61',
',61,61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,,61,,,,,,61,,,',
',,,,61,,,,,61,61,61,61,61,61,,,,61,61,61,,,,,,61,,,61,61,61,62,62,62',
',62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,',
',62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62',
',,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62',
'62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62,342,342,342,,342,,,,342,342',
',,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342',
',,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342,342,,342',
'342,,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342',
',,,,,,,342,,,,,342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342',
'342,1004,1004,1004,,1004,,,,1004,1004,,,,1004,,1004,1004,1004,1004,1004',
'1004,1004,,,,,,1004,1004,1004,1004,1004,1004,1004,,,1004,,,,,,,1004',
',,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,1004,,1004',
'1004,,1004,1004,1004,,,,,,,,,,,,,,,,,,,,1004,,,1004,,,1004,1004,,,1004',
',1004,,1004,,1004,,,,,,,,1004,,,,,1004,1004,1004,1004,1004,1004,,,,1004',
'1004,,,,,,,1004,,1004,1004,1004,1004,343,343,343,,343,,,,343,343,,,',
'343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,,',
'343,,,,,,,343,,,343,343,343,343,343,343,343,343,,343,343,343,,343,343',
',343,343,343,,,,,,,,,,,,,,,,,,,,343,,,343,,,343,343,,,343,,,,,,343,',
',,,,,,343,,,,,343,343,343,343,343,343,,,,343,343,,,,,,,343,,,343,343',
'343,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63',
'63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63,63,63,63,,63',
'63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,,,,,63,,,,,,,',
'63,,,,,63,63,63,63,63,63,,,,63,63,,,,,,,63,,63,63,63,63,66,66,66,,66',
',,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66',
',,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,',
',,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66',
'66,66,,,,66,66,,,,,,,66,,,66,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67',
'67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67',
'67,67,67,67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,',
'67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67',
',,67,67,67,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355,355',
'355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355,355',
'355,355,355,355,,355,355,355,,355,355,,,,355,,,,,,,,,,,,,,,,,,,,355',
',,355,,,355,355,,,355,,,,,,,,,,,,,,,,,,,355,355,355,355,355,355,,,,355',
'355,,,,,,,355,,,355,355,355,357,357,357,,357,,,,357,357,,,,357,,357',
'357,357,357,357,357,357,,,,,,357,357,357,357,357,357,357,,,357,,,,,',
',357,,,357,357,357,357,357,357,357,357,,357,357,357,,357,357,,,,357',
',,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,,,,,,,,,,,,357,357',
'357,357,357,357,,,,357,357,,,,,,,357,,,357,357,357,70,70,70,,70,,,,70',
'70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,',
'70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,',
',,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70',
',,,70,70,70,,,,,70,70,,,70,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71',
'71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71',
'71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71',
',,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71',
'71,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,',
'8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8',
',,8,8,,,8,,8,,,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,415',
'415,415,,415,,,,415,415,,,,415,,415,415,415,415,415,415,415,,,,,,415',
'415,415,415,415,415,415,,,415,,,,,,,415,,,415,415,415,415,415,415,415',
'415,,415,415,415,,415,415,,415,415,415,,,,,,,,,,,,,,,,,,,,415,,,415',
',,415,415,,,415,,,,,,415,,,,,,,,415,,,,,415,415,415,415,415,415,,,,415',
'415,,,,,,,415,,,415,415,415,452,452,452,,452,,,,452,452,,,,452,,452',
'452,452,452,452,452,452,,,,,,452,452,452,452,452,452,452,,,452,,,,,',
',452,,,452,452,452,452,452,452,452,452,452,452,452,452,,452,452,,452',
'452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452,,452,,452,,452',
',,,,,,,452,,,,,452,452,452,452,452,452,,,,452,452,,,,,,,452,,452,452',
'452,452,454,454,454,,454,,,,454,454,,,,454,,454,454,454,454,454,454',
'454,,,,,,454,454,454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454',
'454,454,454,454,,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,',
',,454,,,454,,,454,454,,,454,,,,,,454,,,,,,,,454,,,,,454,454,454,454',
'454,454,,,,454,454,,,,,,,454,,,454,454,454,455,455,455,,455,,,,455,455',
',,,455,,455,455,455,455,455,455,455,,,,,,455,455,455,455,455,455,455',
',,455,,,,,,,455,,,455,455,455,455,455,455,455,455,,455,455,455,,455',
'455,,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,,,,,455',
',,,,,,,455,,,,,455,455,455,455,455,455,,,,455,455,,,,,,,455,,,455,455',
'455,456,456,456,,456,,,,456,456,,,,456,,456,456,456,456,456,456,456',
',,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456,456,456,456',
'456,456,456,,456,456,456,,456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456',
',,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456,456,456,456,456,456',
',,,456,456,,,,,,,456,,,456,456,456,111,111,111,111,111,,,,111,111,,',
',111,,111,111,111,111,111,111,111,,,,,,111,111,111,111,111,111,111,',
',111,,,,,,111,111,111,111,111,111,111,111,111,111,111,111,,111,111,111',
',111,111,,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,',
'111,,,,111,,,,,,,,111,,,,,111,111,111,111,111,111,,,,111,111,,,,,,111',
'111,,,111,111,111,116,116,116,,116,,,,116,116,,,,116,,116,116,116,116',
'116,116,116,,,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116,116',
'116,116,116,116,116,116,,116,116,116,,116,116,,116,116,116,,,,,,,,,',
',,,,,,,,,,116,,,116,,,116,116,,,116,,,,,,116,,,,,,,,116,,,,,116,116',
'116,116,116,116,,,,116,116,,,,,,,116,,,116,116,116,117,117,117,,117',
',,,117,117,,,,117,,117,117,117,117,117,117,117,,,,,,117,117,117,117',
'117,117,117,,,117,,,,,,,117,,,117,117,117,117,117,117,117,117,,117,117',
'117,,117,117,,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117',
',,,,,117,,,,,,,,117,,,,,117,117,117,117,117,117,,,,117,117,,,,,,,117',
',,117,117,117,118,118,118,,118,,,,118,118,,,,118,,118,118,118,118,118',
'118,118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118',
'118,118,118,118,118,,118,118,118,,118,118,,118,118,118,,,,,,,,,,,,,',
',,,,,,118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,118,,,,,118,118,118',
'118,118,118,,,,118,118,,,,,,,118,,,118,118,118,119,119,119,,119,,,,119',
'119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119',
'119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,',
'119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,',
',,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,',
',119,119,119,120,120,120,120,120,,,,120,120,,,,120,,120,120,120,120',
'120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120,120,,120',
'120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120,120,',
',,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,120,',
',,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,497,497',
'497,,497,,,,497,497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497',
'497,497,497,497,497,,,497,,,,,,,497,,,497,497,497,497,497,497,497,497',
'497,497,497,497,,497,497,,497,497,497,,,,,,,,,,,,,,,,,,,,497,,,497,',
',497,497,,,497,,497,,497,,497,,,,,,,,497,,,,,497,497,497,497,497,497',
',,,497,497,,,,,,,497,,497,497,497,497,500,500,500,,500,,,,500,500,,',
',500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,',
',500,,,,,,,500,,,500,500,500,500,500,500,500,500,500,500,500,500,,500',
'500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,,,500',
',500,,,,,,,,500,,,,,500,500,500,500,500,500,,,,500,500,,,,,,,500,,500',
'500,500,500,502,502,502,,502,,,,502,502,,,,502,,502,502,502,502,502',
'502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502',
'502,502,502,502,502,,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,',
',,,,,,502,,,502,,,502,502,,,502,,,,,,502,,,,,,,,502,,,,,502,502,502',
'502,502,502,,,,502,502,,,,,,,502,,,502,502,502,507,507,507,507,507,',
',,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507,507,507',
'507,507,,,507,,,,,,507,507,,507,507,507,507,507,507,507,507,507,,507',
'507,507,,507,507,,507,507,507,,,,,,,,,,,,,,,,,,,,507,,,507,,,507,507',
',,507,,507,,,,507,,,,,,,,507,,,,,507,507,507,507,507,507,,,,507,507',
',,,,,507,507,,,507,507,507,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23',
'23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23',
'23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23',
',,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23',
'23,23,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514,514',
',,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514',
'514,514,514,,514,514,514,,514,514,,,,514,,,,,,,,,,,,,,,,,,,,514,,,514',
',,514,514,,,514,,,,,,,,,,,,,,,,,,,514,514,514,514,514,514,,,,514,514',
',,,,,,514,,,514,514,514,516,516,516,,516,,,,516,516,,,,516,,516,516',
'516,516,516,516,516,,,,,,516,516,516,516,516,516,516,,,516,,,,,,,516',
',,516,516,516,516,516,516,516,516,516,516,516,516,,516,516,,516,516',
'516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,516,,516,,516,,,,',
',,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516,,516,516,516',
'516,208,208,208,,208,,,,208,208,,,,208,,208,208,208,208,208,208,208',
',,,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208,208,208,208',
'208,208,208,,208,208,208,,208,208,,208,208,208,,,,,,,,,,,,,,,,,,,,208',
',,208,,,208,208,,,208,,208,,,,208,,,,,,,,208,,,,,208,208,208,208,208',
'208,,,,208,208,,,,,,,208,,,208,208,208,523,523,523,,523,,,,523,523,',
',,523,,523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523',
',,523,,,,,,,523,,,523,523,523,523,523,523,523,523,,523,523,523,,523',
'523,,,,523,,,,,,,,,,,,,,,,,,,,523,,,523,,,523,523,,,523,,,,,,,,,,,,',
',,,,,,523,523,523,523,523,523,,,,523,523,,,,,,,523,,,523,523,523,209',
'209,209,,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209',
'209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209,209,209',
'209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209',
',,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209,209,209,209,,,,209',
'209,,,,,,,209,,,209,209,209,526,526,526,,526,,,,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,',
',526,,,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526',
'526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526',
',,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,527,527',
'527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527',
'527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527,527,527',
',527,527,527,,527,527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527',
'527,,,527,,,,,,527,,,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527',
',,,,,,527,,,527,527,527,528,528,528,,528,,,,528,528,,,,528,,528,528',
'528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528,,,,,,,528',
',,528,528,528,528,528,528,528,528,,528,528,528,,528,528,,528,528,528',
',,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,,,,,528,,,,,,,,528,,,',
',528,528,528,528,528,528,,,,528,528,,,,,,,528,,,528,528,528,532,532',
'532,,532,,,,532,532,,,,532,,532,532,532,532,532,532,532,,,,,,532,532',
'532,532,532,532,532,,,532,,,,,,,532,,,532,532,532,532,532,532,532,532',
',532,532,532,,532,532,,532,532,532,,,,,,,,,,,,,,,,,,,,532,,,532,,,532',
'532,,,532,,,,,,532,,,,,,,,532,,,,,532,532,532,532,532,532,,,,532,532',
',,,,,,532,,,532,532,532,210,210,210,,210,,,,210,210,,,,210,,210,210',
'210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210',
',,210,210,210,210,210,210,210,210,210,210,210,210,,210,210,,210,210',
'210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,210,,210,,,,',
',,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,210,210,210',
'210,538,538,538,,538,,,,538,538,,,,538,,538,538,538,538,538,538,538',
',,,,,538,538,538,538,538,538,538,,,538,,,,,,,538,,,538,538,538,538,538',
'538,538,538,538,538,538,538,,538,538,,538,538,538,,,,,,,,,,,,,,,,,,',
',538,,,538,,,538,538,,,538,,538,,,,538,,,,,,,,538,,,,,538,538,538,538',
'538,538,,,,538,538,,,,,,,538,,538,538,538,538,541,541,541,,541,,,,541',
'541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541',
'541,,,541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,541,541',
',541,541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,',
',,,,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,,,,,,,541',
',541,541,541,541,213,213,213,,213,,,,213,213,,,,213,,213,213,213,213',
'213,213,213,,,,,,213,213,213,213,213,213,213,,,213,,,,,,,213,,,213,213',
'213,213,213,213,213,213,,213,213,213,,213,213,,213,213,213,,,,,,,,,',
',,,,,,,,,,213,,,213,,,213,213,,,213,,,,,,213,,,,,,,,213,,,,,213,213',
'213,213,213,213,,,,213,213,,,,,,,213,,,213,213,213,214,214,214,,214',
',,,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214,214',
'214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214,214',
'214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214',
',214,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214,,,,,,',
'214,,,214,214,214,215,215,215,,215,,,,215,215,,,,215,,215,215,215,215',
'215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215,215',
'215,215,215,215,215,215,,215,215,215,,215,215,,215,215,215,,,,,,,,,',
',,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,,,215,,,,,215,215',
'215,215,215,215,,,,215,215,,,,,,,215,,,215,215,215,216,216,216,,216',
',,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216,216,216',
'216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216',
'216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216',
',,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216',
',,216,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,',
',,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217',
'217,217,217,,,,217,217,,,,,,,217,,,217,217,217,218,218,218,,218,,,,218',
'218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218',
'218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,',
'218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,',
',,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,218,,,,,,218',
',,218,218,218,565,565,565,,565,,,,565,565,,,,565,,565,565,565,565,565',
'565,565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565',
'565,565,565,565,565,,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,',
',,,,,,565,,,565,,,565,565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565',
'565,565,565,,,,565,565,,,,,,,565,,,565,565,565,586,586,586,,586,,,,586',
'586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586',
'586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,586,586,586,586',
',586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,',
'586,,586,,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586,,,,',
',,586,,586,586,586,586,598,598,598,,598,,,,598,598,,,,598,,598,598,598',
'598,598,598,598,,,,,,598,598,598,598,598,598,598,,,598,,,,,,,598,,,598',
'598,598,598,598,598,598,598,,598,598,598,,598,598,,598,598,598,,,,,',
',,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,,,,,,,,598,,,,,598',
'598,598,598,598,598,,,,598,598,,,,,,,598,,,598,598,598,602,602,602,',
'602,,,,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602,602,602',
'602,602,602,602,,,602,,,,,,,602,,,602,602,602,602,602,602,602,602,,602',
'602,602,,602,602,,602,602,602,,,,,,,,,,,,,,,,,,,,602,,,602,,,602,602',
',,602,,,,,,602,,,,,,,,602,,,,,602,602,602,602,602,602,,,,602,602,,,',
',,,602,,,602,602,602,229,229,229,,229,,,,229,229,,,,229,,229,229,229',
'229,229,229,229,,,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229',
'229,229,229,229,229,229,229,,229,229,229,,229,229,,229,229,229,,,,,',
',,,,,,,,,,,,,,229,,,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229',
'229,229,229,229,229,,,,229,229,,,,,,,229,,,229,229,229,631,631,631,',
'631,,,,631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631',
'631,631,631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631',
'631,631,,631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631',
',,631,,631,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631',
',,,,,,631,,,631,631,631,632,632,632,,632,,,,632,632,,,,632,,632,632',
'632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632,,,,,,,632',
',,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632,632,632',
',,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,,,632,,,',
',632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632,232,232',
'232,,232,,,,232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232',
'232,232,232,232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232',
',232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232',
'232,,,232,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232',
',,,,,,232,,,232,232,232,635,635,635,,635,,,,635,635,,,,635,,635,635',
'635,635,635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635',
',,635,635,635,635,635,635,635,635,635,635,635,635,,635,635,,635,635',
'635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,,',
',,,635,,,,,635,635,635,635,635,635,,,,635,635,,,,,,,635,,635,635,635',
'635,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636',
',,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636',
'636,636,636,636,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,',
',636,,,636,,,636,636,,,636,,,,636,,636,,,,,,,,636,,,,,636,636,636,636',
'636,636,,,,636,636,,,,,,,636,,636,636,636,636,637,637,637,,637,,,,637',
'637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637',
'637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,',
'637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,',
',637,637,637,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638',
'638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638',
'638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,',
',,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638',
'638,638,638,,,,638,638,,,,,,,638,,,638,638,638,233,233,233,,233,,,,233',
'233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233,233',
'233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233,',
'233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233,',
',233,233,233,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643',
'643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643',
'643,643,643,643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,',
',,,,,,643,,,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643',
'643,643,643,,,,643,643,,,,,,,643,,,643,643,643,644,644,644,,644,,,,644',
'644,,,,644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644',
'644,,,644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,',
'644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,',
',,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,',
',644,644,644,234,234,234,,234,,,,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,',
',,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234',
'234,234,234,,,,234,234,,,,,,,234,,,234,234,234,647,647,647,,647,,,,647',
'647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647',
'647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647,',
'647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,',
',,,647,,,,,,,,647,,,,,647,647,647,647,647,647,,,,647,647,,,,,,,647,',
',647,647,647,648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648',
'648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648',
'648,648,648,648,648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,',
',,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648',
'648,648,648,,,,648,648,,,,,,,648,,,648,648,648,235,235,235,,235,,,,235',
'235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235,235',
'235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235,',
'235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235,',
',235,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,',
',,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236',
'236,236,236,,,,236,236,,,,,,,236,,,236,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,',
',,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238',
'238,238,238,,,,238,238,,,,,,,238,,,238,238,238,239,239,239,,239,,,,239',
'239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239',
'239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,',
'239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,',
',239,239,239,672,672,672,,672,,,,672,672,,,,672,,672,672,672,672,672',
'672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,,,672,,,672,672,672',
'672,672,672,672,672,,672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,',
',,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,672,,,,,672,672,672',
'672,672,672,,,,672,672,,,,,,,672,,,672,672,672,677,677,677,,677,,,,677',
'677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677',
'677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,',
'677,677,,,,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,',
',,,,,,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677',
'240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,',
',240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240',
'240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,',
'240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240',
',,,240,240,,,,,,,240,,,240,240,240,241,241,241,,241,,,,241,241,,,,241',
',241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241',
',,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,,241',
'241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,',
',241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241,241',
'242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,',
',242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242',
'242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,',
'242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242',
',,,242,242,,,,,,,242,,,242,242,242,243,243,243,,243,,,,243,243,,,,243',
',243,243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243',
',,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243',
'243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,',
',243,,,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243',
'244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244,,,,',
',244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244,244',
'244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,',
'244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,688,688,688,,688,,,,688,688,,,,688',
',688,688,688,688,688,688,688,,,,,,688,688,688,688,688,688,688,,,688',
',,,,,,688,,,688,688,688,688,688,688,688,688,,688,688,688,,688,688,,',
',688,,,,,,,,,,,,,,,,,,,,688,,,688,,,688,688,,,688,,,,,,,,,,,,,,,,,,',
'688,688,688,688,688,688,,,,688,688,,,,,,,688,,,688,688,688,245,245,245',
',245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245',
'245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245',
'245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245',
',,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,',
',,,245,,,245,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,247,247,247,',
'247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247',
'247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247',
'247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247',
',,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,',
',,,247,,,247,247,247,694,694,694,,694,,,,694,694,,,,694,,694,694,694',
'694,694,694,694,,,,,,694,694,694,694,694,694,694,,,694,,,,,,,694,,,694',
'694,694,694,694,694,694,694,,694,694,694,,694,694,,694,694,694,,,,,',
',,,,,,,,,,,,,,694,,,694,,,694,694,,,694,,694,,,,694,,,,,,,,694,,,,,694',
'694,694,694,694,694,,,,694,694,,,,,,,694,,,694,694,694,248,248,248,',
'248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,712,712,712,,712,,,,712,712,,,,712,,712,712,712',
'712,712,712,712,,,,,,712,712,712,712,712,712,712,,,712,,,,,,,712,,,712',
'712,712,712,712,712,712,712,,712,712,712,,712,712,,712,712,712,,,,,',
',,,,,,,,,,,,,,712,,,712,,,712,712,,,712,,,,,,712,,,,,,,,712,,,,,712',
'712,712,712,712,712,,,,712,712,,,,,,,712,,,712,712,712,249,249,249,',
'249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249',
'249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249',
'249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249',
',,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,',
',,,249,,,249,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250',
'250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250',
'250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,',
',,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250',
'250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,251,251,251,',
'251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,252,252,252,,252,,,,252,252,,,,252,,252,252,252',
'252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252',
'252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252,252,,,,,',
',,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252',
'252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,733,733,733,',
'733,,,,733,733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733,733',
'733,733,733,733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733,,733',
'733,733,,733,733,,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733,733',
',,733,,733,,,,733,,,,,,,,733,,,,,733,733,733,733,733,733,,,,733,733',
',,,,,,733,,,733,733,733,253,253,253,,253,,,,253,253,,,,253,,253,253',
'253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253',
',,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253',
',,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,',
'59,253,253,253,253,253,253,59,59,59,253,253,59,59,59,,59,,253,,,253',
'253,253,,,59,59,59,,,,,,,,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,',
',,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,',
'59,59,,59,,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59',
'59,435,59,,59,,,,435,435,435,,,435,435,435,600,435,600,600,600,600,600',
',,,435,435,435,435,,,600,,,,,435,435,,435,435,435,435,435,,,,,,,,,,600',
'600,,,,,,,,600,600,600,600,,435,435,435,435,435,435,435,435,435,435',
'435,435,435,435,,,435,435,435,,,435,,,435,,,435,435,,435,600,435,,435',
',435,435,435,435,435,435,435,,435,435,435,,,,,,,,,,,,,435,435,435,435',
'436,435,,435,,,,436,436,436,,,436,436,436,706,436,706,706,706,706,706',
',,,436,436,436,436,,,706,,,,,436,436,,436,436,436,436,436,,,,,,,,,,706',
',,,,,,,,706,706,706,706,,436,436,436,436,436,436,436,436,436,436,436',
'436,436,436,,,436,436,436,,,436,,,436,,,436,436,,436,706,436,,436,,436',
'436,436,436,436,436,436,,436,436,436,,,,,,,,,,,,,436,436,436,436,30',
'436,,436,,,,30,30,30,,,30,30,30,546,30,546,546,546,546,546,,,,30,30',
'30,,,,546,,,,,30,30,,30,30,30,30,30,,,,,,,,,,546,,,,,,,,,546,546,546',
'546,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30',
',,30,30,,30,546,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,31',
'30,30,,30,,30,31,31,31,,,31,31,31,882,31,882,882,882,882,882,,,,,31',
'31,,,,882,,,,,31,31,,31,31,31,31,31,,,,,,,,,,882,,,,,,,,,882,882,882',
'882,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31',
',,31,31,,31,882,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,426',
'31,31,,31,,31,426,426,426,,,426,426,426,885,426,885,885,885,885,885',
',,,426,426,426,,,,885,,,,,426,426,,426,426,426,426,426,,,,,,,,,,885',
',,,,,,,,885,885,885,885,,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,,,426,426,426,,,426,,426,426,,,426,426,,426,885,426,,426',
',426,426,426,426,426,426,426,,426,426,426,,,,,,,,,,,,484,426,426,,426',
',426,484,484,484,,,484,484,484,,484,659,,659,659,659,659,659,,484,484',
',,,,,,659,,,484,484,,484,484,484,484,484,,,910,,910,910,910,910,910',
',,659,,,,,,,910,,659,659,659,659,,,,,,,,,,,484,,,,,,910,484,,,,,484',
'484,659,910,910,910,910,,,,659,,451,451,,,451,,,,,,484,484,,451,451',
',451,451,451,451,451,451,451,,484,451,451,910,,484,451,451,451,451,',
',,,,451,,,,,,,,451,451,,451,451,451,451,451,451,451,451,451,451,451',
',,451,,,,,,,,,,744,744,,,744,,,,,,451,,,744,744,451,744,744,744,744',
'744,744,744,,,744,744,,,,744,744,744,744,,,,,,744,,,,,,,,744,744,,744',
'744,744,744,744,744,744,744,744,744,744,,,744,,,,,,,,,,587,587,,,587',
',,,,,744,,,587,587,744,587,587,587,587,587,587,587,,,587,587,,,,587',
'587,587,587,,,,,,587,,,,,,,,587,587,,587,587,587,587,587,587,587,587',
'587,587,587,,,587,,,,,,,,,,588,588,,,588,,,,,,587,,,588,588,587,588',
'588,588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,',
',588,588,,588,588,588,588,588,588,588,588,588,588,588,,,588,,,,,,,,',
',1006,1006,,,1006,,,,,,588,,,1006,1006,588,1006,1006,1006,1006,1006',
'1006,1006,,,1006,1006,,,,1006,1006,1006,1006,,,,,,1006,,,,,,,,1006,1006',
',1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,1006,,,1006,,,,,',
',,,,1005,1005,,,1005,,,,,,1006,,,1005,1005,1006,1005,1005,1005,1005',
'1005,1005,1005,,,1005,1005,,,,1005,1005,1005,1005,,,,,,1005,,,,,,,,1005',
'1005,,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,1005,,753,1005',
'753,753,753,753,753,,,,,260,260,,,260,753,,,,,1005,,,260,260,1005,260',
'260,260,260,260,260,260,,,260,260,753,,,260,260,260,260,,,753,753,753',
'753,,,,,,,,260,260,,260,260,260,260,260,260,260,260,260,260,260,,,260',
',,,,,,,,753,956,956,,,956,,,,,,260,,,956,956,260,956,956,956,956,956',
'956,956,,,956,956,,,,956,956,956,956,,,,,,956,,,,,,,,956,956,,956,956',
'956,956,956,956,956,956,956,956,956,,,956,,,,,,,,,,212,212,,,212,,,',
',,956,,,212,212,956,212,212,212,212,212,212,212,,,212,212,,,,212,212',
'212,212,,,,,,212,,,,,,,,212,212,,212,212,212,212,212,212,212,212,212',
'212,212,,,212,,,,,,,,,,211,211,,,211,,,,,,212,,,211,211,212,211,211',
'211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211,,,,,,,,211',
'211,,211,211,211,211,211,211,211,211,211,211,211,,,211,,,,,,,,,,530',
'530,,,530,,,,,,211,,,530,530,211,530,530,530,530,530,530,530,,,530,530',
',,,530,530,530,530,,,,,,530,,,,,,,,530,530,,530,530,530,530,530,530',
'530,530,530,530,530,,,530,,,,,,,,,,529,529,,,529,,,,,,530,,,529,529',
'530,529,529,529,529,529,529,529,,,529,529,,,,529,529,529,529,,,,,,529',
',,,,,,,529,529,,529,529,529,529,529,529,529,529,529,529,529,,,529,,',
',,,,,,,518,518,,,518,,,,,,529,,,518,518,529,518,518,518,518,518,518',
'518,,,518,518,,,,518,518,518,518,,,,,,518,,,,,,,,518,518,,518,518,518',
'518,518,518,518,518,518,518,518,,,518,,,,,,,,,,450,450,,,450,,,,,,518',
',,450,450,518,450,450,450,450,450,450,450,,,450,450,,,,450,450,450,450',
',,,,,450,,,,,,,,450,450,,450,450,450,450,450,450,450,450,450,450,450',
',,450,,,,,,,,,,743,743,,,743,,,,,,450,,,743,743,450,743,743,743,743',
'743,743,743,,,743,743,,,,743,743,743,743,,,,,,743,,,,,,,,743,743,,743',
'743,743,743,743,743,743,743,743,743,743,,,743,,,,,,,,,,517,517,,,517',
',,,,,743,,,517,517,743,517,517,517,517,517,517,517,,,517,517,,,,517',
'517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517,517,517',
'517,517,517,,939,517,939,939,939,939,939,338,,338,338,338,338,338,,',
'939,,,,,517,,338,,989,517,989,989,989,989,989,,,,,,,939,939,,989,,,',
'338,338,939,939,939,939,,,,338,338,338,338,,,,,,989,,,,,,,,,989,989',
'989,989,,,,,,,,939,,,,,,,338,,,,,,,,,,,,,,,,,,989' ]
        racc_action_check = arr = ::Array.new(25641, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1382,  1741,    28,   nil,   393,   nil,   nil, 12922,  1064,
   nil,  1064,  1340,   -24,   nil,   -15,    58,  1099,   430,    47,
   599,   nil,   -88, 15098,  2837,   179,   nil,   359,   nil,   159,
 23898, 24023,  8298,  5850,  8570,   nil,  5577,  9250,  9386,   nil,
    86,   153,   353,   206,   587, 10338, 10746, 11018,   144,   822,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23508,
   nil, 11290, 11426, 11970,     2,   nil, 12106, 12242,   nil,   nil,
 12650, 12786,   211,   nil,   926,   nil,   nil,   nil,   nil,   nil,
   -98,   nil,   nil,   nil,   nil,   nil,   nil,   182,   244,   258,
   267,  1616,   nil,   nil,   nil,   382,   nil,   nil,   646,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13738,   nil,   nil,   nil,   nil, 13874, 14010, 14146, 14282,
 14418,   289,   nil,   789,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   291,   nil,  3796, 15506, 15778,
 16458, 24981, 24908, 16866, 17002, 17138, 17274, 17410, 17546,   nil,
   nil,  1374,   -43,   197,   376,   273,   300,   376,   nil, 18226,
  2563,   384, 18634, 19314, 19722, 20130, 20266, 20402, 20538, 20674,
 21082, 21218, 21354, 21490, 21626, 21898, 22034, 22170, 22442, 22714,
 22850, 22986, 23122, 23394,  6258,  6666,  7482,  7618,   nil,   nil,
 24762,   nil,   nil,   381,  7754,   nil,   404,   nil,   nil,   nil,
  7890,   nil,   nil,  8026,   nil,  2426,   nil,   372,   383,   nil,
  8434,   430,  8706,   nil,  8842,  8978,   nil,   nil,   632,   nil,
   788,  9114,   394,  5714,   422,   478,   442,  9522,  2152,  1237,
  1321,  1240,   525,  1103,   nil,   520,   488,   -14,   nil,   nil,
   nil,   526,   325,   497, 10610,   nil,   377,   583,   585,   606,
   nil,   601,   nil, 11154,  4755,   510,   nil,   578,   nil,   374,
   288,   584,   567,   nil,   477,   593,   nil,   nil, 25488,   524,
    21,    18, 11562, 11834,   571,   679,   567,    26,     1,   458,
   651,    78,   685,   nil,   nil, 12378,   nil, 12514,   -56,   261,
   221,   140,   -19,   -21,   414,   322,   157,   nil,   142,   nil,
   nil,   nil,   nil,   nil,   282,   nil,   290,   nil,   376,   nil,
   587,   312,   nil,   589,   125,   nil,   604,   120,   nil,   612,
   116,   nil,   325,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  2015,  1478,   nil,   nil,   nil,
   nil,   623,   nil,   609,   nil, 13058,   613,   nil,  2015,   620,
   nil,   nil,   627,   633,   429,   420, 24148,   nil,   nil,   nil,
     0,   125,   675,   nil,   nil, 23638, 23768,   nil,  3385,   nil,
   623,   nil,   nil,  1741,   nil,   nil,   nil,   nil,    53,   nil,
 25273, 24324, 13194,   221, 13330, 13466, 13602,  4344,  4207,   471,
   572,   700,   717,   718,   720,  1193,  1055,   779,  4481,   677,
  4618,  4755,  4892,  5029,  5166,  5303,  5440,  5577,   -43,   665,
  4070,  5714,  3522,   -58, 24273,   nil,   nil,   nil,   nil,   nil,
   nil,   -60,   114,   688,   689,   nil,   nil, 14554,   nil,   nil,
 14690,   nil, 14826,   nil,   nil,   nil,   nil, 14962,   926,   690,
   712,   nil,   nil,   715, 15234,   719, 15370, 25419, 25200,   222,
   759,   nil,   nil, 15642,   721,   nil, 15914, 16050, 16186, 25127,
 25054,  2289, 16322,   844,   845,   740,   nil,   nil, 16594,   nil,
   nil, 16730,   nil,   nil,   nil,    -9, 23862,   nil,   738,   739,
   nil,   745,   751,   752,   nil,   nil,   nil,   nil,   nil,   nil,
   745,   nil,   nil,   650,   nil, 17682,   nil,   nil,   nil,   850,
   nil,   nil,   nil,   852,   nil,   nil,   853,  3385,   893,   nil,
  2837,   134,    55,   897,   905,   nil, 17818, 24470, 24543,    58,
   nil,   390,   189,   297,   nil,  1375,   nil,     9, 17954,   nil,
 23602,   nil, 18090,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   181,   nil,   nil,   151,   nil,   nil,
   nil,   793,   nil,   nil,   794,   nil,   812,   nil,  1202,   nil,
   797, 18362, 18498,   166,   857, 18770, 18906, 19042, 19178,   857,
   nil,   nil,   nil, 19450, 19586,   890,   nil, 19858, 19994,   nil,
   249,   256,   250,   514,   863,  1878,   864,   nil,   nil, 24239,
   nil,   nil,   973,    71,   -63,   nil,   nil,   nil,   nil,   872,
   nil,   916, 20810,   nil,   nil,  1110,  -108, 20946,   877,   nil,
   892,    30,    28,   929,   220,  1340,   932,   894, 21762,  3111,
   959,   975,    56,  1030, 22306,   nil,   nil,   478,   nil,  2700,
  5166,   921,   371,   nil,   nil,   265, 23732,   nil,   478,   nil,
  6302,   nil, 22578,   nil,   822,   nil,   922,   375,   nil,   926,
   nil,   nil,   nil,   nil,   624,   nil,  1039,   nil,   nil,   nil,
   nil,  1047,   nil, 23258,   932,    62,    41,    88,     7,  5986,
   nil,  1098,   nil, 25346, 24397,  6122,   nil,   nil,   nil,   525,
   405,  3111,  3248, 24751,   498,   788,   -31,  1205,  4618,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   932,  6394,  3659,  6530,
   nil,   933,   nil,  3933,   nil,  2700,   nil,   nil,  2563,   nil,
  3248,   nil,  3796,  6802,  6938,  7074,  7210,   126,  7346,   934,
   935,   nil,   961,   962,   963,   nil,  1009,   994,   995,   987,
  8162,   nil,   nil,  4207,   nil,   nil,   nil,  4344,  4481,   nil,
   nil,  1013,   219,   nil,   nil,  1135,   nil,  5029,  1015,  1067,
   nil,   nil,   nil,  1044,  1155,  1056,  1056,   nil,   nil,   nil,
  1057,  1061,   nil,  1062,  1065,   nil,  1066,   nil,  1073,   610,
  1071,   639,   nil,  1192,   nil,  9658,  1193,  2289,  2426,   nil,
    43,   151,    32,   290,  1236,   nil,  1102,  1878,  9794,   nil,
   -78,  1220,  1221,  1115,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1129,  1114,   nil,  2152,  9930, 10066,  2974,   121,
   nil,   nil, 23987,   nil,   nil, 24112,   nil,  6030,   nil,   nil,
  1135,  1070, 10202,  1102,  1190,  1246,  5440,  1143,  1252,   nil,
  5303,   nil,   nil,    -8, 10474,   nil,   nil,   nil,   nil,   nil,
 24268,   nil,  6438,   nil,  6574,   nil,  6710,   nil,   nil,   nil,
   nil,   316,   511,  1136,   nil,   -11,   nil,  1259,  1271, 10882,
  4892,   nil,   nil,  1272,   413,   nil,   nil,   nil,   nil, 25481,
   nil,  1153,   nil,   nil,  1158,  1159,  1160,  1161,   nil,  1162,
   nil,   159,   nil,   nil,   nil,   927, 24835,   nil,   nil,  1180,
   nil,   nil,   nil,  3522,   961,   963,   965,  1240,   960,   nil,
  1173,  1190,  1191,  1194,  1195,   960,  1199,   931,  3933,   nil,
   nil,   nil,    31,  3659,   nil,   nil,  4070,  2974,   nil, 25506,
   nil,  6846,   nil,  6982,   nil,  7118,   nil,   nil,   nil,   855,
  1239,  1242,   nil,  1326, 11698, 24689, 24616,  1341,  7254,   nil,
   nil,   nil,   nil,   864,  1206,   582,   nil,   nil,   nil,  1328,
  1329,  1330,  1211,  1237,  1238,  1239,   nil,   nil,  1253,    -9,
    22,    20,  1342,  1251,  1252,   nil,   nil,   nil,   nil,   577,
   nil,   nil,   nil,   nil,    11,   nil,  -109,   nil ]

racc_action_default = [
    -1,  -626,  -625,  -626,    -2,  -612,    -4,    -5,  -626,    -8,
    -9,  -626,  -626,  -626,   -29,  -626,  -626,  -626,  -283,  -626,
   -41,   -44,  -614,  -626,   -49,   -51,   -52,   -53,   -58,  -260,
  -260,  -260,  -295,  -334,  -335,   -70,  -625,   -74,   -82,   -84,
  -626,  -519,  -520,  -626,  -626,  -626,  -626,  -626,  -614,  -241,
  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -281,  -282,  -602,
  -285,  -614,  -625,  -625,  -303,  -406,  -626,  -626,  -308,  -311,
  -612,  -626,  -319,  -326,  -626,  -336,  -337,  -448,  -449,  -450,
  -451,  -452,  -453,  -625,  -456,  -625,  -625,  -625,  -625,  -625,
  -625,  -625,  -493,  -499,  -500,  -600,  -508,  -509,  -601,  -511,
  -512,  -513,  -514,  -515,  -516,  -517,  -518,  -523,  -524,  1048,
    -3,  -613,  -621,  -622,  -623,    -7,  -626,  -626,  -626,  -626,
  -626,  -626,   -17,  -626,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,   -22,  -122,  -625,  -626,  -626,
  -625,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -614,  -615,
   -48,  -626,  -519,  -520,  -626,  -283,  -626,  -626,  -233,  -626,
  -625,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -626,  -412,  -415,
  -626,  -610,  -611,   -59,  -626,  -302,  -626,  -429,  -432,   -65,
  -625,  -426,   -66,  -614,   -67,  -242,  -255,  -625,  -625,  -259,
  -626,  -265,  -626,  -595,  -626,  -626,   -68,   -69,  -612,   -13,
   -14,  -626,   -72,  -625,  -614,  -626,   -75,   -78,  -625,   -90,
   -91,  -626,  -626,   -98,  -295,  -298,  -614,  -419,  -334,  -335,
  -338,  -427,  -626,   -80,  -626,   -86,  -292,  -501,  -502,  -626,
  -218,  -219,  -234,  -626,  -625,  -288,  -287,  -626,  -243,  -618,
  -618,  -626,  -626,  -593,  -618,  -626,  -304,  -305,  -551,   -50,
  -626,  -626,  -626,  -626,  -612,  -626,  -613,  -519,  -520,  -626,
  -626,  -283,  -626,  -359,  -360,  -626,  -322,  -626,  -113,  -114,
  -156,  -157,  -158,  -174,  -179,  -186,  -189,  -329,  -626,  -519,
  -520,  -590,  -591,  -454,  -626,  -477,  -626,  -479,  -626,  -481,
  -626,  -626,  -461,  -626,  -626,  -467,  -626,  -626,  -473,  -626,
  -626,  -475,  -626,  -492,  -494,  -495,  -496,  -497,    -6,  -624,
   -23,   -24,   -25,   -26,   -27,  -625,  -626,   -19,   -20,   -21,
  -123,  -626,   -30,   -39,   -40,  -626,  -626,   -31,  -199,  -614,
  -250,  -251,  -625,  -625,  -603,  -604,  -260,  -424,  -605,  -606,
  -604,  -603,  -260,  -423,  -425,  -605,  -606,   -37,  -207,   -38,
  -626,   -42,   -43,  -197,  -265,   -45,   -46,   -47,  -614,  -301,
  -626,  -626,  -625,  -292,  -626,  -626,  -626,  -208,  -209,  -210,
  -211,  -212,  -213,  -214,  -215,  -220,  -221,  -222,  -223,  -224,
  -225,  -226,  -227,  -228,  -229,  -230,  -231,  -232,  -235,  -236,
  -237,  -238,  -614,  -625,  -260,  -603,  -604,   -55,   -60,  -261,
  -420,  -625,  -625,  -614,  -614,  -297,  -256,  -626,  -264,  -257,
  -626,  -262,  -626,  -266,  -598,  -599,   -12,  -613,   -16,  -614,
   -71,  -290,   -87,   -76,  -626,  -614,  -625,  -626,  -626,   -97,
  -626,  -501,  -502,  -626,   -83,   -88,  -626,  -626,  -626,  -626,
  -626,  -239,  -626,  -440,  -626,  -614,  -616,  -244,  -620,  -619,
  -246,  -620,  -293,  -294,  -594,  -626,  -551,  -409,  -589,  -589,
  -534,  -536,  -536,  -536,  -550,  -552,  -553,  -554,  -555,  -556,
  -557,  -558,  -559,  -626,  -563,  -626,  -569,  -571,  -572,  -574,
  -579,  -581,  -582,  -584,  -585,  -586,  -626,  -625,  -350,  -351,
  -625,  -626,  -626,  -626,  -626,  -435,  -625,  -626,  -626,  -292,
  -316,  -108,  -109,  -626,  -111,  -626,  -283,  -626,  -626,  -327,
  -551,  -331,  -626,  -455,  -478,  -483,  -484,  -486,  -457,  -480,
  -458,  -482,  -459,  -460,  -626,  -463,  -465,  -626,  -466,  -469,
  -470,  -626,  -471,  -472,  -626,  -498,  -626,   -18,  -626,   -28,
  -273,  -626,  -626,  -428,  -626,  -252,  -254,  -626,  -626,   -61,
  -248,  -249,  -421,  -626,  -626,   -63,  -422,  -626,  -626,  -300,
  -603,  -604,  -603,  -604,  -614,  -197,  -626,  -395,  -396,  -614,
  -398,  -413,   -54,  -416,  -625,  -430,  -433,  -247,  -296,  -625,
  -263,  -267,  -626,  -596,  -597,   -15,   -73,  -626,   -79,   -85,
  -614,  -603,  -604,  -625,   -94,   -96,  -626,   -81,  -626,  -206,
  -216,  -217,  -614,  -625,  -625,  -286,  -289,  -618,  -407,  -625,
  -625,  -614,  -626,  -532,  -533,  -626,  -626,  -543,  -626,  -546,
  -626,  -548,  -626,  -361,  -626,  -363,  -365,  -372,  -557,  -614,
  -565,  -573,  -583,  -587,  -625,  -352,  -625,  -309,  -353,  -354,
  -312,  -626,  -315,  -626,  -614,  -603,  -604,  -607,  -291,  -626,
  -108,  -109,  -110,  -626,  -626,  -625,  -320,  -525,  -526,  -626,
  -323,  -625,  -625,  -551,  -626,  -626,  -614,  -626,  -625,  -462,
  -464,  -468,  -474,  -476,   -10,  -124,  -271,  -626,  -200,  -626,
  -617,  -625,   -33,  -202,   -34,  -203,   -62,   -35,  -205,   -36,
  -204,   -64,  -198,  -626,  -626,  -626,  -626,  -428,  -626,  -589,
  -589,  -377,  -625,  -625,  -625,  -394,  -626,  -614,  -400,  -557,
  -626,  -567,  -577,  -625,  -418,  -417,   -56,  -625,  -625,  -258,
  -268,   -77,   -92,   -89,  -299,  -625,  -357,  -625,  -441,  -625,
  -442,  -443,  -245,  -626,  -626,  -614,  -589,  -570,  -588,  -535,
  -536,  -536,  -564,  -536,  -536,  -580,  -536,  -575,  -614,  -626,
  -370,  -626,  -560,  -626,  -355,  -626,  -626,  -625,  -625,  -314,
  -626,  -428,  -626,  -108,  -109,  -112,  -614,  -625,  -626,  -528,
  -626,  -626,  -626,  -614,  -530,  -332,  -592,  -485,  -488,  -489,
  -490,  -491,  -626,  -272,   -32,  -201,  -253,  -626,  -240,  -626,
  -375,  -376,  -385,  -379,  -387,  -626,  -390,  -626,  -392,  -397,
  -626,  -626,  -626,  -566,  -626,  -626,  -625,  -626,  -626,   -11,
  -625,  -447,  -358,  -626,  -626,  -445,  -410,  -411,  -408,  -531,
  -626,  -539,  -626,  -541,  -626,  -544,  -626,  -547,  -549,  -362,
  -364,  -368,  -626,  -373,  -306,  -626,  -307,  -626,  -626,  -626,
  -625,  -317,  -428,  -626,  -626,  -324,  -328,  -330,  -529,  -551,
  -487,  -589,  -568,  -378,  -625,  -625,  -625,  -625,  -578,  -625,
  -399,  -614,  -402,  -404,  -405,  -576,  -626,  -292,  -414,  -626,
  -431,  -434,  -446,  -625,   -99,  -100,  -626,  -626,  -107,  -444,
  -536,  -536,  -536,  -536,  -366,  -626,  -371,  -626,  -625,  -310,
  -313,  -267,  -625,  -625,  -321,  -527,  -625,  -625,  -374,  -626,
  -382,  -626,  -384,  -626,  -388,  -626,  -391,  -393,  -401,  -626,
  -291,  -607,   -57,  -440,  -625,  -626,  -626,  -106,  -626,  -537,
  -540,  -542,  -545,  -626,  -369,  -625,  -436,  -437,  -438,  -626,
  -626,  -626,  -625,  -625,  -625,  -625,  -403,  -439,  -614,  -603,
  -604,  -607,  -105,  -536,  -367,  -356,  -318,  -325,  -333,  -626,
  -380,  -383,  -386,  -389,  -428,  -538,  -625,  -381 ]

clist = [
'6,217,276,276,276,367,426,432,534,336,17,259,633,271,693,499,17,584',
'442,127,127,296,394,132,132,554,4,323,547,673,524,221,419,122,206,260',
'114,414,577,580,221,221,221,439,17,301,301,130,130,313,752,707,709,711',
'111,484,295,815,110,9,328,333,488,294,742,9,310,310,670,221,673,670',
'832,843,221,221,727,730,221,349,793,375,127,377,379,382,385,388,391',
'377,846,835,493,719,263,269,272,537,540,127,310,114,544,954,920,292',
'325,923,277,277,277,339,339,703,704,339,713,983,355,17,952,661,857,345',
'221,221,221,221,17,665,666,796,115,948,376,598,614,604,329,617,392,611',
'860,597,615,599,986,615,357,340,341,751,600,344,755,939,848,343,847',
'342,499,339,339,339,339,673,795,535,9,274,286,287,324,825,368,746,797',
'404,352,337,276,332,371,220,951,663,331,545,976,698,338,628,483,803',
'427,491,807,492,808,400,401,402,403,1016,794,733,670,670,420,819,903',
'954,373,374,855,17,221,221,221,896,436,221,221,221,221,221,221,411,1026',
'378,678,381,1,554,276,398,701,948,17,687,276,1014,920,276,838,426,432',
'787,832,490,295,831,664,833,384,731,387,390,867,757,445,446,447,448',
'758,393,335,713,420,890,840,858,221,812,654,498,498,406,221,1034,354',
'221,832,830,416,520,205,554,827,942,416,899,121,835,271,602,739,2,525',
'17,,17,806,944,,301,17,,513,,,,683,295,278,278,278,,295,114,509,,301',
',683,515,310,851,,,911,913,17,915,917,,918,507,680,,277,506,,310,330',
'334,1017,931,508,277,221,221,,,880,881,,,,,,832,292,595,1035,595,,292',
'412,417,,,,437,441,114,601,760,,,760,,683,,310,,310,339,339,987,,909',
'713,811,713,,,583,634,,,489,,6,,673,809,,734,641,494,413,,17,127,646',
',444,132,,498,498,276,,640,581,582,945,627,626,946,,,427,,861,862,,776',
',554,,130,863,781,,,670,,932,420,442,,,,970,,,,436,221,656,9,,,822,',
'641,,,1009,1010,1011,1012,974,713,,,,,,657,640,501,1027,503,276,504',
'505,657,657,639,,,,,,645,525,,427,,,,,,988,525,809,,,,427,,420,17,,',
',,,,301,820,221,,436,,713,,713,301,,1045,1022,,,,436,683,221,933,,310',
',,278,,930,662,,,310,,,278,276,,,,,,,,675,,713,856,,,427,,,,,,,692,',
',,,,,420,17,,,17,,,,,,221,,436,724,,,726,963,,,,,221,,805,,221,,728',
'728,,,,,630,,,1044,,978,,,554,,747,326,,,,634,,,127,,798,,132,,,750',
',221,221,756,804,,765,221,221,,1018,221,,,,634,,525,657,,130,,641,498',
',646,1020,1021,813,,,,,,,,798,640,,,,301,865,,,,,816,821,,,,301,,,,671',
',,335,,674,310,17,17,,,,,634,,276,,310,,823,824,,816,,816,,,427,,,,',
',,,,,,,,,671,,420,335,,,221,,,,436,,221,,,,,,17,17,,,127,,,17,,720,498',
'416,,,,,,798,221,872,669,859,,,,339,864,449,,,,883,883,883,,,,,772,774',
',683,,,777,779,,,441,893,850,,17,,901,790,17,17,905,,,697,,852,895,',
'17,1028,897,898,310,,,,,766,634,,902,671,335,,495,29,,,,,,29,,,,,221',
',17,17,826,18,,,,510,29,18,17,221,927,928,,,,29,29,29,810,29,,,,,,,728',
',,,,791,,339,935,18,303,303,,,818,,,955,29,,339,17,,29,29,17,,29,,966',
',,837,959,771,,,962,310,,,,,,351,925,874,998,828,,310,828,,444,,17,',
',934,883,883,883,883,,883,792,,982,29,,,,,29,29,29,29,29,,,,436,985',
',18,,,873,17,,,276,,18,,,,816,,,1003,,,17,,427,,,17,,,17,17,,834,1015',
'836,,,420,1019,884,886,888,634,,,,,221,816,436,,649,,,,883,883,883,883',
',,,,,,,,,,941,,,790,,,790,,790,,883,,,29,29,29,29,,,29,29,29,29,29,29',
',,667,668,18,,,16,,,,29,,16,,,,,676,,335,,,,679,,,18,,,,,42,,,,,,42',
',,16,,,696,29,,,,828,,29,791,,29,791,,791,,,,,,,,,42,300,300,,,,29,981',
'29,,,,,29,,,,,,790,,790,18,790,18,790,,,303,18,,990,992,994,996,348',
'997,,370,29,,,,,,303,,,,947,16,949,,,,18,,29,29,16,,,,,,,,,,790,,,,',
'971,42,972,,973,,,,,,42,,596,,596,,,,,791,,791,,791,,791,,,,,,,,,,1040',
'1041,1042,1043,,,,,,,,29,,,,,,,,,,,,,1047,,814,18,,,,,,,791,,,16,,,',
',,,1023,,1024,,1025,,,,,842,,,,,29,,16,,42,1033,,,,,,,,,,,,,,,,,,,,',
',42,,,,,866,,,,1046,,,,,,,,,,,,41,,,,,,41,29,,,,,,,,16,29,16,,,,,16',
'18,,,,,,,303,,29,,41,299,299,,,303,42,,42,,,,300,42,16,,,,,908,,,,,',
',,,,300,,,919,,,347,,,369,42,,,,29,,,29,,,,,,29,,,,,938,,18,,,18,,29',
',,,29,,370,,370,,,41,,,,,,,,,41,,,,,,,,,,,16,,,,,,,,29,29,,,,,29,29',
',,29,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,303,,,,,,29,29,',
',,303,41,,,,,,,,,,18,18,,,,,,,,,,,,41,,,16,,,,,,,,29,,,,,,29,,,,,,29',
'29,,,,42,,29,,,,,300,,,,18,18,29,,,300,871,18,,,,,,,,,,,,,,,41,,41,',
',,299,41,,,,,16,,29,16,,,29,29,,,,299,,,,596,29,,18,,,41,18,18,19,42',
',,42,,19,,18,,,,,,,,,,,,29,,29,29,,,,,369,,369,,29,29,19,,,,18,18,,',
',,,,,,18,,,,,,,,,,,,,,,,,,,,,353,,29,,,,29,,,41,,,,,596,,,,18,,,,18',
',,,968,,,16,16,,300,,,,29,,,,19,,,300,,,,,,19,,,18,,42,42,,,,,,,,,,',
',,,29,,,,,,,,,,,,16,16,,29,18,,,16,29,,,29,29,,,,,,,18,,,,,18,42,42',
'18,18,29,41,,42,,,,,299,,,,,,,,,299,,,,,,16,,,19,16,16,,,,,440,,,,16',
',,,,,,,370,,,42,19,,,42,42,,,,,,,,,42,,,,,16,16,,,41,,,41,,,16,,,,,',
',,,,,,,,,42,42,,,,,,,,,42,,,,,,,,19,,19,,,,16,19,,,16,,,,,,,,,,,,,,',
',,370,,,,42,,19,,42,,,,965,16,,,,,,,,,,,,,,,,,,,,,299,,,,42,,,,,,,299',
'16,,,,,,,,,,41,41,,,,16,,,,,16,,,16,16,42,,,,,,,,,,,,,,,42,19,,,,42',
',,42,42,,,,,,,,,,,,,41,41,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,369,,,41,,,,41,41,,,,,,,,,41,,,,,,,,,,,,,,,19,,,,,,,,,228,,,',
',,41,41,,275,275,275,,,,,41,,,,,,320,321,322,,,,,,,,,,,,,,,275,275,',
',,,,,,,,,369,,,,41,,,,41,,19,,964,19,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,440,,,,,,41,,,,,41,,,41,41,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,19,275,418,275,,,438,443,,,,,,',
',,,,,,,,228,,,457,458,459,460,461,462,463,464,465,466,467,468,469,470',
'471,472,473,474,475,476,477,478,479,480,481,482,19,19,,,,,275,19,,,',
',275,,,275,,,,,,,275,,275,,275,275,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,19',
'19,,,,,,,,531,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,19,,,,,,,,,19,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,19,,,,969,,,,275,,,,,,,,,,,,',
',,,,,,,,,19,,,,,,,,,,,,,,,275,,438,655,418,,,,,,,,,,,,,,19,,,,,,,,,',
',,,,,19,,,,,19,,,19,19,,,275,,,275,,275,,,,,,,,,,,,,,275,,,,,,,,,,689',
'690,691,,,,,,,,,,275,,,275,,,,,,,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,',
',,,,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,275,768,,,275',
'275,773,775,,,,,778,780,,,655,782,,,,,,,,,,,,,,,,,,,,,,,,275,,,,,,,',
',,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,275,,,,,',
',,,,,,275,,,,,,,,,,,,,,,,,,,,,,275,,875,,,,,,,,,,,,,,773,775,780,778',
',878,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,275,875,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,275,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,275' ]
        racc_goto_table = arr = ::Array.new(3161, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,33,35,35,35,59,39,39,10,87,24,151,26,71,13,73,24,93,20,60,60,52,59',
'64,64,182,2,33,150,196,54,24,25,17,17,38,96,29,90,90,24,24,24,29,24',
'24,24,63,63,53,97,184,184,184,8,39,12,14,5,9,6,6,41,49,57,9,66,66,74',
'24,196,74,187,91,24,24,92,92,24,24,140,6,60,6,6,6,6,6,6,6,14,191,25',
'130,40,40,40,69,69,60,66,96,69,146,128,48,31,131,68,68,68,31,31,135',
'135,31,129,106,107,24,145,42,108,5,24,24,24,24,24,42,42,143,7,192,168',
'109,171,172,68,171,168,172,110,58,172,58,111,172,112,19,19,113,114,19',
'115,116,104,103,102,101,73,31,31,31,31,196,132,100,9,47,47,47,99,143',
'98,95,138,9,94,89,35,86,85,22,144,72,67,147,131,148,149,65,152,153,71',
'156,157,158,159,19,19,19,19,160,141,161,74,74,6,162,163,146,166,167',
'57,24,24,24,24,45,60,24,24,24,24,24,24,12,145,169,54,170,1,182,35,7',
'150,192,24,54,35,131,128,35,130,39,39,26,187,71,12,141,44,141,173,93',
'174,175,176,177,31,31,31,31,178,179,30,129,6,143,129,181,24,26,25,6',
'6,32,24,131,21,24,187,185,68,33,18,182,188,189,68,15,11,191,71,195,105',
'3,52,24,,24,42,140,,24,24,,53,,,,39,12,70,70,70,,12,96,49,,24,,39,49',
'66,26,,,184,184,24,184,184,,184,8,25,,68,5,,66,70,70,14,92,9,68,24,24',
',,135,135,,,,,,187,48,24,91,24,,48,22,22,,,,22,22,96,38,172,,,172,,39',
',66,,66,31,31,97,,135,129,54,129,,,5,33,,,47,,6,,196,73,,25,71,47,30',
',24,60,71,,30,64,,6,6,35,,6,19,19,141,17,2,141,,,71,,10,10,,41,,182',
',63,150,41,,,74,,26,6,20,,,,141,,,,60,24,33,9,,,69,,71,,,184,184,184',
'184,129,129,,,,,,6,6,30,13,30,35,30,30,6,6,40,,,,,,40,52,,71,,,,,,135',
'52,73,,,,71,,6,24,,,,,,,24,29,24,,60,,129,,129,24,,184,141,,,,60,39',
'24,10,,66,,,70,,90,40,,,66,,,70,35,,,,,,,,9,,129,25,,,71,,,,,,,31,,',
',,,,6,24,,,24,,,,,,24,,60,12,,,12,90,,,,,24,,87,,24,,96,96,,,,,30,,',
'26,,90,,,182,,96,50,,,,33,,,60,,33,,64,,,31,,24,24,31,151,,17,24,24',
',93,24,,,,33,,52,6,,63,,71,6,,71,10,10,52,,,,,,,,33,6,,,,24,59,,,,,6',
'6,,,,24,,,,30,,,30,,30,66,24,24,,,,,33,,35,,66,,12,12,,6,,6,,,71,,,',
',,,,,,,,,,30,,6,30,,,24,,,,60,,24,,,,,,24,24,,,60,,,24,,30,6,68,,,,',
',33,24,12,70,96,,,,31,96,50,,,,6,6,6,,,,,22,22,,39,,,22,22,,,22,24,68',
',24,,6,134,24,24,6,,,70,,19,12,,24,25,12,12,66,,,,,30,33,,12,30,30,',
'50,43,,,,,,43,,,,,24,,24,24,134,27,,,,50,43,27,24,24,12,12,,,,43,43',
'43,30,43,,,,,,,96,,,,,136,,31,96,27,27,27,,,30,,,24,43,,31,24,,43,43',
'24,,43,,24,,,30,12,70,,,12,66,,,,,,27,19,22,33,136,,66,136,,30,,24,',
',19,6,6,6,6,,6,139,,12,43,,,,,43,43,43,43,43,,,,60,96,,27,,,30,24,,',
'35,,27,,,,6,,,12,,,24,,71,,,24,,,24,24,,139,12,139,,,6,12,137,137,137',
'33,,,,,24,6,60,,50,,,,6,6,6,6,,,,,,,,,,,134,,,134,,,134,,134,,6,,,43',
'43,43,43,,,43,43,43,43,43,43,,,50,50,27,,,23,,,,43,,23,,,,,50,,30,,',
',50,,,27,,,,,56,,,,,,56,,,23,,,50,43,,,,136,,43,136,,43,136,,136,,,',
',,,,,56,56,56,,,,43,30,43,,,,,43,,,,,,134,,134,27,134,27,134,,,27,27',
',137,137,137,137,56,137,,56,43,,,,,,27,,,,139,23,139,,,,27,,43,43,23',
',,,,,,,,,134,,,,,139,56,139,,139,,,,,,56,,27,,27,,,,,136,,136,,136,',
'136,,,,,,,,,,137,137,137,137,,,,,,,,43,,,,,,,,,,,,,137,,50,27,,,,,,',
'136,,,23,,,,,,,139,,139,,139,,,,,50,,,,,43,,23,,56,139,,,,,,,,,,,,,',
',,,,,,,,56,,,,,50,,,,139,,,,,,,,,,,,55,,,,,,55,43,,,,,,,,23,43,23,,',
',,23,27,,,,,,,27,,43,,55,55,55,,,27,56,,56,,,,56,56,23,,,,,50,,,,,,',
',,,56,,,50,,,55,,,55,56,,,,43,,,43,,,,,,43,,,,,50,,27,,,27,,43,,,,43',
',56,,56,,,55,,,,,,,,,55,,,,,,,,,,,23,,,,,,,,43,43,,,,,43,43,,,43,,,',
',,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,43,43,,,,27,55,',
',,,,,,,,27,27,,,,,,,,,,,,55,,,23,,,,,,,,43,,,,,,43,,,,,,43,43,,,,56',
',43,,,,,56,,,,27,27,43,,,56,27,27,,,,,,,,,,,,,,,55,,55,,,,55,55,,,,',
'23,,43,23,,,43,43,,,,55,,,,27,43,,27,,,55,27,27,28,56,,,56,,28,,27,',
',,,,,,,,,,43,,43,43,,,,,55,,55,,43,43,28,,,,27,27,,,,,,,,,27,,,,,,,',
',,,,,,,,,,,,,28,,43,,,,43,,,55,,,,,27,,,,27,,,,27,,,,27,,,23,23,,56',
',,,43,,,,28,,,56,,,,,,28,,,27,,56,56,,,,,,,,,,,,,,43,,,,,,,,,,,,23,23',
',43,27,,,23,43,,,43,43,,,,,,,27,,,,,27,56,56,27,27,43,55,,56,,,,,55',
',,,,,,,,55,,,,,,23,,,28,23,23,,,,,28,,,,23,,,,,,,,56,,,56,28,,,56,56',
',,,,,,,,56,,,,,23,23,,,55,,,55,,,23,,,,,,,,,,,,,,,56,56,,,,,,,,,56,',
',,,,,,28,,28,,,,23,28,,,23,,,,,,,,,,,,,,,,,56,,,,56,,28,,56,,,,56,23',
',,,,,,,,,,,,,,,,,,,,55,,,,56,,,,,,,55,23,,,,,,,,,,55,55,,,,23,,,,,23',
',,23,23,56,,,,,,,,,,,,,,,56,28,,,,56,,,56,56,,,,,,,,,,,,,55,55,,,,,',
'55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,55,,,,55,55,,,,,,,',
',55,,,,,,,,,,,,,,,28,,,,,,,,,34,,,,,,55,55,,34,34,34,,,,,55,,,,,,34',
'34,34,,,,,,,,,,,,,,,34,34,,,,,,,,,,,55,,,,55,,,,55,,28,,55,28,,,,,,',
',,,,,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,,,,,,28,',
',,,,55,,,,,55,,,55,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,34,34',
'34,,,34,34,,,,,,,,,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,34',
'34,34,34,34,34,34,34,34,34,34,34,34,34,28,28,,,,,34,28,,,,,34,,,34,',
',,,,,34,,34,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,28,28,,,,,,,,34,28',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,28,28,,,,,,,,,28,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,28,,,,28,,,,28,,,,34,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,',
',,,,,,,34,,34,34,34,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,,28,28',
',,34,,,34,,34,,,,,,,,,,,,,,34,,,,,,,,,,34,34,34,,,,,,,,,,34,,,34,,,',
',,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,34,34,,,34,34,34,34,,,,,34,34,,,34,34,,,,,,,,',
',,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,34,,,,,,',
',,,,,,,,,,,,,,34,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,34,,34,,,,,,,,,',
',,,,34,34,34,34,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34' ]
        racc_goto_check = arr = ::Array.new(3161, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   232,    24,   297,   nil,    53,    -2,   124,    49,    57,
  -316,   282,    20,  -519,  -636,  -524,   nil,    22,   274,    83,
  -196,   209,   160,  1064,     8,  -178,  -407,   856,  1663,  -171,
   203,    45,   155,   -21,  2156,   -30,   nil,   nil,     8,  -205,
    65,  -201,  -362,   840,  -235,  -587,   nil,   137,    69,    27,
   568,   nil,   -16,    11,  -284,  1338,  1089,  -529,  -212,   -69,
     8,   nil,   nil,    36,    12,  -219,    29,   124,    76,  -232,
   282,   -17,  -299,  -263,  -429,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   108,   118,   -55,   nil,   114,
  -302,  -651,  -505,  -328,   107,  -422,    31,  -550,   100,   112,
  -158,    91,  -569,    88,  -574,  -294,  -814,    46,  -624,  -221,
  -608,  -789,    75,  -448,  -215,  -447,  -710,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  -735,  -447,
  -470,  -734,  -493,   nil,   155,  -435,   229,   212,  -483,   289,
  -579,  -455,   nil,  -528,  -707,  -771,  -788,  -151,  -356,   125,
  -310,   -14,   -66,  -468,   nil,   nil,   -72,  -469,   -71,  -468,
  -779,  -380,  -485,  -609,   nil,   nil,   132,   130,    49,   143,
   144,  -245,  -237,   166,   167,   167,  -499,  -347,  -343,   174,
   nil,  -477,  -313,   nil,  -500,  -423,   nil,  -634,  -414,  -590,
   nil,  -617,  -752,   nil,   nil,   -77,  -471 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   289,     7,   346,   290,
   nil,   nil,   533,   nil,   844,   nil,   288,   nil,   nil,   nil,
    14,    15,    21,   227,   319,   nil,   nil,   225,   226,   nil,
   281,    20,   nil,   327,    24,    25,    26,    27,   nil,   686,
   nil,   nil,   nil,   307,   nil,   nil,    28,   421,    35,   nil,
   nil,    37,    40,    39,   nil,   222,   223,   594,   nil,   129,
   429,   128,   131,    78,    79,   nil,    49,   nil,   422,   nil,
   423,   434,   642,   496,   279,   264,   nil,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   265,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   715,   561,
   nil,   716,   943,   789,   549,   nil,   550,   nil,   nil,   551,
   nil,   553,   658,   nil,   nil,   nil,   559,   nil,   nil,   nil,
   754,   nil,   nil,   nil,   433,   266,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,    80,    82,   nil,   nil,   nil,
   nil,   nil,   609,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   829,   548,   nil,   552,   562,   564,   566,   801,
   569,   570,   802,   573,   576,   nil,   283 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 177, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  3, 154, :_reduce_40,
  1, 154, :_reduce_none,
  3, 165, :_reduce_42,
  3, 165, :_reduce_43,
  1, 176, :_reduce_none,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  3, 176, :_reduce_47,
  2, 176, :_reduce_48,
  1, 176, :_reduce_none,
  1, 164, :_reduce_50,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_54,
  0, 189, :_reduce_55,
  0, 190, :_reduce_56,
  6, 186, :_reduce_57,
  1, 188, :_reduce_58,
  2, 180, :_reduce_59,
  3, 180, :_reduce_60,
  4, 180, :_reduce_61,
  5, 180, :_reduce_62,
  4, 180, :_reduce_63,
  5, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  2, 180, :_reduce_69,
  1, 166, :_reduce_none,
  3, 166, :_reduce_71,
  1, 194, :_reduce_none,
  3, 194, :_reduce_73,
  1, 193, :_reduce_74,
  2, 193, :_reduce_75,
  3, 193, :_reduce_76,
  5, 193, :_reduce_77,
  2, 193, :_reduce_78,
  4, 193, :_reduce_79,
  2, 193, :_reduce_80,
  4, 193, :_reduce_81,
  1, 193, :_reduce_82,
  3, 193, :_reduce_83,
  1, 197, :_reduce_none,
  3, 197, :_reduce_85,
  2, 196, :_reduce_86,
  3, 196, :_reduce_87,
  1, 199, :_reduce_88,
  3, 199, :_reduce_89,
  1, 198, :_reduce_90,
  1, 198, :_reduce_91,
  4, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  3, 198, :_reduce_96,
  2, 198, :_reduce_97,
  1, 198, :_reduce_98,
  1, 173, :_reduce_99,
  1, 173, :_reduce_100,
  4, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  3, 173, :_reduce_105,
  2, 173, :_reduce_106,
  1, 173, :_reduce_107,
  1, 202, :_reduce_108,
  1, 202, :_reduce_none,
  2, 203, :_reduce_110,
  1, 203, :_reduce_111,
  3, 203, :_reduce_112,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_116,
  1, 204, :_reduce_117,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 162, :_reduce_120,
  1, 162, :_reduce_none,
  1, 163, :_reduce_122,
  0, 210, :_reduce_123,
  4, 163, :_reduce_124,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  3, 179, :_reduce_199,
  5, 179, :_reduce_200,
  6, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  5, 179, :_reduce_204,
  5, 179, :_reduce_205,
  4, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  3, 179, :_reduce_214,
  3, 179, :_reduce_215,
  4, 179, :_reduce_216,
  4, 179, :_reduce_217,
  2, 179, :_reduce_218,
  2, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  3, 179, :_reduce_230,
  3, 179, :_reduce_231,
  3, 179, :_reduce_232,
  2, 179, :_reduce_233,
  2, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  3, 179, :_reduce_237,
  3, 179, :_reduce_238,
  3, 179, :_reduce_239,
  6, 179, :_reduce_240,
  1, 179, :_reduce_none,
  1, 175, :_reduce_242,
  1, 212, :_reduce_none,
  2, 212, :_reduce_244,
  4, 212, :_reduce_245,
  2, 212, :_reduce_246,
  3, 216, :_reduce_247,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 170, :_reduce_250,
  1, 170, :_reduce_251,
  2, 170, :_reduce_252,
  4, 170, :_reduce_253,
  2, 170, :_reduce_254,
  1, 192, :_reduce_255,
  2, 192, :_reduce_256,
  2, 192, :_reduce_257,
  4, 192, :_reduce_258,
  1, 192, :_reduce_259,
  0, 220, :_reduce_260,
  2, 185, :_reduce_261,
  2, 219, :_reduce_262,
  2, 218, :_reduce_263,
  1, 218, :_reduce_none,
  1, 213, :_reduce_265,
  2, 213, :_reduce_266,
  3, 213, :_reduce_267,
  4, 213, :_reduce_268,
  1, 221, :_reduce_269,
  1, 221, :_reduce_270,
  3, 174, :_reduce_271,
  4, 174, :_reduce_272,
  2, 174, :_reduce_273,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_284,
  0, 244, :_reduce_285,
  4, 211, :_reduce_286,
  2, 211, :_reduce_287,
  0, 245, :_reduce_288,
  4, 211, :_reduce_289,
  3, 211, :_reduce_290,
  3, 211, :_reduce_291,
  2, 211, :_reduce_292,
  3, 211, :_reduce_293,
  3, 211, :_reduce_294,
  1, 211, :_reduce_295,
  4, 211, :_reduce_296,
  3, 211, :_reduce_297,
  1, 211, :_reduce_298,
  5, 211, :_reduce_299,
  4, 211, :_reduce_300,
  3, 211, :_reduce_301,
  2, 211, :_reduce_302,
  1, 211, :_reduce_none,
  2, 211, :_reduce_304,
  2, 211, :_reduce_305,
  6, 211, :_reduce_306,
  6, 211, :_reduce_307,
  0, 246, :_reduce_308,
  0, 247, :_reduce_309,
  7, 211, :_reduce_310,
  0, 248, :_reduce_311,
  0, 249, :_reduce_312,
  7, 211, :_reduce_313,
  5, 211, :_reduce_314,
  4, 211, :_reduce_315,
  0, 250, :_reduce_316,
  0, 251, :_reduce_317,
  9, 211, :_reduce_318,
  0, 252, :_reduce_319,
  0, 253, :_reduce_320,
  7, 211, :_reduce_321,
  0, 254, :_reduce_322,
  0, 255, :_reduce_323,
  0, 256, :_reduce_324,
  9, 211, :_reduce_325,
  0, 257, :_reduce_326,
  0, 258, :_reduce_327,
  6, 211, :_reduce_328,
  0, 259, :_reduce_329,
  6, 211, :_reduce_330,
  0, 260, :_reduce_331,
  0, 261, :_reduce_332,
  9, 211, :_reduce_333,
  1, 211, :_reduce_334,
  1, 211, :_reduce_335,
  1, 211, :_reduce_336,
  1, 211, :_reduce_337,
  1, 169, :_reduce_338,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_356,
  1, 159, :_reduce_none,
  2, 159, :_reduce_358,
  1, 239, :_reduce_none,
  1, 239, :_reduce_360,
  1, 273, :_reduce_none,
  3, 273, :_reduce_362,
  1, 276, :_reduce_363,
  3, 276, :_reduce_364,
  1, 275, :_reduce_365,
  4, 275, :_reduce_366,
  6, 275, :_reduce_367,
  3, 275, :_reduce_368,
  5, 275, :_reduce_369,
  2, 275, :_reduce_370,
  4, 275, :_reduce_371,
  1, 275, :_reduce_372,
  3, 275, :_reduce_373,
  4, 277, :_reduce_374,
  2, 277, :_reduce_375,
  2, 277, :_reduce_376,
  1, 277, :_reduce_377,
  2, 282, :_reduce_378,
  1, 282, :_reduce_none,
  6, 283, :_reduce_380,
  8, 283, :_reduce_381,
  4, 283, :_reduce_382,
  6, 283, :_reduce_383,
  4, 283, :_reduce_384,
  2, 283, :_reduce_385,
  6, 283, :_reduce_386,
  2, 283, :_reduce_387,
  4, 283, :_reduce_388,
  6, 283, :_reduce_389,
  2, 283, :_reduce_390,
  4, 283, :_reduce_391,
  2, 283, :_reduce_392,
  4, 283, :_reduce_393,
  1, 283, :_reduce_394,
  1, 187, :_reduce_395,
  1, 187, :_reduce_none,
  3, 287, :_reduce_397,
  1, 287, :_reduce_398,
  4, 287, :_reduce_399,
  1, 288, :_reduce_none,
  4, 288, :_reduce_401,
  1, 289, :_reduce_402,
  3, 289, :_reduce_403,
  1, 290, :_reduce_404,
  1, 290, :_reduce_none,
  0, 294, :_reduce_406,
  3, 234, :_reduce_407,
  4, 292, :_reduce_408,
  1, 292, :_reduce_409,
  3, 293, :_reduce_410,
  3, 293, :_reduce_411,
  0, 297, :_reduce_412,
  0, 298, :_reduce_413,
  6, 296, :_reduce_414,
  2, 182, :_reduce_415,
  4, 182, :_reduce_416,
  5, 182, :_reduce_417,
  5, 182, :_reduce_418,
  0, 300, :_reduce_419,
  3, 233, :_reduce_420,
  4, 233, :_reduce_421,
  4, 233, :_reduce_422,
  3, 233, :_reduce_423,
  3, 233, :_reduce_424,
  3, 233, :_reduce_425,
  2, 233, :_reduce_426,
  1, 233, :_reduce_427,
  4, 233, :_reduce_428,
  0, 301, :_reduce_429,
  0, 302, :_reduce_430,
  6, 232, :_reduce_431,
  0, 303, :_reduce_432,
  0, 304, :_reduce_433,
  6, 232, :_reduce_434,
  0, 306, :_reduce_435,
  6, 238, :_reduce_436,
  1, 305, :_reduce_none,
  1, 305, :_reduce_none,
  6, 158, :_reduce_439,
  0, 158, :_reduce_440,
  1, 307, :_reduce_441,
  1, 307, :_reduce_none,
  1, 307, :_reduce_none,
  2, 308, :_reduce_444,
  1, 308, :_reduce_none,
  2, 160, :_reduce_446,
  1, 160, :_reduce_none,
  1, 222, :_reduce_448,
  1, 222, :_reduce_449,
  1, 222, :_reduce_none,
  1, 223, :_reduce_451,
  1, 310, :_reduce_452,
  1, 310, :_reduce_none,
  2, 310, :_reduce_454,
  3, 311, :_reduce_455,
  1, 311, :_reduce_456,
  3, 224, :_reduce_457,
  3, 225, :_reduce_458,
  3, 226, :_reduce_459,
  3, 226, :_reduce_460,
  1, 315, :_reduce_461,
  3, 315, :_reduce_462,
  1, 316, :_reduce_none,
  2, 316, :_reduce_464,
  3, 228, :_reduce_465,
  3, 228, :_reduce_466,
  1, 318, :_reduce_467,
  3, 318, :_reduce_468,
  3, 227, :_reduce_469,
  3, 227, :_reduce_470,
  3, 229, :_reduce_471,
  3, 229, :_reduce_472,
  1, 319, :_reduce_473,
  3, 319, :_reduce_474,
  1, 320, :_reduce_475,
  3, 320, :_reduce_476,
  1, 312, :_reduce_477,
  2, 312, :_reduce_478,
  1, 313, :_reduce_479,
  2, 313, :_reduce_480,
  1, 314, :_reduce_481,
  2, 314, :_reduce_482,
  1, 317, :_reduce_483,
  0, 322, :_reduce_484,
  3, 317, :_reduce_485,
  0, 323, :_reduce_486,
  4, 317, :_reduce_487,
  1, 321, :_reduce_488,
  1, 321, :_reduce_489,
  1, 321, :_reduce_490,
  1, 321, :_reduce_none,
  2, 208, :_reduce_492,
  1, 208, :_reduce_493,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  1, 324, :_reduce_none,
  3, 209, :_reduce_498,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  2, 309, :_reduce_501,
  2, 309, :_reduce_502,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 325, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 201, :_reduce_514,
  1, 201, :_reduce_515,
  1, 201, :_reduce_516,
  1, 201, :_reduce_517,
  1, 201, :_reduce_518,
  1, 230, :_reduce_519,
  1, 230, :_reduce_520,
  1, 168, :_reduce_521,
  1, 168, :_reduce_522,
  1, 172, :_reduce_523,
  1, 172, :_reduce_524,
  1, 240, :_reduce_525,
  0, 326, :_reduce_526,
  4, 240, :_reduce_527,
  2, 240, :_reduce_528,
  3, 242, :_reduce_529,
  2, 242, :_reduce_530,
  4, 327, :_reduce_531,
  2, 327, :_reduce_532,
  2, 327, :_reduce_533,
  1, 327, :_reduce_none,
  2, 329, :_reduce_535,
  0, 329, :_reduce_536,
  6, 295, :_reduce_537,
  8, 295, :_reduce_538,
  4, 295, :_reduce_539,
  6, 295, :_reduce_540,
  4, 295, :_reduce_541,
  6, 295, :_reduce_542,
  2, 295, :_reduce_543,
  4, 295, :_reduce_544,
  6, 295, :_reduce_545,
  2, 295, :_reduce_546,
  4, 295, :_reduce_547,
  2, 295, :_reduce_548,
  4, 295, :_reduce_549,
  1, 295, :_reduce_550,
  0, 295, :_reduce_551,
  1, 291, :_reduce_552,
  1, 291, :_reduce_553,
  1, 291, :_reduce_554,
  1, 291, :_reduce_555,
  1, 274, :_reduce_none,
  1, 274, :_reduce_557,
  1, 331, :_reduce_none,
  1, 332, :_reduce_none,
  3, 332, :_reduce_560,
  1, 332, :_reduce_none,
  3, 332, :_reduce_562,
  1, 284, :_reduce_563,
  3, 284, :_reduce_564,
  2, 333, :_reduce_565,
  2, 334, :_reduce_566,
  1, 278, :_reduce_none,
  3, 278, :_reduce_568,
  1, 328, :_reduce_none,
  3, 328, :_reduce_570,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 279, :_reduce_573,
  1, 279, :_reduce_574,
  3, 336, :_reduce_575,
  3, 337, :_reduce_576,
  1, 285, :_reduce_577,
  3, 285, :_reduce_578,
  1, 330, :_reduce_579,
  3, 330, :_reduce_580,
  1, 338, :_reduce_none,
  1, 338, :_reduce_none,
  2, 286, :_reduce_583,
  1, 286, :_reduce_584,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 281, :_reduce_587,
  2, 280, :_reduce_588,
  0, 280, :_reduce_589,
  1, 243, :_reduce_none,
  0, 340, :_reduce_591,
  4, 243, :_reduce_592,
  1, 231, :_reduce_593,
  2, 231, :_reduce_594,
  1, 215, :_reduce_none,
  3, 215, :_reduce_596,
  3, 341, :_reduce_597,
  2, 341, :_reduce_598,
  2, 341, :_reduce_599,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 299, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 171, :_reduce_none,
  0, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 241, :_reduce_621,
  1, 241, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_624,
  0, 151, :_reduce_625 ]

racc_reduce_n = 626

racc_shift_n = 1048

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "mrhs_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@26",
  "f_args",
  "do_block",
  "@27",
  "@28",
  "operation3",
  "@29",
  "@30",
  "@31",
  "@32",
  "@33",
  "cases",
  "@34",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@35",
  "@36",
  "sym",
  "simple_numeric",
  "@37",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@38",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1][1..-1] # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1][1..-1]
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2[1..-1]
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3][1..-1]
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2][1..-1]))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2][0] = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_271(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_272(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_273(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

def _reduce_284(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_286(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_287(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_288(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_289(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_290(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_292(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_293(val, _values, result)
                      result = val[1] || s(:array)
                      result[0] = :array # aref_args is :args
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:hash, *val[1].values) # TODO: array_to_hash?
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_301(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_330(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_332(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = lexer.lineno
                    
    result
end

def _reduce_333(val, _values, result)
                      result = new_defs val
                      result[3].line val[5]

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_365(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                      debug20 16, val, result
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_371(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                      debug20 17, val, result
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_var :*
                      debug20 18, val, result
                    
    result
end

def _reduce_373(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
 result = 0 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 405 omitted

def _reduce_406(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_407(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_414(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args[1..-1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_434(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      _, klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_462(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0].dup << word
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_468(val, _values, result)
                      list, sym, _ = val

                      case sym[0]
                      when :dstr then
                        sym[0] = :dsym
                      when :str then
                        sym = s(:lit, sym.last.to_sym)
                      else
                        debug20 24
                        sym = s(:dsym, "", result)
                      end

                      result = list.dup << sym
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << s(:str, val[1])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].dup << s(:lit, val[1].to_sym)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_484(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_485(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [lexer.lex_strterm, 
                                lexer.brace_nest, 
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store, 
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_beg
                    
    result
end

def _reduce_487(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt[0]
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_488(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_502(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

# reduce 509 omitted

# reduce 510 omitted

# reduce 511 omitted

def _reduce_512(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_513(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_514(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_515(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_516(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_517(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_518(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_519(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_520(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_521(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_522(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_523(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_524(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_525(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_526(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_527(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_528(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_529(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_530(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_531(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_532(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_550(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_551(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_553(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_554(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_555(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 558 omitted

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 561 omitted

def _reduce_562(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_563(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_564(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_565(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_566(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = args val
                    
    result
end

# reduce 571 omitted

# reduce 572 omitted

def _reduce_573(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_574(val, _values, result)
                      debug20 36, val, result
                    
    result
end

def _reduce_575(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_576(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_579(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_580(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 581 omitted

# reduce 582 omitted

def _reduce_583(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_584(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 585 omitted

# reduce 586 omitted

def _reduce_587(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_588(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_589(val, _values, result)
                      result = nil
                    
    result
end

# reduce 590 omitted

def _reduce_591(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_593(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_594(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 595 omitted

def _reduce_596(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                      result[0] = :hash
                      # TODO: shouldn't this be a hash?
                    
    result
end

def _reduce_597(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_598(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

def _reduce_621(val, _values, result)
 yyerrok 
    result
end

# reduce 622 omitted

# reduce 623 omitted

def _reduce_624(val, _values, result)
 yyerrok 
    result
end

def _reduce_625(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
